
MY_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000055a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ec  00800060  000055a8  0000563c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080014c  0080014c  00005728  2**0
                  ALLOC
  3 .stab         0000609c  00000000  00000000  00005728  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002189  00000000  00000000  0000b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d94d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000da8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000dbfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000f846  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00010731  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000114e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00011640  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000118cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001209b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 35 08 	jmp	0x106a	; 0x106a <__vector_4>
      14:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__vector_5>
      18:	0c 94 db 0a 	jmp	0x15b6	; 0x15b6 <__vector_6>
      1c:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__vector_7>
      20:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__vector_8>
      24:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__vector_9>
      28:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__vector_10>
      2c:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f5 e5       	ldi	r31, 0x55	; 85
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 34       	cpi	r26, 0x4C	; 76
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e4       	ldi	r26, 0x4C	; 76
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a8 29 	call	0x5350	; 0x5350 <main>
      8a:	0c 94 d2 2a 	jmp	0x55a4	; 0x55a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9b 2a 	jmp	0x5536	; 0x5536 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ed       	ldi	r26, 0xDE	; 222
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b7 2a 	jmp	0x556e	; 0x556e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a7 2a 	jmp	0x554e	; 0x554e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a7 2a 	jmp	0x554e	; 0x554e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9b 2a 	jmp	0x5536	; 0x5536 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e ed       	ldi	r24, 0xDE	; 222
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b7 2a 	jmp	0x556e	; 0x556e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a7 2a 	jmp	0x554e	; 0x554e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a7 2a 	jmp	0x554e	; 0x554e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a7 2a 	jmp	0x554e	; 0x554e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ab 2a 	jmp	0x5556	; 0x5556 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <WTD_voidEnable>:

#include "WDT_Interface.h"
#include "WDT_Private.h"

void WTD_voidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1<<3);
     b4e:	a1 e4       	ldi	r26, 0x41	; 65
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e4       	ldi	r30, 0x41	; 65
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <WTD_voidDisable>:

void WTD_voidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1<<3) | (1<<4);  //0b00011000
     b6a:	a1 e4       	ldi	r26, 0x41	; 65
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e1 e4       	ldi	r30, 0x41	; 65
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 61       	ori	r24, 0x18	; 24
     b76:	8c 93       	st	X, r24
	WDTCR = 0x00; //a logic 0 to WDE
     b78:	e1 e4       	ldi	r30, 0x41	; 65
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	10 82       	st	Z, r1
}
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	08 95       	ret

00000b84 <WTD_u8Sleep>:

void WTD_u8Sleep(uint8 u8SleepTime)
{
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	0f 92       	push	r0
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	89 83       	std	Y+1, r24	; 0x01
	WDTCR &= 0b11111000;
     b90:	a1 e4       	ldi	r26, 0x41	; 65
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e1 e4       	ldi	r30, 0x41	; 65
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	88 7f       	andi	r24, 0xF8	; 248
     b9c:	8c 93       	st	X, r24
	WDTCR |= u8SleepTime;
     b9e:	a1 e4       	ldi	r26, 0x41	; 65
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e1 e4       	ldi	r30, 0x41	; 65
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	90 81       	ld	r25, Z
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	89 2b       	or	r24, r25
     bac:	8c 93       	st	X, r24
}
     bae:	0f 90       	pop	r0
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <USART_voidInit>:
#include "USART_Config.h"
#include "USART_Interface.h"
#include "USART_Private.h"

void USART_voidInit(void)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <USART_voidInit+0x6>
     bbc:	0f 92       	push	r0
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
	uint8 u8TempAloc;
	uint8 u8TempBloc = 0b00011000;
     bc2:	88 e1       	ldi	r24, 0x18	; 24
     bc4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 u8TempCloc = 0b1000000; //select UCSRC by set bit7
     bc6:	80 e4       	ldi	r24, 0x40	; 64
     bc8:	89 83       	std	Y+1, r24	; 0x01
#elif USART_DATA_SIZE == USART_DATA_SIZE_8BIT
	SET_BIT(u8TempCloc,1);
	SET_BIT(u8TempCloc,2);
	CLR_BIT(u8TempBloc,2);
#elif USART_DATA_SIZE == USART_DATA_SIZE_9BIT
	SET_BIT(u8TempCloc,1);
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	82 60       	ori	r24, 0x02	; 2
     bce:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(u8TempCloc,2);
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	84 60       	ori	r24, 0x04	; 4
     bd4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(u8TempBloc,2);
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	84 60       	ori	r24, 0x04	; 4
     bda:	8a 83       	std	Y+2, r24	; 0x02
#endif

#if USART_MODE == USART_SYNCHRONOUS
	CLR_BIT(u8TempCloc,6);
#else
	SET_BIT(u8TempCloc,6);
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	80 64       	ori	r24, 0x40	; 64
     be0:	89 83       	std	Y+1, r24	; 0x01
#endif

#if USART_STOP_BIT == USART_ONE_STOP_BIT
	CLR_BIT(u8TempCloc,3);
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	87 7f       	andi	r24, 0xF7	; 247
     be6:	89 83       	std	Y+1, r24	; 0x01
#else
	SET_BIT(u8TempCloc,3);
#endif

#if USART_PARITY == USART_EVEN_PARITY_BIT
	CLR_BIT(u8TempCloc,4);
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	8f 7e       	andi	r24, 0xEF	; 239
     bec:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(u8TempCloc,5);
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	80 62       	ori	r24, 0x20	; 32
     bf2:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(u8TempCloc,5);
#endif

	/* setup --> send at synchronous mode */
#if USART_CLOCK_POLARITY == USART_SETUP_RISING
	CLR_BIT(u8TempCloc,0);
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	8e 7f       	andi	r24, 0xFE	; 254
     bf8:	89 83       	std	Y+1, r24	; 0x01
#else
	SET_BIT(u8TempCloc,0);
#endif

	UBRRH = (USART_BAUD_RATE>>8)&0x0f;
     bfa:	e0 e4       	ldi	r30, 0x40	; 64
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	10 82       	st	Z, r1
	UBRRL = (uint8)USART_BAUD_RATE;
     c00:	e9 e2       	ldi	r30, 0x29	; 41
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	83 e3       	ldi	r24, 0x33	; 51
     c06:	80 83       	st	Z, r24
	UCSRB = u8TempBloc;
     c08:	ea e2       	ldi	r30, 0x2A	; 42
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	8a 81       	ldd	r24, Y+2	; 0x02
     c0e:	80 83       	st	Z, r24
	UCSRC = u8TempCloc;
     c10:	e0 e4       	ldi	r30, 0x40	; 64
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	80 83       	st	Z, r24


}
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <USART_voidSend>:

/*polling*/
void USART_voidSend(uint16 u16Data)
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	00 d0       	rcall	.+0      	; 0xc2a <USART_voidSend+0x6>
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	89 83       	std	Y+1, r24	; 0x01

	while(GET_BIT(UCSRB,5) == 0);
     c32:	ea e2       	ldi	r30, 0x2A	; 42
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	82 95       	swap	r24
     c3a:	86 95       	lsr	r24
     c3c:	87 70       	andi	r24, 0x07	; 7
     c3e:	88 2f       	mov	r24, r24
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	81 70       	andi	r24, 0x01	; 1
     c44:	90 70       	andi	r25, 0x00	; 0
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	a1 f3       	breq	.-24     	; 0xc32 <USART_voidSend+0xe>

#if USART_DATA_SIZE == USART_DATA_SIZE_9BIT
	if(GET_BIT(u16Data,8) == 0)
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	80 70       	andi	r24, 0x00	; 0
     c50:	91 70       	andi	r25, 0x01	; 1
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	41 f4       	brne	.+16     	; 0xc66 <USART_voidSend+0x42>
	{
		CLR_BIT(UCSRB,0);
     c56:	aa e2       	ldi	r26, 0x2A	; 42
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	ea e2       	ldi	r30, 0x2A	; 42
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	8e 7f       	andi	r24, 0xFE	; 254
     c62:	8c 93       	st	X, r24
     c64:	07 c0       	rjmp	.+14     	; 0xc74 <USART_voidSend+0x50>
	}
	else
	{
		SET_BIT(UCSRB,0);
     c66:	aa e2       	ldi	r26, 0x2A	; 42
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	ea e2       	ldi	r30, 0x2A	; 42
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	81 60       	ori	r24, 0x01	; 1
     c72:	8c 93       	st	X, r24
	}
#endif
	UDR = u16Data;
     c74:	ec e2       	ldi	r30, 0x2C	; 44
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	80 83       	st	Z, r24

}
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <USART_enuRecieve>:
tenuErrorStatus USART_enuRecieve(uint16* pu16Data)
{
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <USART_enuRecieve+0x6>
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <USART_enuRecieve+0x8>
     c8e:	0f 92       	push	r0
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	9d 83       	std	Y+5, r25	; 0x05
     c96:	8c 83       	std	Y+4, r24	; 0x04
	tenuErrorStatus ErrorState=EOK;
     c98:	1b 82       	std	Y+3, r1	; 0x03
	uint8 u8CheckError=0;
     c9a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8NineBit;

	while(GET_BIT(UCSRA,7) == 0);
     c9c:	eb e2       	ldi	r30, 0x2B	; 43
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	88 23       	and	r24, r24
     ca4:	dc f7       	brge	.-10     	; 0xc9c <USART_enuRecieve+0x16>
	u8CheckError= UCSRA &0b00011100; //catch errors (FE,DOR,PE)
     ca6:	eb e2       	ldi	r30, 0x2B	; 43
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8c 71       	andi	r24, 0x1C	; 28
     cae:	8a 83       	std	Y+2, r24	; 0x02
	if(u8CheckError != 0)
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	88 23       	and	r24, r24
     cb4:	19 f0       	breq	.+6      	; 0xcbc <USART_enuRecieve+0x36>
	{
		ErrorState=ENOK;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	8b 83       	std	Y+3, r24	; 0x03
     cba:	16 c0       	rjmp	.+44     	; 0xce8 <USART_enuRecieve+0x62>
	}
	else
	{
#if USART_DATA_SIZE == USART_DATA_SIZE_9BIT
	u8NineBit = GET_BIT(UCSRB,1);
     cbc:	ea e2       	ldi	r30, 0x2A	; 42
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	86 95       	lsr	r24
     cc4:	81 70       	andi	r24, 0x01	; 1
     cc6:	89 83       	std	Y+1, r24	; 0x01
	*pu16Data = u8NineBit<<8 | UDR;
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	38 2f       	mov	r19, r24
     cd0:	22 27       	eor	r18, r18
     cd2:	ec e2       	ldi	r30, 0x2C	; 44
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	82 2b       	or	r24, r18
     cde:	93 2b       	or	r25, r19
     ce0:	ec 81       	ldd	r30, Y+4	; 0x04
     ce2:	fd 81       	ldd	r31, Y+5	; 0x05
     ce4:	91 83       	std	Z+1, r25	; 0x01
     ce6:	80 83       	st	Z, r24
#else
	*pu16Data = UDR;
#endif
	}
	return ErrorState;
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
}
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <USART_voidEnableIntRXComp>:

void USART_voidEnableIntRXComp(void)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,7);
     d02:	aa e2       	ldi	r26, 0x2A	; 42
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	ea e2       	ldi	r30, 0x2A	; 42
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	80 68       	ori	r24, 0x80	; 128
     d0e:	8c 93       	st	X, r24
}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <USART_voidDisableIntRXComp>:
void USART_voidDisableIntRXComp(void)
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,7);
     d1e:	aa e2       	ldi	r26, 0x2A	; 42
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	ea e2       	ldi	r30, 0x2A	; 42
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8f 77       	andi	r24, 0x7F	; 127
     d2a:	8c 93       	st	X, r24
}
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <USART_voidEnableIntTXComp>:

void USART_voidEnableIntTXComp(void)
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,6);
     d3a:	aa e2       	ldi	r26, 0x2A	; 42
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	ea e2       	ldi	r30, 0x2A	; 42
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 64       	ori	r24, 0x40	; 64
     d46:	8c 93       	st	X, r24
}
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <USART_voidDisableIntTXComp>:
void USART_voidDisableIntTXComp(void)
{
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,6);
     d56:	aa e2       	ldi	r26, 0x2A	; 42
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	ea e2       	ldi	r30, 0x2A	; 42
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	8f 7b       	andi	r24, 0xBF	; 191
     d62:	8c 93       	st	X, r24
}
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	08 95       	ret

00000d6a <USART_voidEnableIntTXEmpty>:

void USART_voidEnableIntTXEmpty(void)
{
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,5);
     d72:	aa e2       	ldi	r26, 0x2A	; 42
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ea e2       	ldi	r30, 0x2A	; 42
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	80 62       	ori	r24, 0x20	; 32
     d7e:	8c 93       	st	X, r24
}
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <USART_voidDisableIntTXEmpty>:
void USART_voidDisableIntTXEmpty(void)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,5);
     d8e:	aa e2       	ldi	r26, 0x2A	; 42
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ea e2       	ldi	r30, 0x2A	; 42
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8f 7d       	andi	r24, 0xDF	; 223
     d9a:	8c 93       	st	X, r24
}
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <TIM2_voidInit>:

pf TIM2_pfOVFCallBack;
pf TIM2_pfCompareCallBack;

void TIM2_voidInit(void)
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
	/* Select timer mode */
#if TIM2_MODE == TIM2_NORMAL
	CLR_BIT(TCCR2,6);
     daa:	a5 e4       	ldi	r26, 0x45	; 69
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e5 e4       	ldi	r30, 0x45	; 69
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	8f 7b       	andi	r24, 0xBF	; 191
     db6:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,3);
     db8:	a5 e4       	ldi	r26, 0x45	; 69
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e5 e4       	ldi	r30, 0x45	; 69
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	87 7f       	andi	r24, 0xF7	; 247
     dc4:	8c 93       	st	X, r24

#endif

	/* select wave form on OC2 pin */
#if TIM2_WAVE == TIM2_TOG_OC2
	SET_BIT(TCCR2,4);
     dc6:	a5 e4       	ldi	r26, 0x45	; 69
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e5 e4       	ldi	r30, 0x45	; 69
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	80 61       	ori	r24, 0x10	; 16
     dd2:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,5);
     dd4:	a5 e4       	ldi	r26, 0x45	; 69
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e5 e4       	ldi	r30, 0x45	; 69
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	8f 7d       	andi	r24, 0xDF	; 223
     de0:	8c 93       	st	X, r24
#else
	CLR_BIT(TCCR2,4);
	CLR_BIT(TCCR2,5);

#endif
}
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	08 95       	ret

00000de8 <TIM2_voidEnable>:
void TIM2_voidEnable(uint8 u8PreScaler)
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	0f 92       	push	r0
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 &=0b11111000;
     df4:	a5 e4       	ldi	r26, 0x45	; 69
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e5 e4       	ldi	r30, 0x45	; 69
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	88 7f       	andi	r24, 0xF8	; 248
     e00:	8c 93       	st	X, r24
	TCCR2 |= (u8PreScaler & 0b00000111); //& 0b00000111 --> to prevent last 5 bits of TCCR2 Reg
     e02:	a5 e4       	ldi	r26, 0x45	; 69
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e5 e4       	ldi	r30, 0x45	; 69
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	98 2f       	mov	r25, r24
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	87 70       	andi	r24, 0x07	; 7
     e12:	89 2b       	or	r24, r25
     e14:	8c 93       	st	X, r24
}
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <TIM2_voidDisable>:
void TIM2_voidDisable(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &=0b11111000;
     e26:	a5 e4       	ldi	r26, 0x45	; 69
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e5 e4       	ldi	r30, 0x45	; 69
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	88 7f       	andi	r24, 0xF8	; 248
     e32:	8c 93       	st	X, r24
}
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <TIM2_voidEnableOvfInt>:
void TIM2_voidEnableOvfInt(void)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,6);
     e42:	a9 e5       	ldi	r26, 0x59	; 89
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e9 e5       	ldi	r30, 0x59	; 89
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	80 64       	ori	r24, 0x40	; 64
     e4e:	8c 93       	st	X, r24
}
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <TIM2_voidDisableOvfInt>:
void TIM2_voidDisableOvfInt(void)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,6);
     e5e:	a9 e5       	ldi	r26, 0x59	; 89
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e9 e5       	ldi	r30, 0x59	; 89
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8f 7b       	andi	r24, 0xBF	; 191
     e6a:	8c 93       	st	X, r24
}
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <TIM2_voidEnableCompareInt>:
void TIM2_voidEnableCompareInt(void)
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,7);
     e7a:	a9 e5       	ldi	r26, 0x59	; 89
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e9 e5       	ldi	r30, 0x59	; 89
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 68       	ori	r24, 0x80	; 128
     e86:	8c 93       	st	X, r24
}
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <TIM2_voidDisableCompareInt>:
void TIM2_voidDisableCompareInt(void)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,7);
     e96:	a9 e5       	ldi	r26, 0x59	; 89
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e9 e5       	ldi	r30, 0x59	; 89
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 77       	andi	r24, 0x7F	; 127
     ea2:	8c 93       	st	X, r24
}
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <TIM2_voidSetCallBackOvfInt>:
void TIM2_voidSetCallBackOvfInt(pf pfOvfCallBack)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <TIM2_voidSetCallBackOvfInt+0x6>
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	9a 83       	std	Y+2, r25	; 0x02
     eb6:	89 83       	std	Y+1, r24	; 0x01
	TIM2_pfOVFCallBack = pfOvfCallBack;
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	9a 81       	ldd	r25, Y+2	; 0x02
     ebc:	90 93 57 01 	sts	0x0157, r25
     ec0:	80 93 56 01 	sts	0x0156, r24
}
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <TIM2_voidSetCallBackCompareInt>:
void TIM2_voidSetCallBackCompareInt(pf pfCompareCallBack)
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <TIM2_voidSetCallBackCompareInt+0x6>
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	9a 83       	std	Y+2, r25	; 0x02
     eda:	89 83       	std	Y+1, r24	; 0x01
	TIM2_pfCompareCallBack = pfCompareCallBack;
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	90 93 55 01 	sts	0x0155, r25
     ee4:	80 93 54 01 	sts	0x0154, r24
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <TIM2_voidSetTCNTValue>:
void TIM2_voidSetTCNTValue(uint8 u8TcntReg)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	0f 92       	push	r0
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = u8TcntReg;
     efe:	e4 e4       	ldi	r30, 0x44	; 68
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	80 83       	st	Z, r24
}
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <TIM2_voidSetOCRValue>:
void TIM2_voidSetOCRValue(uint8 u8OcrReg)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	0f 92       	push	r0
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = u8OcrReg;
     f1a:	e3 e4       	ldi	r30, 0x43	; 67
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	80 83       	st	Z, r24
}
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <Tim2_u8ReadTcntReg>:
uint8 Tim2_u8ReadTcntReg(void)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	return TCNT2;
     f32:	e4 e4       	ldi	r30, 0x44	; 68
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
}
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <Tim2_u8ReadOcrReg>:

uint8 Tim2_u8ReadOcrReg(void)
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
	return OCR2;
     f46:	e3 e4       	ldi	r30, 0x43	; 67
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
}
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <TIM2_voidEnableOutputClk>:

void TIM2_voidEnableOutputClk(void)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ASSR,3);
     f5a:	a2 e4       	ldi	r26, 0x42	; 66
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e2 e4       	ldi	r30, 0x42	; 66
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 60       	ori	r24, 0x08	; 8
     f66:	8c 93       	st	X, r24
}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <TIM2_voidChangeMode>:


void TIM2_voidChangeMode(uint8 u8Mode)
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	0f 92       	push	r0
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	89 83       	std	Y+1, r24	; 0x01
	if (u8Mode == TIM2_NORMAL_MODE)
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	79 f4       	brne	.+30     	; 0xf9e <TIM2_voidChangeMode+0x30>
	{
		CLR_BIT(TCCR2,6);
     f80:	a5 e4       	ldi	r26, 0x45	; 69
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e5 e4       	ldi	r30, 0x45	; 69
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	8f 7b       	andi	r24, 0xBF	; 191
     f8c:	8c 93       	st	X, r24
		CLR_BIT(TCCR2,3);
     f8e:	a5 e4       	ldi	r26, 0x45	; 69
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e5 e4       	ldi	r30, 0x45	; 69
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	87 7f       	andi	r24, 0xF7	; 247
     f9a:	8c 93       	st	X, r24
     f9c:	35 c0       	rjmp	.+106    	; 0x1008 <TIM2_voidChangeMode+0x9a>
	}

	else if (u8Mode == TIM2_CTC_MODE)
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	82 30       	cpi	r24, 0x02	; 2
     fa2:	79 f4       	brne	.+30     	; 0xfc2 <TIM2_voidChangeMode+0x54>
	{
		CLR_BIT(TCCR2,6);
     fa4:	a5 e4       	ldi	r26, 0x45	; 69
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e5 e4       	ldi	r30, 0x45	; 69
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	8f 7b       	andi	r24, 0xBF	; 191
     fb0:	8c 93       	st	X, r24
		SET_BIT(TCCR2,3);
     fb2:	a5 e4       	ldi	r26, 0x45	; 69
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e5 e4       	ldi	r30, 0x45	; 69
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	88 60       	ori	r24, 0x08	; 8
     fbe:	8c 93       	st	X, r24
     fc0:	23 c0       	rjmp	.+70     	; 0x1008 <TIM2_voidChangeMode+0x9a>
	}

	else if (u8Mode == TIM2_FAST_PWM_MODE)
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	83 30       	cpi	r24, 0x03	; 3
     fc6:	79 f4       	brne	.+30     	; 0xfe6 <TIM2_voidChangeMode+0x78>
	{
		SET_BIT(TCCR2,6);
     fc8:	a5 e4       	ldi	r26, 0x45	; 69
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e5 e4       	ldi	r30, 0x45	; 69
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 64       	ori	r24, 0x40	; 64
     fd4:	8c 93       	st	X, r24
		SET_BIT(TCCR2,3);
     fd6:	a5 e4       	ldi	r26, 0x45	; 69
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e5 e4       	ldi	r30, 0x45	; 69
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	88 60       	ori	r24, 0x08	; 8
     fe2:	8c 93       	st	X, r24
     fe4:	11 c0       	rjmp	.+34     	; 0x1008 <TIM2_voidChangeMode+0x9a>
	}

	else if (u8Mode == TIM2_PHASE_PWM_MODE)
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	84 30       	cpi	r24, 0x04	; 4
     fea:	71 f4       	brne	.+28     	; 0x1008 <TIM2_voidChangeMode+0x9a>
	{
		SET_BIT(TCCR2,6);
     fec:	a5 e4       	ldi	r26, 0x45	; 69
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e5 e4       	ldi	r30, 0x45	; 69
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	80 64       	ori	r24, 0x40	; 64
     ff8:	8c 93       	st	X, r24
		CLR_BIT(TCCR2,3);
     ffa:	a5 e4       	ldi	r26, 0x45	; 69
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e5 e4       	ldi	r30, 0x45	; 69
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	87 7f       	andi	r24, 0xF7	; 247
    1006:	8c 93       	st	X, r24
	}
	else
	{
		/* Nothing */
	}
}
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <__vector_5>:

/* Overflow ISR */

void __vector_5 (void)  __attribute__ ((signal,used));
void __vector_5 (void)
{
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
	TIM2_pfOVFCallBack();
    103a:	e0 91 56 01 	lds	r30, 0x0156
    103e:	f0 91 57 01 	lds	r31, 0x0157
    1042:	09 95       	icall
}
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	bf 91       	pop	r27
    104e:	af 91       	pop	r26
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	7f 91       	pop	r23
    1056:	6f 91       	pop	r22
    1058:	5f 91       	pop	r21
    105a:	4f 91       	pop	r20
    105c:	3f 91       	pop	r19
    105e:	2f 91       	pop	r18
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0
    1066:	1f 90       	pop	r1
    1068:	18 95       	reti

0000106a <__vector_4>:

/* Compare ISR */

void __vector_4 (void)  __attribute__((signal,used));
void __vector_4(void)
{
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
    1074:	2f 93       	push	r18
    1076:	3f 93       	push	r19
    1078:	4f 93       	push	r20
    107a:	5f 93       	push	r21
    107c:	6f 93       	push	r22
    107e:	7f 93       	push	r23
    1080:	8f 93       	push	r24
    1082:	9f 93       	push	r25
    1084:	af 93       	push	r26
    1086:	bf 93       	push	r27
    1088:	ef 93       	push	r30
    108a:	ff 93       	push	r31
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
	TIM2_pfCompareCallBack();
    1094:	e0 91 54 01 	lds	r30, 0x0154
    1098:	f0 91 55 01 	lds	r31, 0x0155
    109c:	09 95       	icall
}
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	ff 91       	pop	r31
    10a4:	ef 91       	pop	r30
    10a6:	bf 91       	pop	r27
    10a8:	af 91       	pop	r26
    10aa:	9f 91       	pop	r25
    10ac:	8f 91       	pop	r24
    10ae:	7f 91       	pop	r23
    10b0:	6f 91       	pop	r22
    10b2:	5f 91       	pop	r21
    10b4:	4f 91       	pop	r20
    10b6:	3f 91       	pop	r19
    10b8:	2f 91       	pop	r18
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	0f 90       	pop	r0
    10c0:	1f 90       	pop	r1
    10c2:	18 95       	reti

000010c4 <TIM1_voidInit>:
pf  TIM1_pfCmpBCallBack;
pf  TIM1_pfIcuCallBack;


void TIM1_voidInit(void)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
	/*select timer mode  */
#if  TIM1_MODE ==  TIM1_NORMAL 
	CLR_BIT(TCCR1A , 0);
    10cc:	af e4       	ldi	r26, 0x4F	; 79
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	ef e4       	ldi	r30, 0x4F	; 79
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	8e 7f       	andi	r24, 0xFE	; 254
    10d8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , 1);
    10da:	af e4       	ldi	r26, 0x4F	; 79
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	ef e4       	ldi	r30, 0x4F	; 79
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8d 7f       	andi	r24, 0xFD	; 253
    10e6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , 3);
    10e8:	ae e4       	ldi	r26, 0x4E	; 78
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	ee e4       	ldi	r30, 0x4E	; 78
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	87 7f       	andi	r24, 0xF7	; 247
    10f4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , 4);
    10f6:	ae e4       	ldi	r26, 0x4E	; 78
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	ee e4       	ldi	r30, 0x4E	; 78
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8f 7e       	andi	r24, 0xEF	; 239
    1102:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_SET_OC1A 
    SET_BIT(TCCR1A , 6);
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_F_NON_INVERT_OC1A 
    CLR_BIT(TCCR1A , 6);
    1104:	af e4       	ldi	r26, 0x4F	; 79
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	ef e4       	ldi	r30, 0x4F	; 79
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	8f 7b       	andi	r24, 0xBF	; 191
    1110:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
    1112:	af e4       	ldi	r26, 0x4F	; 79
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	ef e4       	ldi	r30, 0x4F	; 79
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	80 68       	ori	r24, 0x80	; 128
    111e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_SET_OC1B 
    SET_BIT(TCCR1A , 4);
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_F_NON_INVERT_OC1B 
    CLR_BIT(TCCR1A , 4);
    1120:	af e4       	ldi	r26, 0x4F	; 79
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	ef e4       	ldi	r30, 0x4F	; 79
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8f 7e       	andi	r24, 0xEF	; 239
    112c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
    112e:	af e4       	ldi	r26, 0x4F	; 79
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	ef e4       	ldi	r30, 0x4F	; 79
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	80 62       	ori	r24, 0x20	; 32
    113a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , 4);
	CLR_BIT(TCCR1A , 5);

#endif
  /*Disable timer*/
  TCCR1B &= 0b11111000;
    113c:	ae e4       	ldi	r26, 0x4E	; 78
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	ee e4       	ldi	r30, 0x4E	; 78
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	88 7f       	andi	r24, 0xF8	; 248
    1148:	8c 93       	st	X, r24
  /*Disable Int OVF-CMPA,B ICU*/
  CLR_BIT(TIMSK , 2 );
    114a:	a9 e5       	ldi	r26, 0x59	; 89
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e9 e5       	ldi	r30, 0x59	; 89
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	8b 7f       	andi	r24, 0xFB	; 251
    1156:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 3);
    1158:	a9 e5       	ldi	r26, 0x59	; 89
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e9 e5       	ldi	r30, 0x59	; 89
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	87 7f       	andi	r24, 0xF7	; 247
    1164:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 4 );
    1166:	a9 e5       	ldi	r26, 0x59	; 89
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e9 e5       	ldi	r30, 0x59	; 89
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	8f 7e       	andi	r24, 0xEF	; 239
    1172:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 5);
    1174:	a9 e5       	ldi	r26, 0x59	; 89
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e9 e5       	ldi	r30, 0x59	; 89
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	8f 7d       	andi	r24, 0xDF	; 223
    1180:	8c 93       	st	X, r24
  /*Clear Int OVF-CMP flags*/
  SET_BIT(TIFR , 2 );
    1182:	a8 e5       	ldi	r26, 0x58	; 88
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e8 e5       	ldi	r30, 0x58	; 88
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	84 60       	ori	r24, 0x04	; 4
    118e:	8c 93       	st	X, r24
  SET_BIT(TIFR , 3 );
    1190:	a8 e5       	ldi	r26, 0x58	; 88
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e8 e5       	ldi	r30, 0x58	; 88
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	88 60       	ori	r24, 0x08	; 8
    119c:	8c 93       	st	X, r24
  SET_BIT(TIFR , 4 );
    119e:	a8 e5       	ldi	r26, 0x58	; 88
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e8 e5       	ldi	r30, 0x58	; 88
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	80 61       	ori	r24, 0x10	; 16
    11aa:	8c 93       	st	X, r24
  SET_BIT(TIFR , 5 );
    11ac:	a8 e5       	ldi	r26, 0x58	; 88
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e8 e5       	ldi	r30, 0x58	; 88
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	80 62       	ori	r24, 0x20	; 32
    11b8:	8c 93       	st	X, r24
  
  /*Clear TCNT,OCE1A,B,ICR*/
  OCR1AL = 0 ;
    11ba:	ea e4       	ldi	r30, 0x4A	; 74
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	10 82       	st	Z, r1
  OCR1AH = 0 ;
    11c0:	eb e4       	ldi	r30, 0x4B	; 75
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	10 82       	st	Z, r1
  OCR1BL = 0 ;
    11c6:	e8 e4       	ldi	r30, 0x48	; 72
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	10 82       	st	Z, r1
  OCR1BH = 0 ;
    11cc:	e9 e4       	ldi	r30, 0x49	; 73
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	10 82       	st	Z, r1
  TCNT1L = 0 ;
    11d2:	ec e4       	ldi	r30, 0x4C	; 76
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	10 82       	st	Z, r1
  TCNT1H = 0 ;
    11d8:	ed e4       	ldi	r30, 0x4D	; 77
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	10 82       	st	Z, r1
  ICR1L  = 0 ;
    11de:	e6 e4       	ldi	r30, 0x46	; 70
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	10 82       	st	Z, r1
  ICR1H  = 0 ;
    11e4:	e7 e4       	ldi	r30, 0x47	; 71
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	10 82       	st	Z, r1
  
}
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <TIM1_voidEnable>:
void TIM1_voidEnable(uint8 u8PrescalValCpy)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	0f 92       	push	r0
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &= 0b11111000;
    11fc:	ae e4       	ldi	r26, 0x4E	; 78
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	ee e4       	ldi	r30, 0x4E	; 78
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	88 7f       	andi	r24, 0xF8	; 248
    1208:	8c 93       	st	X, r24
	TCCR1B |= u8PrescalValCpy & 0x07 ;// 0b00000111
    120a:	ae e4       	ldi	r26, 0x4E	; 78
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ee e4       	ldi	r30, 0x4E	; 78
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	98 2f       	mov	r25, r24
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	87 70       	andi	r24, 0x07	; 7
    121a:	89 2b       	or	r24, r25
    121c:	8c 93       	st	X, r24
	
}
    121e:	0f 90       	pop	r0
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <TIM1_voidDisable>:
void TIM1_voidDisable(void)
{
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
    122e:	ae e4       	ldi	r26, 0x4E	; 78
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	ee e4       	ldi	r30, 0x4E	; 78
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	88 7f       	andi	r24, 0xF8	; 248
    123a:	8c 93       	st	X, r24
	
}
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <TIM1_voidEnableOvfInt>:
void TIM1_voidEnableOvfInt(void)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 2 );
    124a:	a9 e5       	ldi	r26, 0x59	; 89
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e9 e5       	ldi	r30, 0x59	; 89
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	84 60       	ori	r24, 0x04	; 4
    1256:	8c 93       	st	X, r24
	
}
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <TIM1_voidDisableOvfInt>:
void TIM1_voidDisableOvfInt(void)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 2 );
    1266:	a9 e5       	ldi	r26, 0x59	; 89
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e9 e5       	ldi	r30, 0x59	; 89
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	8b 7f       	andi	r24, 0xFB	; 251
    1272:	8c 93       	st	X, r24
	
}
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <TIM1_voidEnableCmpAInt>:
void TIM1_voidEnableCmpAInt(void)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 4 );
    1282:	a9 e5       	ldi	r26, 0x59	; 89
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e9 e5       	ldi	r30, 0x59	; 89
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	80 61       	ori	r24, 0x10	; 16
    128e:	8c 93       	st	X, r24
	
}
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <TIM1_voidDisableCmpAInt>:
void TIM1_voidDisableCmpAInt(void)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 4 );
    129e:	a9 e5       	ldi	r26, 0x59	; 89
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e9 e5       	ldi	r30, 0x59	; 89
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	8f 7e       	andi	r24, 0xEF	; 239
    12aa:	8c 93       	st	X, r24
	
}
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <TIM1_voidEnableCmpBInt>:
void TIM1_voidEnableCmpBInt(void)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 3 );
    12ba:	a9 e5       	ldi	r26, 0x59	; 89
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e9 e5       	ldi	r30, 0x59	; 89
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	88 60       	ori	r24, 0x08	; 8
    12c6:	8c 93       	st	X, r24
	
}
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <TIM1_voidDisableCmpBInt>:
void TIM1_voidDisableCmpBInt(void)
{
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 3);
    12d6:	a9 e5       	ldi	r26, 0x59	; 89
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e9 e5       	ldi	r30, 0x59	; 89
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	87 7f       	andi	r24, 0xF7	; 247
    12e2:	8c 93       	st	X, r24
	
}
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <TIM1_voidEnableIcuInt>:
void TIM1_voidEnableIcuInt(void)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 5 );
    12f2:	a9 e5       	ldi	r26, 0x59	; 89
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e9 e5       	ldi	r30, 0x59	; 89
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	80 62       	ori	r24, 0x20	; 32
    12fe:	8c 93       	st	X, r24
}
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <TIM1_voidDisableIcuInt>:
void TIM1_voidDisableIcuInt(void)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 5);
    130e:	a9 e5       	ldi	r26, 0x59	; 89
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e9 e5       	ldi	r30, 0x59	; 89
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8f 7d       	andi	r24, 0xDF	; 223
    131a:	8c 93       	st	X, r24
}
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <TIM1_voidSetCallbackOvfInt>:

void TIM1_voidSetCallbackOvfInt(pf pfOvfCalbckCpy)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	00 d0       	rcall	.+0      	; 0x1328 <TIM1_voidSetCallbackOvfInt+0x6>
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	9a 83       	std	Y+2, r25	; 0x02
    132e:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfOvfCallBack = pfOvfCalbckCpy;
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	90 93 5d 01 	sts	0x015D, r25
    1338:	80 93 5c 01 	sts	0x015C, r24
}
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <TIM1_voidSetCallbackCompAInt>:
void TIM1_voidSetCallbackCompAInt(pf pfCompACalbckCpy)
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <TIM1_voidSetCallbackCompAInt+0x6>
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	9a 83       	std	Y+2, r25	; 0x02
    1352:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpACallBack = pfCompACalbckCpy;
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	9a 81       	ldd	r25, Y+2	; 0x02
    1358:	90 93 5f 01 	sts	0x015F, r25
    135c:	80 93 5e 01 	sts	0x015E, r24
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <TIM1_voidSetCallbackCompBInt>:
void TIM1_voidSetCallbackCompBInt(pf pfCompBCalbckCpy)
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	00 d0       	rcall	.+0      	; 0x1370 <TIM1_voidSetCallbackCompBInt+0x6>
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	9a 83       	std	Y+2, r25	; 0x02
    1376:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpBCallBack = pfCompBCalbckCpy;
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	9a 81       	ldd	r25, Y+2	; 0x02
    137c:	90 93 59 01 	sts	0x0159, r25
    1380:	80 93 58 01 	sts	0x0158, r24
}
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <TIM1_voidSetCallbackIcuInt>:
void TIM1_voidSetCallbackIcuInt(pf pfIcuCalbckCpy)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	00 d0       	rcall	.+0      	; 0x1394 <TIM1_voidSetCallbackIcuInt+0x6>
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfIcuCallBack = pfIcuCalbckCpy;
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	9a 81       	ldd	r25, Y+2	; 0x02
    13a0:	90 93 5b 01 	sts	0x015B, r25
    13a4:	80 93 5a 01 	sts	0x015A, r24
}
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <TIM1_voidSetTimerValue>:
void TIM1_voidSetTimerValue(uint16 u16TimValCpy)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <TIM1_voidSetTimerValue+0x6>
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L =(uint8) u16TimValCpy;
    13c0:	ec e4       	ldi	r30, 0x4C	; 76
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	80 83       	st	Z, r24
	TCNT1H =(uint8) (u16TimValCpy>>8);
    13c8:	ed e4       	ldi	r30, 0x4D	; 77
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	9a 81       	ldd	r25, Y+2	; 0x02
    13d0:	89 2f       	mov	r24, r25
    13d2:	99 27       	eor	r25, r25
    13d4:	80 83       	st	Z, r24
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <TIM1_voidSetCmpARegValue>:
void TIM1_voidSetCmpARegValue(uint16 u16CmpAValCpy)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <TIM1_voidSetCmpARegValue+0x6>
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL= (uint8)u16CmpAValCpy;
    13ee:	ea e4       	ldi	r30, 0x4A	; 74
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	80 83       	st	Z, r24
	OCR1AH= (uint8)(u16CmpAValCpy>>8);
    13f6:	eb e4       	ldi	r30, 0x4B	; 75
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	9a 81       	ldd	r25, Y+2	; 0x02
    13fe:	89 2f       	mov	r24, r25
    1400:	99 27       	eor	r25, r25
    1402:	80 83       	st	Z, r24
	
}
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <TIM1_voidSetCmpBRegValue>:
void TIM1_voidSetCmpBRegValue(uint16 u16CmpBValCpy)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	00 d0       	rcall	.+0      	; 0x1414 <TIM1_voidSetCmpBRegValue+0x6>
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	9a 83       	std	Y+2, r25	; 0x02
    141a:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL= (uint8)u16CmpBValCpy;
    141c:	e8 e4       	ldi	r30, 0x48	; 72
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	80 83       	st	Z, r24
	OCR1BH= (uint8)(u16CmpBValCpy>>8);
    1424:	e9 e4       	ldi	r30, 0x49	; 73
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	9a 81       	ldd	r25, Y+2	; 0x02
    142c:	89 2f       	mov	r24, r25
    142e:	99 27       	eor	r25, r25
    1430:	80 83       	st	Z, r24
	
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <TIM1_voidSetIcuRegValue>:
void TIM1_voidSetIcuRegValue(uint16 u16IcuValCpy)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <TIM1_voidSetIcuRegValue+0x6>
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	9a 83       	std	Y+2, r25	; 0x02
    1448:	89 83       	std	Y+1, r24	; 0x01
	ICR1=u16IcuValCpy;
    144a:	e6 e4       	ldi	r30, 0x46	; 70
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24

}
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <TIM1_u8ReadTimerValue>:
uint16 TIM1_u8ReadTimerValue(void)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <TIM1_u8ReadTimerValue+0x6>
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
	uint16 u16TcntValueLoc;
	u16TcntValueLoc   = TCNT1H;
    146a:	ed e4       	ldi	r30, 0x4D	; 77
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9a 83       	std	Y+2, r25	; 0x02
    1476:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc   = (u16TcntValueLoc<<8);
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	98 2f       	mov	r25, r24
    147e:	88 27       	eor	r24, r24
    1480:	9a 83       	std	Y+2, r25	; 0x02
    1482:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc |= TCNT1L;
    1484:	ec e4       	ldi	r30, 0x4C	; 76
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	9a 81       	ldd	r25, Y+2	; 0x02
    1492:	82 2b       	or	r24, r18
    1494:	93 2b       	or	r25, r19
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	89 83       	std	Y+1, r24	; 0x01
	return u16TcntValueLoc;
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <__vector_9>:
/* ISR for overflow*/
void __vector_9(void) __attribute__ ((signal,used));
void __vector_9 (void)
{
    14a8:	1f 92       	push	r1
    14aa:	0f 92       	push	r0
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	0f 92       	push	r0
    14b0:	11 24       	eor	r1, r1
    14b2:	2f 93       	push	r18
    14b4:	3f 93       	push	r19
    14b6:	4f 93       	push	r20
    14b8:	5f 93       	push	r21
    14ba:	6f 93       	push	r22
    14bc:	7f 93       	push	r23
    14be:	8f 93       	push	r24
    14c0:	9f 93       	push	r25
    14c2:	af 93       	push	r26
    14c4:	bf 93       	push	r27
    14c6:	ef 93       	push	r30
    14c8:	ff 93       	push	r31
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfOvfCallBack();
    14d2:	e0 91 5c 01 	lds	r30, 0x015C
    14d6:	f0 91 5d 01 	lds	r31, 0x015D
    14da:	09 95       	icall
	
}
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	ff 91       	pop	r31
    14e2:	ef 91       	pop	r30
    14e4:	bf 91       	pop	r27
    14e6:	af 91       	pop	r26
    14e8:	9f 91       	pop	r25
    14ea:	8f 91       	pop	r24
    14ec:	7f 91       	pop	r23
    14ee:	6f 91       	pop	r22
    14f0:	5f 91       	pop	r21
    14f2:	4f 91       	pop	r20
    14f4:	3f 91       	pop	r19
    14f6:	2f 91       	pop	r18
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	0f 90       	pop	r0
    14fe:	1f 90       	pop	r1
    1500:	18 95       	reti

00001502 <__vector_7>:
/* ISR for compaA*/

void __vector_7 (void) __attribute__ ((signal,used));
void __vector_7 (void)
{
    1502:	1f 92       	push	r1
    1504:	0f 92       	push	r0
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	0f 92       	push	r0
    150a:	11 24       	eor	r1, r1
    150c:	2f 93       	push	r18
    150e:	3f 93       	push	r19
    1510:	4f 93       	push	r20
    1512:	5f 93       	push	r21
    1514:	6f 93       	push	r22
    1516:	7f 93       	push	r23
    1518:	8f 93       	push	r24
    151a:	9f 93       	push	r25
    151c:	af 93       	push	r26
    151e:	bf 93       	push	r27
    1520:	ef 93       	push	r30
    1522:	ff 93       	push	r31
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpACallBack();
    152c:	e0 91 5e 01 	lds	r30, 0x015E
    1530:	f0 91 5f 01 	lds	r31, 0x015F
    1534:	09 95       	icall
}
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	ff 91       	pop	r31
    153c:	ef 91       	pop	r30
    153e:	bf 91       	pop	r27
    1540:	af 91       	pop	r26
    1542:	9f 91       	pop	r25
    1544:	8f 91       	pop	r24
    1546:	7f 91       	pop	r23
    1548:	6f 91       	pop	r22
    154a:	5f 91       	pop	r21
    154c:	4f 91       	pop	r20
    154e:	3f 91       	pop	r19
    1550:	2f 91       	pop	r18
    1552:	0f 90       	pop	r0
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	0f 90       	pop	r0
    1558:	1f 90       	pop	r1
    155a:	18 95       	reti

0000155c <__vector_8>:
/* ISR for compaB*/

void __vector_8 (void) __attribute__ ((signal,used));
void __vector_8 (void)
{
    155c:	1f 92       	push	r1
    155e:	0f 92       	push	r0
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	0f 92       	push	r0
    1564:	11 24       	eor	r1, r1
    1566:	2f 93       	push	r18
    1568:	3f 93       	push	r19
    156a:	4f 93       	push	r20
    156c:	5f 93       	push	r21
    156e:	6f 93       	push	r22
    1570:	7f 93       	push	r23
    1572:	8f 93       	push	r24
    1574:	9f 93       	push	r25
    1576:	af 93       	push	r26
    1578:	bf 93       	push	r27
    157a:	ef 93       	push	r30
    157c:	ff 93       	push	r31
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpBCallBack();
    1586:	e0 91 58 01 	lds	r30, 0x0158
    158a:	f0 91 59 01 	lds	r31, 0x0159
    158e:	09 95       	icall
}
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	ff 91       	pop	r31
    1596:	ef 91       	pop	r30
    1598:	bf 91       	pop	r27
    159a:	af 91       	pop	r26
    159c:	9f 91       	pop	r25
    159e:	8f 91       	pop	r24
    15a0:	7f 91       	pop	r23
    15a2:	6f 91       	pop	r22
    15a4:	5f 91       	pop	r21
    15a6:	4f 91       	pop	r20
    15a8:	3f 91       	pop	r19
    15aa:	2f 91       	pop	r18
    15ac:	0f 90       	pop	r0
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	0f 90       	pop	r0
    15b2:	1f 90       	pop	r1
    15b4:	18 95       	reti

000015b6 <__vector_6>:
/* ISR for ICU*/

void __vector_6 (void) __attribute__ ((signal,used));
void __vector_6 (void)
{
    15b6:	1f 92       	push	r1
    15b8:	0f 92       	push	r0
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	0f 92       	push	r0
    15be:	11 24       	eor	r1, r1
    15c0:	2f 93       	push	r18
    15c2:	3f 93       	push	r19
    15c4:	4f 93       	push	r20
    15c6:	5f 93       	push	r21
    15c8:	6f 93       	push	r22
    15ca:	7f 93       	push	r23
    15cc:	8f 93       	push	r24
    15ce:	9f 93       	push	r25
    15d0:	af 93       	push	r26
    15d2:	bf 93       	push	r27
    15d4:	ef 93       	push	r30
    15d6:	ff 93       	push	r31
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfIcuCallBack();
    15e0:	e0 91 5a 01 	lds	r30, 0x015A
    15e4:	f0 91 5b 01 	lds	r31, 0x015B
    15e8:	09 95       	icall
}
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	ff 91       	pop	r31
    15f0:	ef 91       	pop	r30
    15f2:	bf 91       	pop	r27
    15f4:	af 91       	pop	r26
    15f6:	9f 91       	pop	r25
    15f8:	8f 91       	pop	r24
    15fa:	7f 91       	pop	r23
    15fc:	6f 91       	pop	r22
    15fe:	5f 91       	pop	r21
    1600:	4f 91       	pop	r20
    1602:	3f 91       	pop	r19
    1604:	2f 91       	pop	r18
    1606:	0f 90       	pop	r0
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	0f 90       	pop	r0
    160c:	1f 90       	pop	r1
    160e:	18 95       	reti

00001610 <TIM1_u16GetIcuValue>:

/*ICU*/


uint16 TIM1_u16GetIcuValue(void)
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1618:	e6 e4       	ldi	r30, 0x46	; 70
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <ICU_voidRisingEdge>:
void ICU_voidRisingEdge(void)
 {
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B , 6);
    162e:	ae e4       	ldi	r26, 0x4E	; 78
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ee e4       	ldi	r30, 0x4E	; 78
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	80 64       	ori	r24, 0x40	; 64
    163a:	8c 93       	st	X, r24
 }
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <ICU_voidFallenEdge>:
 
 void ICU_voidFallenEdge(void)
 {
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B , 6);
    164a:	ae e4       	ldi	r26, 0x4E	; 78
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	ee e4       	ldi	r30, 0x4E	; 78
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	8f 7b       	andi	r24, 0xBF	; 191
    1656:	8c 93       	st	X, r24
 }
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <TIM0_voidInit>:

pf TIM0_pfOVFCallBack;
pf TIM0_pfCompareCallBack;

void TIM0_voidInit(void)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
	/* Select timer mode */
#if TIM0_MODE == TIM0_NORMAL
	CLR_BIT(TCCR0,6);
    1666:	a3 e5       	ldi	r26, 0x53	; 83
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e3 e5       	ldi	r30, 0x53	; 83
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	8f 7b       	andi	r24, 0xBF	; 191
    1672:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
    1674:	a3 e5       	ldi	r26, 0x53	; 83
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e3 e5       	ldi	r30, 0x53	; 83
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	87 7f       	andi	r24, 0xF7	; 247
    1680:	8c 93       	st	X, r24
#elif TIM0_WAVE == TIM0_SET_OC0
	SET_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);

#elif TIM0_WAVE == TIM0_CLR_OC0
	CLR_BIT(TCCR0,4);
    1682:	a3 e5       	ldi	r26, 0x53	; 83
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e3 e5       	ldi	r30, 0x53	; 83
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	8f 7e       	andi	r24, 0xEF	; 239
    168e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    1690:	a3 e5       	ldi	r26, 0x53	; 83
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e3 e5       	ldi	r30, 0x53	; 83
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	80 62       	ori	r24, 0x20	; 32
    169c:	8c 93       	st	X, r24
#else
	CLR_BIT(TCCR0,4);
	CLR_BIT(TCCR0,5);

#endif
}
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <TIM0_voidEnable>:
void TIM0_voidEnable(uint8 u8PreScaler)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	0f 92       	push	r0
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &=0b11111000;
    16b0:	a3 e5       	ldi	r26, 0x53	; 83
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e3 e5       	ldi	r30, 0x53	; 83
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	88 7f       	andi	r24, 0xF8	; 248
    16bc:	8c 93       	st	X, r24
	TCCR0 |= (u8PreScaler & 0b00000111); //& 0b00000111 --> to prevent last 5 bits of TCCR0 Reg
    16be:	a3 e5       	ldi	r26, 0x53	; 83
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e3 e5       	ldi	r30, 0x53	; 83
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	98 2f       	mov	r25, r24
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	87 70       	andi	r24, 0x07	; 7
    16ce:	89 2b       	or	r24, r25
    16d0:	8c 93       	st	X, r24
}
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <TIM0_voidDisable>:
void TIM0_voidDisable(void)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &=0b11111000;
    16e2:	a3 e5       	ldi	r26, 0x53	; 83
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e3 e5       	ldi	r30, 0x53	; 83
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	88 7f       	andi	r24, 0xF8	; 248
    16ee:	8c 93       	st	X, r24
}
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <TIM0_voidEnableOvfInt>:
void TIM0_voidEnableOvfInt(void)
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
    16fe:	a9 e5       	ldi	r26, 0x59	; 89
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e9 e5       	ldi	r30, 0x59	; 89
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	81 60       	ori	r24, 0x01	; 1
    170a:	8c 93       	st	X, r24
}
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <TIM0_voidDisableOvfInt>:
void TIM0_voidDisableOvfInt(void)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
    171a:	a9 e5       	ldi	r26, 0x59	; 89
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e9 e5       	ldi	r30, 0x59	; 89
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	8e 7f       	andi	r24, 0xFE	; 254
    1726:	8c 93       	st	X, r24
}
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <TIM0_voidEnableCompareInt>:
void TIM0_voidEnableCompareInt(void)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
    1736:	a9 e5       	ldi	r26, 0x59	; 89
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e9 e5       	ldi	r30, 0x59	; 89
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	82 60       	ori	r24, 0x02	; 2
    1742:	8c 93       	st	X, r24
}
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <TIM0_voidDisableCompareInt>:
void TIM0_voidDisableCompareInt(void)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
    1752:	a9 e5       	ldi	r26, 0x59	; 89
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e9 e5       	ldi	r30, 0x59	; 89
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	8d 7f       	andi	r24, 0xFD	; 253
    175e:	8c 93       	st	X, r24
}
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <TIM0_voidSetCallBackOvfInt>:
void TIM0_voidSetCallBackOvfInt(pf pfOvfCallBack)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <TIM0_voidSetCallBackOvfInt+0x6>
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	9a 83       	std	Y+2, r25	; 0x02
    1772:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfOVFCallBack = pfOvfCallBack;
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	9a 81       	ldd	r25, Y+2	; 0x02
    1778:	90 93 61 01 	sts	0x0161, r25
    177c:	80 93 60 01 	sts	0x0160, r24
}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <TIM0_voidSetCallBackCompareInt>:
void TIM0_voidSetCallBackCompareInt(pf pfCompareCallBack)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <TIM0_voidSetCallBackCompareInt+0x6>
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfCompareCallBack = pfCompareCallBack;
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	90 93 63 01 	sts	0x0163, r25
    17a0:	80 93 62 01 	sts	0x0162, r24
}
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <TIM0_voidSetTCNTValue>:
void TIM0_voidSetTCNTValue(uint8 u8TcntReg)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	0f 92       	push	r0
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8TcntReg;
    17ba:	e2 e5       	ldi	r30, 0x52	; 82
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	80 83       	st	Z, r24
}
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <TIM0_voidSetOCRValue>:
void TIM0_voidSetOCRValue(uint8 u8OcrReg)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	0f 92       	push	r0
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8OcrReg;
    17d6:	ec e5       	ldi	r30, 0x5C	; 92
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	80 83       	st	Z, r24
}
    17de:	0f 90       	pop	r0
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <Tim0_u8ReadTcntReg>:
uint8 Tim0_u8ReadTcntReg(void)
{
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    17ee:	e2 e5       	ldi	r30, 0x52	; 82
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
}
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <Tim0_u8ReadOcrReg>:

uint8 Tim0_u8ReadOcrReg(void)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
	return OCR0;
    1802:	ec e5       	ldi	r30, 0x5C	; 92
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
}
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <TIM0_voidChangeMode>:

void TIM0_voidChangeMode(uint8 u8Mode)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	0f 92       	push	r0
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	89 83       	std	Y+1, r24	; 0x01
	if (u8Mode == TIM0_NORMAL_MODE)
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	79 f4       	brne	.+30     	; 0x183e <TIM0_voidChangeMode+0x30>
	{CLR_BIT(TCCR0,6);
    1820:	a3 e5       	ldi	r26, 0x53	; 83
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e3 e5       	ldi	r30, 0x53	; 83
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	8f 7b       	andi	r24, 0xBF	; 191
    182c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);}
    182e:	a3 e5       	ldi	r26, 0x53	; 83
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e3 e5       	ldi	r30, 0x53	; 83
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	87 7f       	andi	r24, 0xF7	; 247
    183a:	8c 93       	st	X, r24
    183c:	35 c0       	rjmp	.+106    	; 0x18a8 <TIM0_voidChangeMode+0x9a>

	else if (u8Mode == TIM0_CTC_MODE)
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	82 30       	cpi	r24, 0x02	; 2
    1842:	79 f4       	brne	.+30     	; 0x1862 <TIM0_voidChangeMode+0x54>
	{CLR_BIT(TCCR0,6);
    1844:	a3 e5       	ldi	r26, 0x53	; 83
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e3 e5       	ldi	r30, 0x53	; 83
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	8f 7b       	andi	r24, 0xBF	; 191
    1850:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);}
    1852:	a3 e5       	ldi	r26, 0x53	; 83
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e3 e5       	ldi	r30, 0x53	; 83
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	88 60       	ori	r24, 0x08	; 8
    185e:	8c 93       	st	X, r24
    1860:	23 c0       	rjmp	.+70     	; 0x18a8 <TIM0_voidChangeMode+0x9a>

	else if (u8Mode == TIM0_FAST_PWM_MODE)
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	79 f4       	brne	.+30     	; 0x1886 <TIM0_voidChangeMode+0x78>
	{SET_BIT(TCCR0,6);
    1868:	a3 e5       	ldi	r26, 0x53	; 83
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e3 e5       	ldi	r30, 0x53	; 83
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	80 64       	ori	r24, 0x40	; 64
    1874:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);}
    1876:	a3 e5       	ldi	r26, 0x53	; 83
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e3 e5       	ldi	r30, 0x53	; 83
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	88 60       	ori	r24, 0x08	; 8
    1882:	8c 93       	st	X, r24
    1884:	11 c0       	rjmp	.+34     	; 0x18a8 <TIM0_voidChangeMode+0x9a>

	else if (u8Mode == TIM0_PHASE_PWM_MODE)
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	84 30       	cpi	r24, 0x04	; 4
    188a:	71 f4       	brne	.+28     	; 0x18a8 <TIM0_voidChangeMode+0x9a>
	{SET_BIT(TCCR0,6);
    188c:	a3 e5       	ldi	r26, 0x53	; 83
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e3 e5       	ldi	r30, 0x53	; 83
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	80 64       	ori	r24, 0x40	; 64
    1898:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);}
    189a:	a3 e5       	ldi	r26, 0x53	; 83
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e3 e5       	ldi	r30, 0x53	; 83
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	87 7f       	andi	r24, 0xF7	; 247
    18a6:	8c 93       	st	X, r24
	else
	{
		/* Nothing */
	}
}
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <__vector_11>:

/* Overflow ISR */

void __vector_11 (void)  __attribute__ ((signal,used));
void __vector_11 (void)
{
    18b0:	1f 92       	push	r1
    18b2:	0f 92       	push	r0
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	0f 92       	push	r0
    18b8:	11 24       	eor	r1, r1
    18ba:	2f 93       	push	r18
    18bc:	3f 93       	push	r19
    18be:	4f 93       	push	r20
    18c0:	5f 93       	push	r21
    18c2:	6f 93       	push	r22
    18c4:	7f 93       	push	r23
    18c6:	8f 93       	push	r24
    18c8:	9f 93       	push	r25
    18ca:	af 93       	push	r26
    18cc:	bf 93       	push	r27
    18ce:	ef 93       	push	r30
    18d0:	ff 93       	push	r31
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
	TIM0_pfOVFCallBack();
    18da:	e0 91 60 01 	lds	r30, 0x0160
    18de:	f0 91 61 01 	lds	r31, 0x0161
    18e2:	09 95       	icall
}
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	ff 91       	pop	r31
    18ea:	ef 91       	pop	r30
    18ec:	bf 91       	pop	r27
    18ee:	af 91       	pop	r26
    18f0:	9f 91       	pop	r25
    18f2:	8f 91       	pop	r24
    18f4:	7f 91       	pop	r23
    18f6:	6f 91       	pop	r22
    18f8:	5f 91       	pop	r21
    18fa:	4f 91       	pop	r20
    18fc:	3f 91       	pop	r19
    18fe:	2f 91       	pop	r18
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	0f 90       	pop	r0
    1906:	1f 90       	pop	r1
    1908:	18 95       	reti

0000190a <__vector_10>:

/* Compare ISR */

void __vector_10 (void)  __attribute__ ((signal,used));
void __vector_10 (void)
{
    190a:	1f 92       	push	r1
    190c:	0f 92       	push	r0
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	0f 92       	push	r0
    1912:	11 24       	eor	r1, r1
    1914:	2f 93       	push	r18
    1916:	3f 93       	push	r19
    1918:	4f 93       	push	r20
    191a:	5f 93       	push	r21
    191c:	6f 93       	push	r22
    191e:	7f 93       	push	r23
    1920:	8f 93       	push	r24
    1922:	9f 93       	push	r25
    1924:	af 93       	push	r26
    1926:	bf 93       	push	r27
    1928:	ef 93       	push	r30
    192a:	ff 93       	push	r31
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
	TIM0_pfCompareCallBack();
    1934:	e0 91 62 01 	lds	r30, 0x0162
    1938:	f0 91 63 01 	lds	r31, 0x0163
    193c:	09 95       	icall
}
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	ff 91       	pop	r31
    1944:	ef 91       	pop	r30
    1946:	bf 91       	pop	r27
    1948:	af 91       	pop	r26
    194a:	9f 91       	pop	r25
    194c:	8f 91       	pop	r24
    194e:	7f 91       	pop	r23
    1950:	6f 91       	pop	r22
    1952:	5f 91       	pop	r21
    1954:	4f 91       	pop	r20
    1956:	3f 91       	pop	r19
    1958:	2f 91       	pop	r18
    195a:	0f 90       	pop	r0
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	0f 90       	pop	r0
    1960:	1f 90       	pop	r1
    1962:	18 95       	reti

00001964 <GIE_voidEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"


void GIE_voidEnable(void)
{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,INTERRUPT_PIN);
    196c:	af e5       	ldi	r26, 0x5F	; 95
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ef e5       	ldi	r30, 0x5F	; 95
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	80 68       	ori	r24, 0x80	; 128
    1978:	8c 93       	st	X, r24
}
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,INTERRUPT_PIN);
    1988:	af e5       	ldi	r26, 0x5F	; 95
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	ef e5       	ldi	r30, 0x5F	; 95
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	8f 77       	andi	r24, 0x7F	; 127
    1994:	8c 93       	st	X, r24
}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <EXTINTO_voidEnable>:
#include "EXTINT0_Config.h"

pf EXTINT0_pfCall;

void EXTINTO_voidEnable(void)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,6);
    19a4:	ab e5       	ldi	r26, 0x5B	; 91
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	eb e5       	ldi	r30, 0x5B	; 91
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	80 64       	ori	r24, 0x40	; 64
    19b0:	8c 93       	st	X, r24
}
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <EXTINTO_voidDisable>:

void EXTINTO_voidDisable(void)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,6);
    19c0:	ab e5       	ldi	r26, 0x5B	; 91
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	eb e5       	ldi	r30, 0x5B	; 91
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	8f 7b       	andi	r24, 0xBF	; 191
    19cc:	8c 93       	st	X, r24
}
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <EXTINT0_voidInit>:

void EXTINT0_voidInit(void)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif EXTINT0_SENSE_MODE == EXTINTO_ON_CHANGE
	SET_BIT(MCUCR,0);
	CLR_BIT(MCUCR,1);
#elif EXTINT0_SENSE_MODE == EXTINTO_FALLING_EDGE
	CLR_BIT(MCUCR,0);
    19dc:	a5 e5       	ldi	r26, 0x55	; 85
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e5 e5       	ldi	r30, 0x55	; 85
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	8e 7f       	andi	r24, 0xFE	; 254
    19e8:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    19ea:	a5 e5       	ldi	r26, 0x55	; 85
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e5 e5       	ldi	r30, 0x55	; 85
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	82 60       	ori	r24, 0x02	; 2
    19f6:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
#else //default as Falling edge
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#endif
}
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <EXTINT0_voidChangeSense>:

void EXTINT0_voidChangeSense(uint8 u8SenseStateCpy)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <EXTINT0_voidChangeSense+0x6>
    1a04:	0f 92       	push	r0
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	89 83       	std	Y+1, r24	; 0x01
	switch(u8SenseStateCpy)
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	3b 83       	std	Y+3, r19	; 0x03
    1a14:	2a 83       	std	Y+2, r18	; 0x02
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	21 f1       	breq	.+72     	; 0x1a68 <EXTINT0_voidChangeSense+0x6a>
    1a20:	2a 81       	ldd	r18, Y+2	; 0x02
    1a22:	3b 81       	ldd	r19, Y+3	; 0x03
    1a24:	22 30       	cpi	r18, 0x02	; 2
    1a26:	31 05       	cpc	r19, r1
    1a28:	2c f4       	brge	.+10     	; 0x1a34 <EXTINT0_voidChangeSense+0x36>
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	61 f0       	breq	.+24     	; 0x1a4a <EXTINT0_voidChangeSense+0x4c>
    1a32:	47 c0       	rjmp	.+142    	; 0x1ac2 <EXTINT0_voidChangeSense+0xc4>
    1a34:	2a 81       	ldd	r18, Y+2	; 0x02
    1a36:	3b 81       	ldd	r19, Y+3	; 0x03
    1a38:	22 30       	cpi	r18, 0x02	; 2
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	21 f1       	breq	.+72     	; 0x1a86 <EXTINT0_voidChangeSense+0x88>
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	9b 81       	ldd	r25, Y+3	; 0x03
    1a42:	83 30       	cpi	r24, 0x03	; 3
    1a44:	91 05       	cpc	r25, r1
    1a46:	71 f1       	breq	.+92     	; 0x1aa4 <EXTINT0_voidChangeSense+0xa6>
    1a48:	3c c0       	rjmp	.+120    	; 0x1ac2 <EXTINT0_voidChangeSense+0xc4>
	{
	case EXTINTO_LOW_LEVEL:
		CLR_BIT(MCUCR,0);
    1a4a:	a5 e5       	ldi	r26, 0x55	; 85
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e5 e5       	ldi	r30, 0x55	; 85
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	8e 7f       	andi	r24, 0xFE	; 254
    1a56:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,1);
    1a58:	a5 e5       	ldi	r26, 0x55	; 85
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e5 e5       	ldi	r30, 0x55	; 85
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	8d 7f       	andi	r24, 0xFD	; 253
    1a64:	8c 93       	st	X, r24
    1a66:	3b c0       	rjmp	.+118    	; 0x1ade <EXTINT0_voidChangeSense+0xe0>
		break;
	case EXTINTO_ON_CHANGE:
		SET_BIT(MCUCR,0);
    1a68:	a5 e5       	ldi	r26, 0x55	; 85
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e5 e5       	ldi	r30, 0x55	; 85
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	81 60       	ori	r24, 0x01	; 1
    1a74:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,1);
    1a76:	a5 e5       	ldi	r26, 0x55	; 85
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e5 e5       	ldi	r30, 0x55	; 85
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	8d 7f       	andi	r24, 0xFD	; 253
    1a82:	8c 93       	st	X, r24
    1a84:	2c c0       	rjmp	.+88     	; 0x1ade <EXTINT0_voidChangeSense+0xe0>
		break;
	case EXTINTO_FALLING_EDGE:
		CLR_BIT(MCUCR,0);
    1a86:	a5 e5       	ldi	r26, 0x55	; 85
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e5 e5       	ldi	r30, 0x55	; 85
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8e 7f       	andi	r24, 0xFE	; 254
    1a92:	8c 93       	st	X, r24
		SET_BIT(MCUCR,1);
    1a94:	a5 e5       	ldi	r26, 0x55	; 85
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e5 e5       	ldi	r30, 0x55	; 85
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	82 60       	ori	r24, 0x02	; 2
    1aa0:	8c 93       	st	X, r24
    1aa2:	1d c0       	rjmp	.+58     	; 0x1ade <EXTINT0_voidChangeSense+0xe0>
		break;
	case EXTINTO_RISING_EDGE:
		SET_BIT(MCUCR,0);
    1aa4:	a5 e5       	ldi	r26, 0x55	; 85
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e5 e5       	ldi	r30, 0x55	; 85
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	81 60       	ori	r24, 0x01	; 1
    1ab0:	8c 93       	st	X, r24
		SET_BIT(MCUCR,1);
    1ab2:	a5 e5       	ldi	r26, 0x55	; 85
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e5 e5       	ldi	r30, 0x55	; 85
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	82 60       	ori	r24, 0x02	; 2
    1abe:	8c 93       	st	X, r24
    1ac0:	0e c0       	rjmp	.+28     	; 0x1ade <EXTINT0_voidChangeSense+0xe0>
		break;
	default:  //default as Falling edge
		CLR_BIT(MCUCR,0);
    1ac2:	a5 e5       	ldi	r26, 0x55	; 85
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e5 e5       	ldi	r30, 0x55	; 85
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8e 7f       	andi	r24, 0xFE	; 254
    1ace:	8c 93       	st	X, r24
		SET_BIT(MCUCR,1);
    1ad0:	a5 e5       	ldi	r26, 0x55	; 85
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e5 e5       	ldi	r30, 0x55	; 85
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	82 60       	ori	r24, 0x02	; 2
    1adc:	8c 93       	st	X, r24
		break;
	}
}
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <EXTINT0_voidSetCallBack>:

void EXTINT0_voidSetCallBack(pf pfCallBack)
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <EXTINT0_voidSetCallBack+0x6>
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	89 83       	std	Y+1, r24	; 0x01
	EXTINT0_pfCall =pfCallBack;
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	9a 81       	ldd	r25, Y+2	; 0x02
    1afc:	90 93 65 01 	sts	0x0165, r25
    1b00:	80 93 64 01 	sts	0x0164, r24
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <__vector_1>:

void __vector_1(void)  __attribute__ ((signal,used)); //for optimize

void __vector_1(void)
{
    1b0e:	1f 92       	push	r1
    1b10:	0f 92       	push	r0
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	0f 92       	push	r0
    1b16:	11 24       	eor	r1, r1
    1b18:	2f 93       	push	r18
    1b1a:	3f 93       	push	r19
    1b1c:	4f 93       	push	r20
    1b1e:	5f 93       	push	r21
    1b20:	6f 93       	push	r22
    1b22:	7f 93       	push	r23
    1b24:	8f 93       	push	r24
    1b26:	9f 93       	push	r25
    1b28:	af 93       	push	r26
    1b2a:	bf 93       	push	r27
    1b2c:	ef 93       	push	r30
    1b2e:	ff 93       	push	r31
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
	EXTINT0_pfCall();
    1b38:	e0 91 64 01 	lds	r30, 0x0164
    1b3c:	f0 91 65 01 	lds	r31, 0x0165
    1b40:	09 95       	icall
}
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	ff 91       	pop	r31
    1b48:	ef 91       	pop	r30
    1b4a:	bf 91       	pop	r27
    1b4c:	af 91       	pop	r26
    1b4e:	9f 91       	pop	r25
    1b50:	8f 91       	pop	r24
    1b52:	7f 91       	pop	r23
    1b54:	6f 91       	pop	r22
    1b56:	5f 91       	pop	r21
    1b58:	4f 91       	pop	r20
    1b5a:	3f 91       	pop	r19
    1b5c:	2f 91       	pop	r18
    1b5e:	0f 90       	pop	r0
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	0f 90       	pop	r0
    1b64:	1f 90       	pop	r1
    1b66:	18 95       	reti

00001b68 <DIO_voidInit>:
#include "../../LIB/BIT_MATH.h"
#include "DIO_Config.h"
#include "DIO_Interface.h"
#include "DIO_Private.h"

DIO_voidInit(){
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
	DDRA=CONC(DIO_PIN_NUM_A7_DIR,DIO_PIN_NUM_A6_DIR,DIO_PIN_NUM_A5_DIR,DIO_PIN_NUM_A4_DIR,DIO_PIN_NUM_A3_DIR,DIO_PIN_NUM_A2_DIR,DIO_PIN_NUM_A1_DIR,DIO_PIN_NUM_A0_DIR);
    1b70:	ea e3       	ldi	r30, 0x3A	; 58
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	8f ef       	ldi	r24, 0xFF	; 255
    1b76:	80 83       	st	Z, r24
	DDRB=CONC(DIO_PIN_NUM_B7_DIR,DIO_PIN_NUM_B6_DIR,DIO_PIN_NUM_B5_DIR,DIO_PIN_NUM_B4_DIR,DIO_PIN_NUM_B3_DIR,DIO_PIN_NUM_B2_DIR,DIO_PIN_NUM_B1_DIR,DIO_PIN_NUM_B0_DIR);
    1b78:	e7 e3       	ldi	r30, 0x37	; 55
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	8f ef       	ldi	r24, 0xFF	; 255
    1b7e:	80 83       	st	Z, r24
	DDRC=CONC(DIO_PIN_NUM_C7_DIR,DIO_PIN_NUM_C6_DIR,DIO_PIN_NUM_C5_DIR,DIO_PIN_NUM_C4_DIR,DIO_PIN_NUM_C3_DIR,DIO_PIN_NUM_C2_DIR,DIO_PIN_NUM_C1_DIR,DIO_PIN_NUM_C0_DIR);
    1b80:	e4 e3       	ldi	r30, 0x34	; 52
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	8f e3       	ldi	r24, 0x3F	; 63
    1b86:	80 83       	st	Z, r24
	DDRD=CONC(DIO_PIN_NUM_D7_DIR,DIO_PIN_NUM_D6_DIR,DIO_PIN_NUM_D5_DIR,DIO_PIN_NUM_D4_DIR,DIO_PIN_NUM_D3_DIR,DIO_PIN_NUM_D2_DIR,DIO_PIN_NUM_D1_DIR,DIO_PIN_NUM_D0_DIR);
    1b88:	e1 e3       	ldi	r30, 0x31	; 49
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 ef       	ldi	r24, 0xF0	; 240
    1b8e:	80 83       	st	Z, r24
}
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <DIO_enuWritePin>:

tenuErrorStatus DIO_enuWritePin(uint8 u8PinNumCpy, uint8 u8PinValueCpy){
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	2b 97       	sbiw	r28, 0x0b	; 11
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	cd bf       	out	0x3d, r28	; 61
    1baa:	8a 83       	std	Y+2, r24	; 0x02
    1bac:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStateLoc =EOK ;
    1bae:	19 82       	std	Y+1, r1	; 0x01


		if (u8PinNumCpy>=DIO_PIN_NUM_A0  && u8PinNumCpy<= DIO_PIN_NUM_A7)
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	88 30       	cpi	r24, 0x08	; 8
    1bb4:	d0 f5       	brcc	.+116    	; 0x1c2a <DIO_enuWritePin+0x94>
		{
			switch(u8PinValueCpy)
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	3b 87       	std	Y+11, r19	; 0x0b
    1bbe:	2a 87       	std	Y+10, r18	; 0x0a
    1bc0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bc2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	c9 f0       	breq	.+50     	; 0x1bfa <DIO_enuWritePin+0x64>
    1bc8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bca:	3b 85       	ldd	r19, Y+11	; 0x0b
    1bcc:	21 30       	cpi	r18, 0x01	; 1
    1bce:	31 05       	cpc	r19, r1
    1bd0:	49 f5       	brne	.+82     	; 0x1c24 <DIO_enuWritePin+0x8e>
			{
				case DIO_HIGH :
				SET_BIT(PORTA ,u8PinNumCpy);
    1bd2:	ab e3       	ldi	r26, 0x3B	; 59
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	eb e3       	ldi	r30, 0x3B	; 59
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	48 2f       	mov	r20, r24
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 2e       	mov	r0, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <DIO_enuWritePin+0x5a>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <DIO_enuWritePin+0x56>
    1bf4:	84 2b       	or	r24, r20
    1bf6:	8c 93       	st	X, r24
    1bf8:	f2 c0       	rjmp	.+484    	; 0x1dde <DIO_enuWritePin+0x248>
				break;
				case DIO_LOW :
				CLR_BIT(PORTA,u8PinNumCpy);
    1bfa:	ab e3       	ldi	r26, 0x3B	; 59
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	eb e3       	ldi	r30, 0x3B	; 59
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <DIO_enuWritePin+0x82>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <DIO_enuWritePin+0x7e>
    1c1c:	80 95       	com	r24
    1c1e:	84 23       	and	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	dd c0       	rjmp	.+442    	; 0x1dde <DIO_enuWritePin+0x248>
				break;
				default :
				enuReturnStateLoc = PARAMRETER_OUT_RANGE;
    1c24:	82 e0       	ldi	r24, 0x02	; 2
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	da c0       	rjmp	.+436    	; 0x1dde <DIO_enuWritePin+0x248>
				break;

			}
		}
		else if (u8PinNumCpy>=DIO_PIN_NUM_B0 && u8PinNumCpy<=DIO_PIN_NUM_B7)
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	88 30       	cpi	r24, 0x08	; 8
    1c2e:	08 f4       	brcc	.+2      	; 0x1c32 <DIO_enuWritePin+0x9c>
    1c30:	44 c0       	rjmp	.+136    	; 0x1cba <DIO_enuWritePin+0x124>
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	80 31       	cpi	r24, 0x10	; 16
    1c36:	08 f0       	brcs	.+2      	; 0x1c3a <DIO_enuWritePin+0xa4>
    1c38:	40 c0       	rjmp	.+128    	; 0x1cba <DIO_enuWritePin+0x124>
		{
			switch(u8PinValueCpy)
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	39 87       	std	Y+9, r19	; 0x09
    1c42:	28 87       	std	Y+8, r18	; 0x08
    1c44:	88 85       	ldd	r24, Y+8	; 0x08
    1c46:	99 85       	ldd	r25, Y+9	; 0x09
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	e1 f0       	breq	.+56     	; 0x1c84 <DIO_enuWritePin+0xee>
    1c4c:	28 85       	ldd	r18, Y+8	; 0x08
    1c4e:	39 85       	ldd	r19, Y+9	; 0x09
    1c50:	21 30       	cpi	r18, 0x01	; 1
    1c52:	31 05       	cpc	r19, r1
    1c54:	79 f5       	brne	.+94     	; 0x1cb4 <DIO_enuWritePin+0x11e>
			{
				case DIO_HIGH :
				SET_BIT(PORTB ,u8PinNumCpy%8);
    1c56:	a8 e3       	ldi	r26, 0x38	; 56
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e8 e3       	ldi	r30, 0x38	; 56
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	88 2f       	mov	r24, r24
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9c 01       	movw	r18, r24
    1c6a:	27 70       	andi	r18, 0x07	; 7
    1c6c:	30 70       	andi	r19, 0x00	; 0
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	02 2e       	mov	r0, r18
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <DIO_enuWritePin+0xe4>
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	0a 94       	dec	r0
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <DIO_enuWritePin+0xe0>
    1c7e:	84 2b       	or	r24, r20
    1c80:	8c 93       	st	X, r24
    1c82:	ad c0       	rjmp	.+346    	; 0x1dde <DIO_enuWritePin+0x248>
				break;
				case DIO_LOW :
				CLR_BIT(PORTB,u8PinNumCpy%8);  //-8
    1c84:	a8 e3       	ldi	r26, 0x38	; 56
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e8 e3       	ldi	r30, 0x38	; 56
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	48 2f       	mov	r20, r24
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	9c 01       	movw	r18, r24
    1c98:	27 70       	andi	r18, 0x07	; 7
    1c9a:	30 70       	andi	r19, 0x00	; 0
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 2e       	mov	r0, r18
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <DIO_enuWritePin+0x112>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	0a 94       	dec	r0
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <DIO_enuWritePin+0x10e>
    1cac:	80 95       	com	r24
    1cae:	84 23       	and	r24, r20
    1cb0:	8c 93       	st	X, r24
    1cb2:	95 c0       	rjmp	.+298    	; 0x1dde <DIO_enuWritePin+0x248>
				break;
				default :
				enuReturnStateLoc = PARAMRETER_OUT_RANGE;
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	92 c0       	rjmp	.+292    	; 0x1dde <DIO_enuWritePin+0x248>
				break;

			}

		}
		else if (u8PinNumCpy>=DIO_PIN_NUM_C0 && u8PinNumCpy<=DIO_PIN_NUM_C7)
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	80 31       	cpi	r24, 0x10	; 16
    1cbe:	08 f4       	brcc	.+2      	; 0x1cc2 <DIO_enuWritePin+0x12c>
    1cc0:	44 c0       	rjmp	.+136    	; 0x1d4a <DIO_enuWritePin+0x1b4>
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	88 31       	cpi	r24, 0x18	; 24
    1cc6:	08 f0       	brcs	.+2      	; 0x1cca <DIO_enuWritePin+0x134>
    1cc8:	40 c0       	rjmp	.+128    	; 0x1d4a <DIO_enuWritePin+0x1b4>
		{

			switch(u8PinValueCpy)
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	3f 83       	std	Y+7, r19	; 0x07
    1cd2:	2e 83       	std	Y+6, r18	; 0x06
    1cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	e1 f0       	breq	.+56     	; 0x1d14 <DIO_enuWritePin+0x17e>
    1cdc:	2e 81       	ldd	r18, Y+6	; 0x06
    1cde:	3f 81       	ldd	r19, Y+7	; 0x07
    1ce0:	21 30       	cpi	r18, 0x01	; 1
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	79 f5       	brne	.+94     	; 0x1d44 <DIO_enuWritePin+0x1ae>
			{
				case DIO_HIGH :
				SET_BIT(PORTC ,u8PinNumCpy%8);  //-16
    1ce6:	a5 e3       	ldi	r26, 0x35	; 53
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e5 e3       	ldi	r30, 0x35	; 53
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9c 01       	movw	r18, r24
    1cfa:	27 70       	andi	r18, 0x07	; 7
    1cfc:	30 70       	andi	r19, 0x00	; 0
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	02 2e       	mov	r0, r18
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <DIO_enuWritePin+0x174>
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	0a 94       	dec	r0
    1d0c:	e2 f7       	brpl	.-8      	; 0x1d06 <DIO_enuWritePin+0x170>
    1d0e:	84 2b       	or	r24, r20
    1d10:	8c 93       	st	X, r24
    1d12:	65 c0       	rjmp	.+202    	; 0x1dde <DIO_enuWritePin+0x248>
				break;
				case DIO_LOW :
				CLR_BIT(PORTC,u8PinNumCpy%8);
    1d14:	a5 e3       	ldi	r26, 0x35	; 53
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e5 e3       	ldi	r30, 0x35	; 53
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	48 2f       	mov	r20, r24
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9c 01       	movw	r18, r24
    1d28:	27 70       	andi	r18, 0x07	; 7
    1d2a:	30 70       	andi	r19, 0x00	; 0
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	02 2e       	mov	r0, r18
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <DIO_enuWritePin+0x1a2>
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	0a 94       	dec	r0
    1d3a:	e2 f7       	brpl	.-8      	; 0x1d34 <DIO_enuWritePin+0x19e>
    1d3c:	80 95       	com	r24
    1d3e:	84 23       	and	r24, r20
    1d40:	8c 93       	st	X, r24
    1d42:	4d c0       	rjmp	.+154    	; 0x1dde <DIO_enuWritePin+0x248>
				break;
				default :
				enuReturnStateLoc = PARAMRETER_OUT_RANGE;
    1d44:	82 e0       	ldi	r24, 0x02	; 2
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	4a c0       	rjmp	.+148    	; 0x1dde <DIO_enuWritePin+0x248>

			}


		}
		else if (u8PinNumCpy>=DIO_PIN_NUM_D0 && u8PinNumCpy<=DIO_PIN_NUM_D7)
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	88 31       	cpi	r24, 0x18	; 24
    1d4e:	08 f4       	brcc	.+2      	; 0x1d52 <DIO_enuWritePin+0x1bc>
    1d50:	44 c0       	rjmp	.+136    	; 0x1dda <DIO_enuWritePin+0x244>
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	80 32       	cpi	r24, 0x20	; 32
    1d56:	08 f0       	brcs	.+2      	; 0x1d5a <DIO_enuWritePin+0x1c4>
    1d58:	40 c0       	rjmp	.+128    	; 0x1dda <DIO_enuWritePin+0x244>
		{

			switch(u8PinValueCpy)
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	3d 83       	std	Y+5, r19	; 0x05
    1d62:	2c 83       	std	Y+4, r18	; 0x04
    1d64:	8c 81       	ldd	r24, Y+4	; 0x04
    1d66:	9d 81       	ldd	r25, Y+5	; 0x05
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	e1 f0       	breq	.+56     	; 0x1da4 <DIO_enuWritePin+0x20e>
    1d6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d70:	21 30       	cpi	r18, 0x01	; 1
    1d72:	31 05       	cpc	r19, r1
    1d74:	79 f5       	brne	.+94     	; 0x1dd4 <DIO_enuWritePin+0x23e>
			{
				case DIO_HIGH :
				SET_BIT(PORTD ,(u8PinNumCpy%8));  //-16
    1d76:	a2 e3       	ldi	r26, 0x32	; 50
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e2 e3       	ldi	r30, 0x32	; 50
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	9c 01       	movw	r18, r24
    1d8a:	27 70       	andi	r18, 0x07	; 7
    1d8c:	30 70       	andi	r19, 0x00	; 0
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	02 2e       	mov	r0, r18
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <DIO_enuWritePin+0x204>
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	0a 94       	dec	r0
    1d9c:	e2 f7       	brpl	.-8      	; 0x1d96 <DIO_enuWritePin+0x200>
    1d9e:	84 2b       	or	r24, r20
    1da0:	8c 93       	st	X, r24
    1da2:	1d c0       	rjmp	.+58     	; 0x1dde <DIO_enuWritePin+0x248>
				break;
				case DIO_LOW :
				CLR_BIT(PORTD,(u8PinNumCpy%8));
    1da4:	a2 e3       	ldi	r26, 0x32	; 50
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e2 e3       	ldi	r30, 0x32	; 50
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	48 2f       	mov	r20, r24
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	88 2f       	mov	r24, r24
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9c 01       	movw	r18, r24
    1db8:	27 70       	andi	r18, 0x07	; 7
    1dba:	30 70       	andi	r19, 0x00	; 0
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	02 2e       	mov	r0, r18
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <DIO_enuWritePin+0x232>
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	0a 94       	dec	r0
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <DIO_enuWritePin+0x22e>
    1dcc:	80 95       	com	r24
    1dce:	84 23       	and	r24, r20
    1dd0:	8c 93       	st	X, r24
    1dd2:	05 c0       	rjmp	.+10     	; 0x1dde <DIO_enuWritePin+0x248>
				break;
				default :
				enuReturnStateLoc = PARAMRETER_OUT_RANGE;
    1dd4:	82 e0       	ldi	r24, 0x02	; 2
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <DIO_enuWritePin+0x248>


		}
		else
		{
			enuReturnStateLoc=PARAMRETER_OUT_RANGE;
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	89 83       	std	Y+1, r24	; 0x01
		}


		return enuReturnStateLoc;
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de0:	2b 96       	adiw	r28, 0x0b	; 11
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <DIO_enuReadPin>:

tenuErrorStatus DIO_enuReadPin(uint8 u8PinNumCpy, uint8* pu8PinValue){
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <DIO_enuReadPin+0x6>
    1df8:	00 d0       	rcall	.+0      	; 0x1dfa <DIO_enuReadPin+0x8>
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	8a 83       	std	Y+2, r24	; 0x02
    1e00:	7c 83       	std	Y+4, r23	; 0x04
    1e02:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStateLoc =EOK ;
    1e04:	19 82       	std	Y+1, r1	; 0x01


		if (pu8PinValue!= NULL_PTR)
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <DIO_enuReadPin+0x1e>
    1e0e:	6e c0       	rjmp	.+220    	; 0x1eec <DIO_enuReadPin+0xfa>
		{
			if (u8PinNumCpy>=DIO_PIN_NUM_A0  && u8PinNumCpy<= DIO_PIN_NUM_A7)
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	88 30       	cpi	r24, 0x08	; 8
    1e14:	a0 f4       	brcc	.+40     	; 0x1e3e <DIO_enuReadPin+0x4c>
			{

				*pu8PinValue=GET_BIT(PINA,u8PinNumCpy);
    1e16:	e9 e3       	ldi	r30, 0x39	; 57
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	88 2f       	mov	r24, r24
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	a9 01       	movw	r20, r18
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <DIO_enuReadPin+0x3c>
    1e2a:	55 95       	asr	r21
    1e2c:	47 95       	ror	r20
    1e2e:	8a 95       	dec	r24
    1e30:	e2 f7       	brpl	.-8      	; 0x1e2a <DIO_enuReadPin+0x38>
    1e32:	ca 01       	movw	r24, r20
    1e34:	81 70       	andi	r24, 0x01	; 1
    1e36:	eb 81       	ldd	r30, Y+3	; 0x03
    1e38:	fc 81       	ldd	r31, Y+4	; 0x04
    1e3a:	80 83       	st	Z, r24
    1e3c:	59 c0       	rjmp	.+178    	; 0x1ef0 <DIO_enuReadPin+0xfe>
			}
			else if (u8PinNumCpy>=DIO_PIN_NUM_B0 && u8PinNumCpy<=DIO_PIN_NUM_B7)
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	88 30       	cpi	r24, 0x08	; 8
    1e42:	c8 f0       	brcs	.+50     	; 0x1e76 <DIO_enuReadPin+0x84>
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	80 31       	cpi	r24, 0x10	; 16
    1e48:	b0 f4       	brcc	.+44     	; 0x1e76 <DIO_enuReadPin+0x84>
			{
				*pu8PinValue=GET_BIT(PINB,u8PinNumCpy%8);
    1e4a:	e6 e3       	ldi	r30, 0x36	; 54
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	88 2f       	mov	r24, r24
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	87 70       	andi	r24, 0x07	; 7
    1e5c:	90 70       	andi	r25, 0x00	; 0
    1e5e:	a9 01       	movw	r20, r18
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <DIO_enuReadPin+0x74>
    1e62:	55 95       	asr	r21
    1e64:	47 95       	ror	r20
    1e66:	8a 95       	dec	r24
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <DIO_enuReadPin+0x70>
    1e6a:	ca 01       	movw	r24, r20
    1e6c:	81 70       	andi	r24, 0x01	; 1
    1e6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e70:	fc 81       	ldd	r31, Y+4	; 0x04
    1e72:	80 83       	st	Z, r24
    1e74:	3d c0       	rjmp	.+122    	; 0x1ef0 <DIO_enuReadPin+0xfe>
			}
			else if (u8PinNumCpy>=DIO_PIN_NUM_C0 && u8PinNumCpy<=DIO_PIN_NUM_C7)
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	80 31       	cpi	r24, 0x10	; 16
    1e7a:	c8 f0       	brcs	.+50     	; 0x1eae <DIO_enuReadPin+0xbc>
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	88 31       	cpi	r24, 0x18	; 24
    1e80:	b0 f4       	brcc	.+44     	; 0x1eae <DIO_enuReadPin+0xbc>
			{
				*pu8PinValue=GET_BIT(PINC,u8PinNumCpy%8);
    1e82:	e3 e3       	ldi	r30, 0x33	; 51
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	88 2f       	mov	r24, r24
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	87 70       	andi	r24, 0x07	; 7
    1e94:	90 70       	andi	r25, 0x00	; 0
    1e96:	a9 01       	movw	r20, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <DIO_enuReadPin+0xac>
    1e9a:	55 95       	asr	r21
    1e9c:	47 95       	ror	r20
    1e9e:	8a 95       	dec	r24
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <DIO_enuReadPin+0xa8>
    1ea2:	ca 01       	movw	r24, r20
    1ea4:	81 70       	andi	r24, 0x01	; 1
    1ea6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea8:	fc 81       	ldd	r31, Y+4	; 0x04
    1eaa:	80 83       	st	Z, r24
    1eac:	21 c0       	rjmp	.+66     	; 0x1ef0 <DIO_enuReadPin+0xfe>
			}
			else if (u8PinNumCpy>=DIO_PIN_NUM_D0 && u8PinNumCpy<=DIO_PIN_NUM_D7)
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	88 31       	cpi	r24, 0x18	; 24
    1eb2:	c8 f0       	brcs	.+50     	; 0x1ee6 <DIO_enuReadPin+0xf4>
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	80 32       	cpi	r24, 0x20	; 32
    1eb8:	b0 f4       	brcc	.+44     	; 0x1ee6 <DIO_enuReadPin+0xf4>
			{
				*pu8PinValue=GET_BIT(PIND,u8PinNumCpy%8);
    1eba:	e0 e3       	ldi	r30, 0x30	; 48
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	88 2f       	mov	r24, r24
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	87 70       	andi	r24, 0x07	; 7
    1ecc:	90 70       	andi	r25, 0x00	; 0
    1ece:	a9 01       	movw	r20, r18
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <DIO_enuReadPin+0xe4>
    1ed2:	55 95       	asr	r21
    1ed4:	47 95       	ror	r20
    1ed6:	8a 95       	dec	r24
    1ed8:	e2 f7       	brpl	.-8      	; 0x1ed2 <DIO_enuReadPin+0xe0>
    1eda:	ca 01       	movw	r24, r20
    1edc:	81 70       	andi	r24, 0x01	; 1
    1ede:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee2:	80 83       	st	Z, r24
    1ee4:	05 c0       	rjmp	.+10     	; 0x1ef0 <DIO_enuReadPin+0xfe>
			}
			else
			{
				enuReturnStateLoc= PARAMRETER_OUT_RANGE;
    1ee6:	82 e0       	ldi	r24, 0x02	; 2
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <DIO_enuReadPin+0xfe>
			}
		}
		else
		{
			enuReturnStateLoc = PARAMETER_NULL_PTR;
    1eec:	83 e0       	ldi	r24, 0x03	; 3
    1eee:	89 83       	std	Y+1, r24	; 0x01
		}
		return enuReturnStateLoc;
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <DIO_enuWriteGroup>:

tenuErrorStatus DIO_enuWriteGroup(uint8* pau8PinNumCpy, uint8* pau8PinValueCpy,uint8 u8SizeCpy){
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	27 97       	sbiw	r28, 0x07	; 7
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	9c 83       	std	Y+4, r25	; 0x04
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	7e 83       	std	Y+6, r23	; 0x06
    1f1a:	6d 83       	std	Y+5, r22	; 0x05
    1f1c:	4f 83       	std	Y+7, r20	; 0x07
	tenuErrorStatus enuReturnStateLoc =EOK;
    1f1e:	1a 82       	std	Y+2, r1	; 0x02

		uint8 u8CounterLoc=0;
    1f20:	19 82       	std	Y+1, r1	; 0x01

		for(u8CounterLoc=0;u8CounterLoc< u8SizeCpy;u8CounterLoc++)
    1f22:	19 82       	std	Y+1, r1	; 0x01
    1f24:	1d c0       	rjmp	.+58     	; 0x1f60 <DIO_enuWriteGroup+0x60>
		{
			enuReturnStateLoc=DIO_enuWritePin(pau8PinNumCpy[u8CounterLoc],pau8PinValueCpy[u8CounterLoc]);
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	fc 01       	movw	r30, r24
    1f32:	e2 0f       	add	r30, r18
    1f34:	f3 1f       	adc	r31, r19
    1f36:	40 81       	ld	r20, Z
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	fc 01       	movw	r30, r24
    1f44:	e2 0f       	add	r30, r18
    1f46:	f3 1f       	adc	r31, r19
    1f48:	90 81       	ld	r25, Z
    1f4a:	84 2f       	mov	r24, r20
    1f4c:	69 2f       	mov	r22, r25
    1f4e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
    1f52:	8a 83       	std	Y+2, r24	; 0x02

			if (enuReturnStateLoc !=EOK)
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	88 23       	and	r24, r24
    1f58:	39 f4       	brne	.+14     	; 0x1f68 <DIO_enuWriteGroup+0x68>
tenuErrorStatus DIO_enuWriteGroup(uint8* pau8PinNumCpy, uint8* pau8PinValueCpy,uint8 u8SizeCpy){
	tenuErrorStatus enuReturnStateLoc =EOK;

		uint8 u8CounterLoc=0;

		for(u8CounterLoc=0;u8CounterLoc< u8SizeCpy;u8CounterLoc++)
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	8f 5f       	subi	r24, 0xFF	; 255
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	99 81       	ldd	r25, Y+1	; 0x01
    1f62:	8f 81       	ldd	r24, Y+7	; 0x07
    1f64:	98 17       	cp	r25, r24
    1f66:	f8 f2       	brcs	.-66     	; 0x1f26 <DIO_enuWriteGroup+0x26>
			{
				break;
			}
		}

		return enuReturnStateLoc;
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f6a:	27 96       	adiw	r28, 0x07	; 7
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <DIO_enuStatePullup>:

tenuErrorStatus DIO_enuStatePullup(uint8 u8PinNumCpy, uint8 u8StateCpy){
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <DIO_enuStatePullup+0x6>
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_enuWritePin(u8PinNumCpy,u8StateCpy);
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	6a 81       	ldd	r22, Y+2	; 0x02
    1f8e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
}
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <ADC_voidInit>:

pf ADC_pfCall = NULL_PTR ;
uint16 ADC_u16ReadValue ;

void ADC_voidInit(void)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
#if ADC_RES_MODE  ==  ADC_8BIT
	SET_BIT(ADCMUX , 5 ) ;
#else 
	CLR_BIT(ADCMUX , 5 ) ;
    1fa4:	a7 e2       	ldi	r26, 0x27	; 39
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e7 e2       	ldi	r30, 0x27	; 39
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	8f 7d       	andi	r24, 0xDF	; 223
    1fb0:	8c 93       	st	X, r24
	
#if  ADC_VOLTAGE_REF == ADC_AREF
	CLR_BIT(ADCMUX , 6 ) ;
	CLR_BIT(ADCMUX , 7 ) ;
#elif  ADC_VOLTAGE_REF == ADC_AVCC_REF
	SET_BIT(ADCMUX , 6 ) ;
    1fb2:	a7 e2       	ldi	r26, 0x27	; 39
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e7 e2       	ldi	r30, 0x27	; 39
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	80 64       	ori	r24, 0x40	; 64
    1fbe:	8c 93       	st	X, r24
	CLR_BIT(ADCMUX , 7 ) ;
    1fc0:	a7 e2       	ldi	r26, 0x27	; 39
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e7 e2       	ldi	r30, 0x27	; 39
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	8f 77       	andi	r24, 0x7F	; 127
    1fcc:	8c 93       	st	X, r24
	SET_BIT(ADCMUX , 6 ) ;
	SET_BIT(ADCMUX , 7 ) ;
	
#endif

ADCSRA &= 0b11111000;
    1fce:	a6 e2       	ldi	r26, 0x26	; 38
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e6 e2       	ldi	r30, 0x26	; 38
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	88 7f       	andi	r24, 0xF8	; 248
    1fda:	8c 93       	st	X, r24
ADCSRA |=ADC_PRESCALLER ;
    1fdc:	a6 e2       	ldi	r26, 0x26	; 38
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e6 e2       	ldi	r30, 0x26	; 38
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	85 60       	ori	r24, 0x05	; 5
    1fe8:	8c 93       	st	X, r24

#if ADC_TRIGGER_MODE ==ADC_SGL_MODE
    CLR_BIT(ADCSRA , 5) ;
    1fea:	a6 e2       	ldi	r26, 0x26	; 38
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e6 e2       	ldi	r30, 0x26	; 38
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	8f 7d       	andi	r24, 0xDF	; 223
    1ff6:	8c 93       	st	X, r24
	SFIOR |=ADC_TRIGGER_MODE<<5;
#endif
	


}
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <ADC_voidEnable>:
void ADC_voidEnable(void)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA , 7);
    2006:	a6 e2       	ldi	r26, 0x26	; 38
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e6 e2       	ldi	r30, 0x26	; 38
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	80 68       	ori	r24, 0x80	; 128
    2012:	8c 93       	st	X, r24
}
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <ADC_voidDisable>:
void ADC_voidDisable(void)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA , 7);
    2022:	a6 e2       	ldi	r26, 0x26	; 38
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e6 e2       	ldi	r30, 0x26	; 38
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	8f 77       	andi	r24, 0x7F	; 127
    202e:	8c 93       	st	X, r24
}
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <ADC_voidEnableInterrupt>:
void ADC_voidEnableInterrupt(void)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA , 3);
    203e:	a6 e2       	ldi	r26, 0x26	; 38
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e6 e2       	ldi	r30, 0x26	; 38
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	88 60       	ori	r24, 0x08	; 8
    204a:	8c 93       	st	X, r24
}
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <ADC_voidDisableInterrupt>:
void ADC_voidDisableInterrupt(void)
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA , 3);
    205a:	a6 e2       	ldi	r26, 0x26	; 38
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e6 e2       	ldi	r30, 0x26	; 38
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	87 7f       	andi	r24, 0xF7	; 247
    2066:	8c 93       	st	X, r24
}
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <ADC_voidSetCallback>:
void ADC_voidSetCallback(pf pfCallbackCpy)
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	00 d0       	rcall	.+0      	; 0x2074 <ADC_voidSetCallback+0x6>
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	9a 83       	std	Y+2, r25	; 0x02
    207a:	89 83       	std	Y+1, r24	; 0x01
	ADC_pfCall = pfCallbackCpy ;
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	9a 81       	ldd	r25, Y+2	; 0x02
    2080:	90 93 4d 01 	sts	0x014D, r25
    2084:	80 93 4c 01 	sts	0x014C, r24
}
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <ADC_voidStartConversion>:
void ADC_voidStartConversion(uint8 u8ChannelNbCpy)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	0f 92       	push	r0
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	89 83       	std	Y+1, r24	; 0x01
	ADCMUX &= 0b11100000  ;
    209e:	a7 e2       	ldi	r26, 0x27	; 39
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e7 e2       	ldi	r30, 0x27	; 39
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	80 7e       	andi	r24, 0xE0	; 224
    20aa:	8c 93       	st	X, r24
	ADCMUX |= u8ChannelNbCpy ;
    20ac:	a7 e2       	ldi	r26, 0x27	; 39
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e7 e2       	ldi	r30, 0x27	; 39
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	90 81       	ld	r25, Z
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	89 2b       	or	r24, r25
    20ba:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , 6) ;
    20bc:	a6 e2       	ldi	r26, 0x26	; 38
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e6 e2       	ldi	r30, 0x26	; 38
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	80 64       	ori	r24, 0x40	; 64
    20c8:	8c 93       	st	X, r24
}
    20ca:	0f 90       	pop	r0
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <ADC_voidChangeMode>:
void ADC_voidChangeMode(uint8 u8ModeCpy)
{
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	0f 92       	push	r0
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	89 83       	std	Y+1, r24	; 0x01
	if (u8ModeCpy < ADC_SGL_MODE )
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	89 30       	cpi	r24, 0x09	; 9
    20e2:	10 f5       	brcc	.+68     	; 0x2128 <ADC_voidChangeMode+0x56>
	{
		SET_BIT(ADCSRA , 5) ;
    20e4:	a6 e2       	ldi	r26, 0x26	; 38
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e6 e2       	ldi	r30, 0x26	; 38
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	80 62       	ori	r24, 0x20	; 32
    20f0:	8c 93       	st	X, r24
		SFIOR &=0b00011111;
    20f2:	a0 e5       	ldi	r26, 0x50	; 80
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e0 e5       	ldi	r30, 0x50	; 80
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	8f 71       	andi	r24, 0x1F	; 31
    20fe:	8c 93       	st	X, r24
		SFIOR |=u8ModeCpy<<5;
    2100:	a0 e5       	ldi	r26, 0x50	; 80
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e0 e5       	ldi	r30, 0x50	; 80
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	28 2f       	mov	r18, r24
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	88 2f       	mov	r24, r24
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	82 95       	swap	r24
    2118:	92 95       	swap	r25
    211a:	90 7f       	andi	r25, 0xF0	; 240
    211c:	98 27       	eor	r25, r24
    211e:	80 7f       	andi	r24, 0xF0	; 240
    2120:	98 27       	eor	r25, r24
    2122:	82 2b       	or	r24, r18
    2124:	8c 93       	st	X, r24
    2126:	0a c0       	rjmp	.+20     	; 0x213c <ADC_voidChangeMode+0x6a>
	}
	else if (u8ModeCpy == ADC_SGL_MODE)
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	89 30       	cpi	r24, 0x09	; 9
    212c:	39 f4       	brne	.+14     	; 0x213c <ADC_voidChangeMode+0x6a>
	{
		CLR_BIT(ADCSRA , 5) ;
    212e:	a6 e2       	ldi	r26, 0x26	; 38
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e6 e2       	ldi	r30, 0x26	; 38
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	8f 7d       	andi	r24, 0xDF	; 223
    213a:	8c 93       	st	X, r24
	}
	else
	{
		
	}
}
    213c:	0f 90       	pop	r0
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <ADC_u16ReadSync>:
/* polling */
uint16 ADC_u16ReadSync(uint8 u8ChannelNbCpy)
{
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	00 d0       	rcall	.+0      	; 0x214a <ADC_u16ReadSync+0x6>
    214a:	0f 92       	push	r0
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	8b 83       	std	Y+3, r24	; 0x03
	uint16 u16ReadValueLoc =0 ;
    2152:	1a 82       	std	Y+2, r1	; 0x02
    2154:	19 82       	std	Y+1, r1	; 0x01
	ADC_voidStartConversion(u8ChannelNbCpy);
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	0e 94 49 10 	call	0x2092	; 0x2092 <ADC_voidStartConversion>
	/*wait conversion till finish*/
	while (GET_BIT(ADCSRA , 4) == 0);
    215c:	e6 e2       	ldi	r30, 0x26	; 38
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	82 95       	swap	r24
    2164:	8f 70       	andi	r24, 0x0F	; 15
    2166:	88 2f       	mov	r24, r24
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	81 70       	andi	r24, 0x01	; 1
    216c:	90 70       	andi	r25, 0x00	; 0
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	a9 f3       	breq	.-22     	; 0x215c <ADC_u16ReadSync+0x18>
	/*Clear Flag bit*/
	SET_BIT(ADCSRA , 4);
    2172:	a6 e2       	ldi	r26, 0x26	; 38
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e6 e2       	ldi	r30, 0x26	; 38
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	80 61       	ori	r24, 0x10	; 16
    217e:	8c 93       	st	X, r24
	
	#if ADC_RES_MODE == ADC_8BIT
	u16ReadValueLoc = ADCH ;
	#else
	u16ReadValueLoc = ADCL;
    2180:	e4 e2       	ldi	r30, 0x24	; 36
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	88 2f       	mov	r24, r24
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	9a 83       	std	Y+2, r25	; 0x02
    218c:	89 83       	std	Y+1, r24	; 0x01
    u16ReadValueLoc |= (ADCH<<8) ;
    218e:	e5 e2       	ldi	r30, 0x25	; 37
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	98 2f       	mov	r25, r24
    219a:	88 27       	eor	r24, r24
    219c:	9c 01       	movw	r18, r24
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	82 2b       	or	r24, r18
    21a4:	93 2b       	or	r25, r19
    21a6:	9a 83       	std	Y+2, r25	; 0x02
    21a8:	89 83       	std	Y+1, r24	; 0x01
	#endif
	
	return u16ReadValueLoc ;
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	9a 81       	ldd	r25, Y+2	; 0x02
	
}
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <ADC_u16ReadAsync>:
uint16 ADC_u16ReadAsync(void)
{
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
	return ADC_u16ReadValue ;
    21c2:	80 91 66 01 	lds	r24, 0x0166
    21c6:	90 91 67 01 	lds	r25, 0x0167
}
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <__vector_16>:

void __vector_16 (void) __attribute__((signal ,used));

void __vector_16 (void)
{
    21d0:	1f 92       	push	r1
    21d2:	0f 92       	push	r0
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	0f 92       	push	r0
    21d8:	11 24       	eor	r1, r1
    21da:	2f 93       	push	r18
    21dc:	3f 93       	push	r19
    21de:	4f 93       	push	r20
    21e0:	5f 93       	push	r21
    21e2:	6f 93       	push	r22
    21e4:	7f 93       	push	r23
    21e6:	8f 93       	push	r24
    21e8:	9f 93       	push	r25
    21ea:	af 93       	push	r26
    21ec:	bf 93       	push	r27
    21ee:	ef 93       	push	r30
    21f0:	ff 93       	push	r31
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pfCall != NULL_PTR)
    21fa:	80 91 4c 01 	lds	r24, 0x014C
    21fe:	90 91 4d 01 	lds	r25, 0x014D
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	29 f0       	breq	.+10     	; 0x2210 <__vector_16+0x40>
	{
		ADC_pfCall();
    2206:	e0 91 4c 01 	lds	r30, 0x014C
    220a:	f0 91 4d 01 	lds	r31, 0x014D
    220e:	09 95       	icall
	}
	#if ADC_RES_MODE == ADC_8BIT
	ADC_u16ReadValue = ADCH ;
	#else
	ADC_u16ReadValue = ADCL;
    2210:	e4 e2       	ldi	r30, 0x24	; 36
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	88 2f       	mov	r24, r24
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	90 93 67 01 	sts	0x0167, r25
    221e:	80 93 66 01 	sts	0x0166, r24
		ADC_u16ReadValue |= (ADCH<<8) ;
    2222:	e5 e2       	ldi	r30, 0x25	; 37
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	88 2f       	mov	r24, r24
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	98 2f       	mov	r25, r24
    222e:	88 27       	eor	r24, r24
    2230:	9c 01       	movw	r18, r24
    2232:	80 91 66 01 	lds	r24, 0x0166
    2236:	90 91 67 01 	lds	r25, 0x0167
    223a:	82 2b       	or	r24, r18
    223c:	93 2b       	or	r25, r19
    223e:	90 93 67 01 	sts	0x0167, r25
    2242:	80 93 66 01 	sts	0x0166, r24
	#endif
}
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	ff 91       	pop	r31
    224c:	ef 91       	pop	r30
    224e:	bf 91       	pop	r27
    2250:	af 91       	pop	r26
    2252:	9f 91       	pop	r25
    2254:	8f 91       	pop	r24
    2256:	7f 91       	pop	r23
    2258:	6f 91       	pop	r22
    225a:	5f 91       	pop	r21
    225c:	4f 91       	pop	r20
    225e:	3f 91       	pop	r19
    2260:	2f 91       	pop	r18
    2262:	0f 90       	pop	r0
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	0f 90       	pop	r0
    2268:	1f 90       	pop	r1
    226a:	18 95       	reti

0000226c <SEV_enuDisplay>:




tenuErrorStatus SEV_enuDisplay(uint8 u8SevIndexCpy, uint8 u8NumCpy)
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	62 97       	sbiw	r28, 0x12	; 18
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	8c 87       	std	Y+12, r24	; 0x0c
    2282:	6d 87       	std	Y+13, r22	; 0x0d

	tenuErrorStatus enuReturnLoc =EOK;
    2284:	19 82       	std	Y+1, r1	; 0x01
	uint8 au8cathode[10] = {0x3f, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
    2286:	ce 01       	movw	r24, r28
    2288:	02 96       	adiw	r24, 0x02	; 2
    228a:	9f 87       	std	Y+15, r25	; 0x0f
    228c:	8e 87       	std	Y+14, r24	; 0x0e
    228e:	e1 e4       	ldi	r30, 0x41	; 65
    2290:	f1 e0       	ldi	r31, 0x01	; 1
    2292:	f9 8b       	std	Y+17, r31	; 0x11
    2294:	e8 8b       	std	Y+16, r30	; 0x10
    2296:	fa e0       	ldi	r31, 0x0A	; 10
    2298:	fa 8b       	std	Y+18, r31	; 0x12
    229a:	e8 89       	ldd	r30, Y+16	; 0x10
    229c:	f9 89       	ldd	r31, Y+17	; 0x11
    229e:	00 80       	ld	r0, Z
    22a0:	88 89       	ldd	r24, Y+16	; 0x10
    22a2:	99 89       	ldd	r25, Y+17	; 0x11
    22a4:	01 96       	adiw	r24, 0x01	; 1
    22a6:	99 8b       	std	Y+17, r25	; 0x11
    22a8:	88 8b       	std	Y+16, r24	; 0x10
    22aa:	ee 85       	ldd	r30, Y+14	; 0x0e
    22ac:	ff 85       	ldd	r31, Y+15	; 0x0f
    22ae:	00 82       	st	Z, r0
    22b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    22b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    22b4:	01 96       	adiw	r24, 0x01	; 1
    22b6:	9f 87       	std	Y+15, r25	; 0x0f
    22b8:	8e 87       	std	Y+14, r24	; 0x0e
    22ba:	9a 89       	ldd	r25, Y+18	; 0x12
    22bc:	91 50       	subi	r25, 0x01	; 1
    22be:	9a 8b       	std	Y+18, r25	; 0x12
    22c0:	ea 89       	ldd	r30, Y+18	; 0x12
    22c2:	ee 23       	and	r30, r30
    22c4:	51 f7       	brne	.-44     	; 0x229a <SEV_enuDisplay+0x2e>
	if (u8NumCpy<10)
    22c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c8:	8a 30       	cpi	r24, 0x0A	; 10
    22ca:	08 f0       	brcs	.+2      	; 0x22ce <SEV_enuDisplay+0x62>
    22cc:	45 c0       	rjmp	.+138    	; 0x2358 <SEV_enuDisplay+0xec>
	{
		if (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_CATHODE)
    22ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    22d0:	28 2f       	mov	r18, r24
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	c9 01       	movw	r24, r18
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	82 0f       	add	r24, r18
    22e4:	93 1f       	adc	r25, r19
    22e6:	fc 01       	movw	r30, r24
    22e8:	e2 51       	subi	r30, 0x12	; 18
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	80 81       	ld	r24, Z
    22ee:	84 31       	cpi	r24, 0x14	; 20
    22f0:	71 f4       	brne	.+28     	; 0x230e <SEV_enuDisplay+0xa2>
		{
			SEV_HexToBin(u8SevIndexCpy,au8cathode[u8NumCpy]);
    22f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	ce 01       	movw	r24, r28
    22fa:	02 96       	adiw	r24, 0x02	; 2
    22fc:	fc 01       	movw	r30, r24
    22fe:	e2 0f       	add	r30, r18
    2300:	f3 1f       	adc	r31, r19
    2302:	90 81       	ld	r25, Z
    2304:	8c 85       	ldd	r24, Y+12	; 0x0c
    2306:	69 2f       	mov	r22, r25
    2308:	0e 94 b8 11 	call	0x2370	; 0x2370 <SEV_HexToBin>
    230c:	27 c0       	rjmp	.+78     	; 0x235c <SEV_enuDisplay+0xf0>
		}
		else if (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_ANODE)
    230e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	c9 01       	movw	r24, r18
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	82 0f       	add	r24, r18
    2324:	93 1f       	adc	r25, r19
    2326:	fc 01       	movw	r30, r24
    2328:	e2 51       	subi	r30, 0x12	; 18
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	8a 30       	cpi	r24, 0x0A	; 10
    2330:	81 f4       	brne	.+32     	; 0x2352 <SEV_enuDisplay+0xe6>
		{
			SEV_HexToBin(u8SevIndexCpy,~au8cathode[u8NumCpy]);
    2332:	8d 85       	ldd	r24, Y+13	; 0x0d
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	ce 01       	movw	r24, r28
    233a:	02 96       	adiw	r24, 0x02	; 2
    233c:	fc 01       	movw	r30, r24
    233e:	e2 0f       	add	r30, r18
    2340:	f3 1f       	adc	r31, r19
    2342:	80 81       	ld	r24, Z
    2344:	98 2f       	mov	r25, r24
    2346:	90 95       	com	r25
    2348:	8c 85       	ldd	r24, Y+12	; 0x0c
    234a:	69 2f       	mov	r22, r25
    234c:	0e 94 b8 11 	call	0x2370	; 0x2370 <SEV_HexToBin>
    2350:	05 c0       	rjmp	.+10     	; 0x235c <SEV_enuDisplay+0xf0>
		}
		else
		{
			enuReturnLoc=ENOK;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	02 c0       	rjmp	.+4      	; 0x235c <SEV_enuDisplay+0xf0>
		}
	}
	else
	{
		enuReturnLoc=PARAMRETER_OUT_RANGE;
    2358:	82 e0       	ldi	r24, 0x02	; 2
    235a:	89 83       	std	Y+1, r24	; 0x01
	}
	return enuReturnLoc;
    235c:	89 81       	ldd	r24, Y+1	; 0x01


}
    235e:	62 96       	adiw	r28, 0x12	; 18
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <SEV_HexToBin>:


static void SEV_HexToBin(uint8 u8SevIndexCpy,uint8 u8HexCpy ) // 0b0111111  num 0
{
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	2a 97       	sbiw	r28, 0x0a	; 10
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	89 87       	std	Y+9, r24	; 0x09
    2386:	6a 87       	std	Y+10, r22	; 0x0a
	uint8 au8BinValuesLoc[7];
	uint8 u8CounterLoc;
	for (u8CounterLoc=0; u8CounterLoc<7;u8CounterLoc++)
    2388:	19 82       	std	Y+1, r1	; 0x01
    238a:	1b c0       	rjmp	.+54     	; 0x23c2 <SEV_HexToBin+0x52>
	{
		au8BinValuesLoc[u8CounterLoc]=GET_BIT(u8HexCpy,u8CounterLoc);
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	48 2f       	mov	r20, r24
    2390:	50 e0       	ldi	r21, 0x00	; 0
    2392:	8a 85       	ldd	r24, Y+10	; 0x0a
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	88 2f       	mov	r24, r24
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	b9 01       	movw	r22, r18
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <SEV_HexToBin+0x36>
    23a2:	75 95       	asr	r23
    23a4:	67 95       	ror	r22
    23a6:	8a 95       	dec	r24
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <SEV_HexToBin+0x32>
    23aa:	cb 01       	movw	r24, r22
    23ac:	28 2f       	mov	r18, r24
    23ae:	21 70       	andi	r18, 0x01	; 1
    23b0:	ce 01       	movw	r24, r28
    23b2:	02 96       	adiw	r24, 0x02	; 2
    23b4:	fc 01       	movw	r30, r24
    23b6:	e4 0f       	add	r30, r20
    23b8:	f5 1f       	adc	r31, r21
    23ba:	20 83       	st	Z, r18

static void SEV_HexToBin(uint8 u8SevIndexCpy,uint8 u8HexCpy ) // 0b0111111  num 0
{
	uint8 au8BinValuesLoc[7];
	uint8 u8CounterLoc;
	for (u8CounterLoc=0; u8CounterLoc<7;u8CounterLoc++)
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	8f 5f       	subi	r24, 0xFF	; 255
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	87 30       	cpi	r24, 0x07	; 7
    23c6:	10 f3       	brcs	.-60     	; 0x238c <SEV_HexToBin+0x1c>
	{
		au8BinValuesLoc[u8CounterLoc]=GET_BIT(u8HexCpy,u8CounterLoc);
	}
	DIO_enuWriteGroup(SEV_ConfigSet[u8SevIndexCpy].au8SevCon,au8BinValuesLoc,7);
    23c8:	89 85       	ldd	r24, Y+9	; 0x09
    23ca:	28 2f       	mov	r18, r24
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	c9 01       	movw	r24, r18
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	88 0f       	add	r24, r24
    23da:	99 1f       	adc	r25, r25
    23dc:	82 0f       	add	r24, r18
    23de:	93 1f       	adc	r25, r19
    23e0:	8a 51       	subi	r24, 0x1A	; 26
    23e2:	9f 4f       	sbci	r25, 0xFF	; 255
    23e4:	9e 01       	movw	r18, r28
    23e6:	2e 5f       	subi	r18, 0xFE	; 254
    23e8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ea:	b9 01       	movw	r22, r18
    23ec:	47 e0       	ldi	r20, 0x07	; 7
    23ee:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <DIO_enuWriteGroup>

}
    23f2:	2a 96       	adiw	r28, 0x0a	; 10
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <SEV_enuEnable>:

tenuErrorStatus SEV_enuEnable(uint8 u8SevIndexCpy)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	00 d0       	rcall	.+0      	; 0x240a <SEV_enuEnable+0x6>
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	8a 83       	std	Y+2, r24	; 0x02

	tenuErrorStatus enuReturnLoc =EOK;
    2410:	19 82       	std	Y+1, r1	; 0x01
	if (u8SevIndexCpy < SEV_MAX_NUM)
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	86 30       	cpi	r24, 0x06	; 6
    2416:	08 f0       	brcs	.+2      	; 0x241a <SEV_enuEnable+0x16>
    2418:	4f c0       	rjmp	.+158    	; 0x24b8 <SEV_enuEnable+0xb4>
	{
		if (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_CATHODE)
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	28 2f       	mov	r18, r24
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	c9 01       	movw	r24, r18
    2422:	88 0f       	add	r24, r24
    2424:	99 1f       	adc	r25, r25
    2426:	88 0f       	add	r24, r24
    2428:	99 1f       	adc	r25, r25
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	82 0f       	add	r24, r18
    2430:	93 1f       	adc	r25, r19
    2432:	fc 01       	movw	r30, r24
    2434:	e2 51       	subi	r30, 0x12	; 18
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 81       	ld	r24, Z
    243a:	84 31       	cpi	r24, 0x14	; 20
    243c:	a1 f4       	brne	.+40     	; 0x2466 <SEV_enuEnable+0x62>
		{
			DIO_enuWritePin(SEV_ConfigSet[u8SevIndexCpy].u8common ,DIO_LOW);
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	c9 01       	movw	r24, r18
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	82 0f       	add	r24, r18
    2454:	93 1f       	adc	r25, r19
    2456:	fc 01       	movw	r30, r24
    2458:	e3 51       	subi	r30, 0x13	; 19
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	80 81       	ld	r24, Z
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
    2464:	2b c0       	rjmp	.+86     	; 0x24bc <SEV_enuEnable+0xb8>
		}
		else if  (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_ANODE)
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	28 2f       	mov	r18, r24
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	c9 01       	movw	r24, r18
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	82 0f       	add	r24, r18
    247c:	93 1f       	adc	r25, r19
    247e:	fc 01       	movw	r30, r24
    2480:	e2 51       	subi	r30, 0x12	; 18
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 81       	ld	r24, Z
    2486:	8a 30       	cpi	r24, 0x0A	; 10
    2488:	a1 f4       	brne	.+40     	; 0x24b2 <SEV_enuEnable+0xae>
		{
			DIO_enuWritePin(SEV_ConfigSet[u8SevIndexCpy].u8common ,DIO_HIGH);
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	28 2f       	mov	r18, r24
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	c9 01       	movw	r24, r18
    2492:	88 0f       	add	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	88 0f       	add	r24, r24
    2498:	99 1f       	adc	r25, r25
    249a:	88 0f       	add	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	82 0f       	add	r24, r18
    24a0:	93 1f       	adc	r25, r19
    24a2:	fc 01       	movw	r30, r24
    24a4:	e3 51       	subi	r30, 0x13	; 19
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 81       	ld	r24, Z
    24aa:	61 e0       	ldi	r22, 0x01	; 1
    24ac:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
    24b0:	05 c0       	rjmp	.+10     	; 0x24bc <SEV_enuEnable+0xb8>
		}
		else
		{
			enuReturnLoc=ENOK;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <SEV_enuEnable+0xb8>

		}
	}
	else
	{
		enuReturnLoc =PARAMRETER_OUT_RANGE;
    24b8:	82 e0       	ldi	r24, 0x02	; 2
    24ba:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnLoc;
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	08 95       	ret

000024c8 <SEV_enuDisable>:
tenuErrorStatus SEV_enuDisable(uint8 u8SevIndexCpy)
{
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <SEV_enuDisable+0x6>
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	8a 83       	std	Y+2, r24	; 0x02
	tenuErrorStatus enuReturnLoc =EOK;
    24d4:	19 82       	std	Y+1, r1	; 0x01
		if (u8SevIndexCpy < SEV_MAX_NUM)
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	86 30       	cpi	r24, 0x06	; 6
    24da:	08 f0       	brcs	.+2      	; 0x24de <SEV_enuDisable+0x16>
    24dc:	4f c0       	rjmp	.+158    	; 0x257c <SEV_enuDisable+0xb4>
		{
			if (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_CATHODE)
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	28 2f       	mov	r18, r24
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	c9 01       	movw	r24, r18
    24e6:	88 0f       	add	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	82 0f       	add	r24, r18
    24f4:	93 1f       	adc	r25, r19
    24f6:	fc 01       	movw	r30, r24
    24f8:	e2 51       	subi	r30, 0x12	; 18
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	84 31       	cpi	r24, 0x14	; 20
    2500:	a1 f4       	brne	.+40     	; 0x252a <SEV_enuDisable+0x62>
			{
				DIO_enuWritePin(SEV_ConfigSet[u8SevIndexCpy].u8common ,DIO_HIGH);
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	c9 01       	movw	r24, r18
    250a:	88 0f       	add	r24, r24
    250c:	99 1f       	adc	r25, r25
    250e:	88 0f       	add	r24, r24
    2510:	99 1f       	adc	r25, r25
    2512:	88 0f       	add	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	82 0f       	add	r24, r18
    2518:	93 1f       	adc	r25, r19
    251a:	fc 01       	movw	r30, r24
    251c:	e3 51       	subi	r30, 0x13	; 19
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	80 81       	ld	r24, Z
    2522:	61 e0       	ldi	r22, 0x01	; 1
    2524:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
    2528:	2b c0       	rjmp	.+86     	; 0x2580 <SEV_enuDisable+0xb8>
			}
			else if  (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_ANODE)
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	28 2f       	mov	r18, r24
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	c9 01       	movw	r24, r18
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	82 0f       	add	r24, r18
    2540:	93 1f       	adc	r25, r19
    2542:	fc 01       	movw	r30, r24
    2544:	e2 51       	subi	r30, 0x12	; 18
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	8a 30       	cpi	r24, 0x0A	; 10
    254c:	a1 f4       	brne	.+40     	; 0x2576 <SEV_enuDisable+0xae>
			{
				DIO_enuWritePin(SEV_ConfigSet[u8SevIndexCpy].u8common ,DIO_LOW);
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	28 2f       	mov	r18, r24
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	c9 01       	movw	r24, r18
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	88 0f       	add	r24, r24
    255c:	99 1f       	adc	r25, r25
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	82 0f       	add	r24, r18
    2564:	93 1f       	adc	r25, r19
    2566:	fc 01       	movw	r30, r24
    2568:	e3 51       	subi	r30, 0x13	; 19
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	80 81       	ld	r24, Z
    256e:	60 e0       	ldi	r22, 0x00	; 0
    2570:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
    2574:	05 c0       	rjmp	.+10     	; 0x2580 <SEV_enuDisable+0xb8>
			}
			else
			{
				enuReturnLoc=ENOK;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <SEV_enuDisable+0xb8>

			}
		}
		else
		{
			enuReturnLoc =PARAMRETER_OUT_RANGE;
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	89 83       	std	Y+1, r24	; 0x01
		}

		return enuReturnLoc;
    2580:	89 81       	ldd	r24, Y+1	; 0x01
}
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <LCD_voidInit>:
#include "LCD_Interface.h"
#include "LCD_Private.h"


void LCD_voidInit(void)
{
    258c:	0f 93       	push	r16
    258e:	1f 93       	push	r17
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	ce 58       	subi	r28, 0x8E	; 142
    259a:	d0 40       	sbci	r29, 0x00	; 0
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	f8 94       	cli
    25a0:	de bf       	out	0x3e, r29	; 62
    25a2:	0f be       	out	0x3f, r0	; 63
    25a4:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntLoc;
	uint8 u8commnad=0;
    25a6:	fe 01       	movw	r30, r28
    25a8:	e3 57       	subi	r30, 0x73	; 115
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	10 82       	st	Z, r1
	for (u8CntLoc =0  ; u8CntLoc <MAX_NUM ; u8CntLoc++)
    25ae:	fe 01       	movw	r30, r28
    25b0:	e2 57       	subi	r30, 0x72	; 114
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	10 82       	st	Z, r1
    25b6:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <LCD_voidInit+0x1068>
	{
		/*inilize 8 bit */
		if(lcdarr[u8CntLoc].lcdswconfig.u8mode ==LCD_8_BIT_MODE)
    25ba:	fe 01       	movw	r30, r28
    25bc:	e2 57       	subi	r30, 0x72	; 114
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	80 81       	ld	r24, Z
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	c9 01       	movw	r24, r18
    25c8:	88 0f       	add	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	82 0f       	add	r24, r18
    25ce:	93 1f       	adc	r25, r19
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	88 0f       	add	r24, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	fc 01       	movw	r30, r24
    25da:	e4 5e       	subi	r30, 0xE4	; 228
    25dc:	fe 4f       	sbci	r31, 0xFE	; 254
    25de:	80 81       	ld	r24, Z
    25e0:	81 70       	andi	r24, 0x01	; 1
    25e2:	81 30       	cpi	r24, 0x01	; 1
    25e4:	09 f0       	breq	.+2      	; 0x25e8 <LCD_voidInit+0x5c>
    25e6:	75 c4       	rjmp	.+2282   	; 0x2ed2 <LCD_voidInit+0x946>
    25e8:	fe 01       	movw	r30, r28
    25ea:	e7 57       	subi	r30, 0x77	; 119
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	a0 ef       	ldi	r26, 0xF0	; 240
    25f4:	b1 e4       	ldi	r27, 0x41	; 65
    25f6:	80 83       	st	Z, r24
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	a2 83       	std	Z+2, r26	; 0x02
    25fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fe:	8e 01       	movw	r16, r28
    2600:	0b 57       	subi	r16, 0x7B	; 123
    2602:	1f 4f       	sbci	r17, 0xFF	; 255
    2604:	fe 01       	movw	r30, r28
    2606:	e7 57       	subi	r30, 0x77	; 119
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	60 81       	ld	r22, Z
    260c:	71 81       	ldd	r23, Z+1	; 0x01
    260e:	82 81       	ldd	r24, Z+2	; 0x02
    2610:	93 81       	ldd	r25, Z+3	; 0x03
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	4a ef       	ldi	r20, 0xFA	; 250
    2618:	54 e4       	ldi	r21, 0x44	; 68
    261a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	f8 01       	movw	r30, r16
    2624:	80 83       	st	Z, r24
    2626:	91 83       	std	Z+1, r25	; 0x01
    2628:	a2 83       	std	Z+2, r26	; 0x02
    262a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    262c:	fe 01       	movw	r30, r28
    262e:	eb 57       	subi	r30, 0x7B	; 123
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	60 81       	ld	r22, Z
    2634:	71 81       	ldd	r23, Z+1	; 0x01
    2636:	82 81       	ldd	r24, Z+2	; 0x02
    2638:	93 81       	ldd	r25, Z+3	; 0x03
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e8       	ldi	r20, 0x80	; 128
    2640:	5f e3       	ldi	r21, 0x3F	; 63
    2642:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2646:	88 23       	and	r24, r24
    2648:	44 f4       	brge	.+16     	; 0x265a <LCD_voidInit+0xce>
		__ticks = 1;
    264a:	fe 01       	movw	r30, r28
    264c:	ed 57       	subi	r30, 0x7D	; 125
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24
    2658:	64 c0       	rjmp	.+200    	; 0x2722 <LCD_voidInit+0x196>
	else if (__tmp > 65535)
    265a:	fe 01       	movw	r30, r28
    265c:	eb 57       	subi	r30, 0x7B	; 123
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	60 81       	ld	r22, Z
    2662:	71 81       	ldd	r23, Z+1	; 0x01
    2664:	82 81       	ldd	r24, Z+2	; 0x02
    2666:	93 81       	ldd	r25, Z+3	; 0x03
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	3f ef       	ldi	r19, 0xFF	; 255
    266c:	4f e7       	ldi	r20, 0x7F	; 127
    266e:	57 e4       	ldi	r21, 0x47	; 71
    2670:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2674:	18 16       	cp	r1, r24
    2676:	0c f0       	brlt	.+2      	; 0x267a <LCD_voidInit+0xee>
    2678:	43 c0       	rjmp	.+134    	; 0x2700 <LCD_voidInit+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267a:	fe 01       	movw	r30, r28
    267c:	e7 57       	subi	r30, 0x77	; 119
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	8e 01       	movw	r16, r28
    269a:	0d 57       	subi	r16, 0x7D	; 125
    269c:	1f 4f       	sbci	r17, 0xFF	; 255
    269e:	bc 01       	movw	r22, r24
    26a0:	cd 01       	movw	r24, r26
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	f8 01       	movw	r30, r16
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
    26b0:	1f c0       	rjmp	.+62     	; 0x26f0 <LCD_voidInit+0x164>
    26b2:	fe 01       	movw	r30, r28
    26b4:	ef 57       	subi	r30, 0x7F	; 127
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	88 ec       	ldi	r24, 0xC8	; 200
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	91 83       	std	Z+1, r25	; 0x01
    26be:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26c0:	fe 01       	movw	r30, r28
    26c2:	ef 57       	subi	r30, 0x7F	; 127
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <LCD_voidInit+0x13e>
    26ce:	fe 01       	movw	r30, r28
    26d0:	ef 57       	subi	r30, 0x7F	; 127
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	91 83       	std	Z+1, r25	; 0x01
    26d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d8:	de 01       	movw	r26, r28
    26da:	ad 57       	subi	r26, 0x7D	; 125
    26dc:	bf 4f       	sbci	r27, 0xFF	; 255
    26de:	fe 01       	movw	r30, r28
    26e0:	ed 57       	subi	r30, 0x7D	; 125
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	80 81       	ld	r24, Z
    26e6:	91 81       	ldd	r25, Z+1	; 0x01
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	11 96       	adiw	r26, 0x01	; 1
    26ec:	9c 93       	st	X, r25
    26ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f0:	fe 01       	movw	r30, r28
    26f2:	ed 57       	subi	r30, 0x7D	; 125
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	d1 f6       	brne	.-76     	; 0x26b2 <LCD_voidInit+0x126>
    26fe:	27 c0       	rjmp	.+78     	; 0x274e <LCD_voidInit+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2700:	8e 01       	movw	r16, r28
    2702:	0d 57       	subi	r16, 0x7D	; 125
    2704:	1f 4f       	sbci	r17, 0xFF	; 255
    2706:	fe 01       	movw	r30, r28
    2708:	eb 57       	subi	r30, 0x7B	; 123
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	60 81       	ld	r22, Z
    270e:	71 81       	ldd	r23, Z+1	; 0x01
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	f8 01       	movw	r30, r16
    271e:	91 83       	std	Z+1, r25	; 0x01
    2720:	80 83       	st	Z, r24
    2722:	de 01       	movw	r26, r28
    2724:	a1 58       	subi	r26, 0x81	; 129
    2726:	bf 4f       	sbci	r27, 0xFF	; 255
    2728:	fe 01       	movw	r30, r28
    272a:	ed 57       	subi	r30, 0x7D	; 125
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	91 81       	ldd	r25, Z+1	; 0x01
    2732:	8d 93       	st	X+, r24
    2734:	9c 93       	st	X, r25
    2736:	fe 01       	movw	r30, r28
    2738:	e1 58       	subi	r30, 0x81	; 129
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 81       	ld	r24, Z
    273e:	91 81       	ldd	r25, Z+1	; 0x01
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <LCD_voidInit+0x1b4>
    2744:	fe 01       	movw	r30, r28
    2746:	e1 58       	subi	r30, 0x81	; 129
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	91 83       	std	Z+1, r25	; 0x01
    274c:	80 83       	st	Z, r24
		{
			/*step 1*/
			_delay_ms(30);

			u8commnad=0b00110000 |lcdarr[u8CntLoc].lcdswconfig.u8font <<2
    274e:	fe 01       	movw	r30, r28
    2750:	e2 57       	subi	r30, 0x72	; 114
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	80 81       	ld	r24, Z
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	c9 01       	movw	r24, r18
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	82 0f       	add	r24, r18
    2762:	93 1f       	adc	r25, r19
    2764:	88 0f       	add	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	88 0f       	add	r24, r24
    276a:	99 1f       	adc	r25, r25
    276c:	fc 01       	movw	r30, r24
    276e:	e4 5e       	subi	r30, 0xE4	; 228
    2770:	fe 4f       	sbci	r31, 0xFE	; 254
    2772:	80 81       	ld	r24, Z
    2774:	86 95       	lsr	r24
    2776:	86 95       	lsr	r24
    2778:	81 70       	andi	r24, 0x01	; 1
    277a:	88 2f       	mov	r24, r24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	88 0f       	add	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	48 2f       	mov	r20, r24
    2788:	40 63       	ori	r20, 0x30	; 48
    278a:	fe 01       	movw	r30, r28
    278c:	e2 57       	subi	r30, 0x72	; 114
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 81       	ld	r24, Z
    2792:	28 2f       	mov	r18, r24
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	c9 01       	movw	r24, r18
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	82 0f       	add	r24, r18
    279e:	93 1f       	adc	r25, r19
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	fc 01       	movw	r30, r24
    27aa:	e4 5e       	subi	r30, 0xE4	; 228
    27ac:	fe 4f       	sbci	r31, 0xFE	; 254
    27ae:	80 81       	ld	r24, Z
    27b0:	86 95       	lsr	r24
    27b2:	81 70       	andi	r24, 0x01	; 1
    27b4:	88 2f       	mov	r24, r24
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	88 0f       	add	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	88 0f       	add	r24, r24
    27be:	99 1f       	adc	r25, r25
    27c0:	88 0f       	add	r24, r24
    27c2:	99 1f       	adc	r25, r25
    27c4:	84 2b       	or	r24, r20
    27c6:	fe 01       	movw	r30, r28
    27c8:	e3 57       	subi	r30, 0x73	; 115
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	80 83       	st	Z, r24
					|lcdarr[u8CntLoc].lcdswconfig.u8line<<3 ;
			/* send command */
			voidWriteCmd(u8CntLoc,u8commnad);
    27ce:	fe 01       	movw	r30, r28
    27d0:	e2 57       	subi	r30, 0x72	; 114
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	de 01       	movw	r26, r28
    27d6:	a3 57       	subi	r26, 0x73	; 115
    27d8:	bf 4f       	sbci	r27, 0xFF	; 255
    27da:	80 81       	ld	r24, Z
    27dc:	6c 91       	ld	r22, X
    27de:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>
    27e2:	fe 01       	movw	r30, r28
    27e4:	e5 58       	subi	r30, 0x85	; 133
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	a0 e8       	ldi	r26, 0x80	; 128
    27ee:	bf e3       	ldi	r27, 0x3F	; 63
    27f0:	80 83       	st	Z, r24
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	a2 83       	std	Z+2, r26	; 0x02
    27f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f8:	8e 01       	movw	r16, r28
    27fa:	09 58       	subi	r16, 0x89	; 137
    27fc:	1f 4f       	sbci	r17, 0xFF	; 255
    27fe:	fe 01       	movw	r30, r28
    2800:	e5 58       	subi	r30, 0x85	; 133
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	60 81       	ld	r22, Z
    2806:	71 81       	ldd	r23, Z+1	; 0x01
    2808:	82 81       	ldd	r24, Z+2	; 0x02
    280a:	93 81       	ldd	r25, Z+3	; 0x03
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	4a ef       	ldi	r20, 0xFA	; 250
    2812:	54 e4       	ldi	r21, 0x44	; 68
    2814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	f8 01       	movw	r30, r16
    281e:	80 83       	st	Z, r24
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	a2 83       	std	Z+2, r26	; 0x02
    2824:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2826:	fe 01       	movw	r30, r28
    2828:	e9 58       	subi	r30, 0x89	; 137
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	60 81       	ld	r22, Z
    282e:	71 81       	ldd	r23, Z+1	; 0x01
    2830:	82 81       	ldd	r24, Z+2	; 0x02
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e8       	ldi	r20, 0x80	; 128
    283a:	5f e3       	ldi	r21, 0x3F	; 63
    283c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2840:	88 23       	and	r24, r24
    2842:	44 f4       	brge	.+16     	; 0x2854 <LCD_voidInit+0x2c8>
		__ticks = 1;
    2844:	fe 01       	movw	r30, r28
    2846:	eb 58       	subi	r30, 0x8B	; 139
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	80 83       	st	Z, r24
    2852:	64 c0       	rjmp	.+200    	; 0x291c <LCD_voidInit+0x390>
	else if (__tmp > 65535)
    2854:	fe 01       	movw	r30, r28
    2856:	e9 58       	subi	r30, 0x89	; 137
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	3f ef       	ldi	r19, 0xFF	; 255
    2866:	4f e7       	ldi	r20, 0x7F	; 127
    2868:	57 e4       	ldi	r21, 0x47	; 71
    286a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    286e:	18 16       	cp	r1, r24
    2870:	0c f0       	brlt	.+2      	; 0x2874 <LCD_voidInit+0x2e8>
    2872:	43 c0       	rjmp	.+134    	; 0x28fa <LCD_voidInit+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2874:	fe 01       	movw	r30, r28
    2876:	e5 58       	subi	r30, 0x85	; 133
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	60 81       	ld	r22, Z
    287c:	71 81       	ldd	r23, Z+1	; 0x01
    287e:	82 81       	ldd	r24, Z+2	; 0x02
    2880:	93 81       	ldd	r25, Z+3	; 0x03
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e2       	ldi	r20, 0x20	; 32
    2888:	51 e4       	ldi	r21, 0x41	; 65
    288a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	8e 01       	movw	r16, r28
    2894:	0b 58       	subi	r16, 0x8B	; 139
    2896:	1f 4f       	sbci	r17, 0xFF	; 255
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	f8 01       	movw	r30, r16
    28a6:	91 83       	std	Z+1, r25	; 0x01
    28a8:	80 83       	st	Z, r24
    28aa:	1f c0       	rjmp	.+62     	; 0x28ea <LCD_voidInit+0x35e>
    28ac:	fe 01       	movw	r30, r28
    28ae:	ed 58       	subi	r30, 0x8D	; 141
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	88 ec       	ldi	r24, 0xC8	; 200
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	80 83       	st	Z, r24
    28ba:	fe 01       	movw	r30, r28
    28bc:	ed 58       	subi	r30, 0x8D	; 141
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 81       	ld	r24, Z
    28c2:	91 81       	ldd	r25, Z+1	; 0x01
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <LCD_voidInit+0x338>
    28c8:	fe 01       	movw	r30, r28
    28ca:	ed 58       	subi	r30, 0x8D	; 141
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	91 83       	std	Z+1, r25	; 0x01
    28d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d2:	de 01       	movw	r26, r28
    28d4:	ab 58       	subi	r26, 0x8B	; 139
    28d6:	bf 4f       	sbci	r27, 0xFF	; 255
    28d8:	fe 01       	movw	r30, r28
    28da:	eb 58       	subi	r30, 0x8B	; 139
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	80 81       	ld	r24, Z
    28e0:	91 81       	ldd	r25, Z+1	; 0x01
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	11 96       	adiw	r26, 0x01	; 1
    28e6:	9c 93       	st	X, r25
    28e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ea:	fe 01       	movw	r30, r28
    28ec:	eb 58       	subi	r30, 0x8B	; 139
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	80 81       	ld	r24, Z
    28f2:	91 81       	ldd	r25, Z+1	; 0x01
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	d1 f6       	brne	.-76     	; 0x28ac <LCD_voidInit+0x320>
    28f8:	27 c0       	rjmp	.+78     	; 0x2948 <LCD_voidInit+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fa:	8e 01       	movw	r16, r28
    28fc:	0b 58       	subi	r16, 0x8B	; 139
    28fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2900:	fe 01       	movw	r30, r28
    2902:	e9 58       	subi	r30, 0x89	; 137
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	60 81       	ld	r22, Z
    2908:	71 81       	ldd	r23, Z+1	; 0x01
    290a:	82 81       	ldd	r24, Z+2	; 0x02
    290c:	93 81       	ldd	r25, Z+3	; 0x03
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	f8 01       	movw	r30, r16
    2918:	91 83       	std	Z+1, r25	; 0x01
    291a:	80 83       	st	Z, r24
    291c:	de 01       	movw	r26, r28
    291e:	af 58       	subi	r26, 0x8F	; 143
    2920:	bf 4f       	sbci	r27, 0xFF	; 255
    2922:	fe 01       	movw	r30, r28
    2924:	eb 58       	subi	r30, 0x8B	; 139
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	80 81       	ld	r24, Z
    292a:	91 81       	ldd	r25, Z+1	; 0x01
    292c:	8d 93       	st	X+, r24
    292e:	9c 93       	st	X, r25
    2930:	fe 01       	movw	r30, r28
    2932:	ef 58       	subi	r30, 0x8F	; 143
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	80 81       	ld	r24, Z
    2938:	91 81       	ldd	r25, Z+1	; 0x01
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <LCD_voidInit+0x3ae>
    293e:	fe 01       	movw	r30, r28
    2940:	ef 58       	subi	r30, 0x8F	; 143
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	80 83       	st	Z, r24
			/*more than 39 micro*/
			_delay_ms(1);
			u8commnad=0b00001000 |lcdarr[u8CntLoc].lcdswconfig.u8display<<2 |
    2948:	fe 01       	movw	r30, r28
    294a:	e2 57       	subi	r30, 0x72	; 114
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	80 81       	ld	r24, Z
    2950:	28 2f       	mov	r18, r24
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	c9 01       	movw	r24, r18
    2956:	88 0f       	add	r24, r24
    2958:	99 1f       	adc	r25, r25
    295a:	82 0f       	add	r24, r18
    295c:	93 1f       	adc	r25, r19
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	88 0f       	add	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	fc 01       	movw	r30, r24
    2968:	e4 5e       	subi	r30, 0xE4	; 228
    296a:	fe 4f       	sbci	r31, 0xFE	; 254
    296c:	80 81       	ld	r24, Z
    296e:	82 95       	swap	r24
    2970:	86 95       	lsr	r24
    2972:	86 95       	lsr	r24
    2974:	83 70       	andi	r24, 0x03	; 3
    2976:	81 70       	andi	r24, 0x01	; 1
    2978:	88 2f       	mov	r24, r24
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	88 0f       	add	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	88 0f       	add	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	48 2f       	mov	r20, r24
    2986:	48 60       	ori	r20, 0x08	; 8
    2988:	fe 01       	movw	r30, r28
    298a:	e2 57       	subi	r30, 0x72	; 114
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	80 81       	ld	r24, Z
    2990:	28 2f       	mov	r18, r24
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	c9 01       	movw	r24, r18
    2996:	88 0f       	add	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	82 0f       	add	r24, r18
    299c:	93 1f       	adc	r25, r19
    299e:	88 0f       	add	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	88 0f       	add	r24, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	fc 01       	movw	r30, r24
    29a8:	e4 5e       	subi	r30, 0xE4	; 228
    29aa:	fe 4f       	sbci	r31, 0xFE	; 254
    29ac:	80 81       	ld	r24, Z
    29ae:	86 95       	lsr	r24
    29b0:	86 95       	lsr	r24
    29b2:	86 95       	lsr	r24
    29b4:	81 70       	andi	r24, 0x01	; 1
    29b6:	88 2f       	mov	r24, r24
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	88 0f       	add	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	48 2b       	or	r20, r24
    29c0:	fe 01       	movw	r30, r28
    29c2:	e2 57       	subi	r30, 0x72	; 114
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 81       	ld	r24, Z
    29c8:	28 2f       	mov	r18, r24
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	c9 01       	movw	r24, r18
    29ce:	88 0f       	add	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	82 0f       	add	r24, r18
    29d4:	93 1f       	adc	r25, r19
    29d6:	88 0f       	add	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	88 0f       	add	r24, r24
    29dc:	99 1f       	adc	r25, r25
    29de:	fc 01       	movw	r30, r24
    29e0:	e4 5e       	subi	r30, 0xE4	; 228
    29e2:	fe 4f       	sbci	r31, 0xFE	; 254
    29e4:	80 81       	ld	r24, Z
    29e6:	82 95       	swap	r24
    29e8:	8f 70       	andi	r24, 0x0F	; 15
    29ea:	81 70       	andi	r24, 0x01	; 1
    29ec:	84 2b       	or	r24, r20
    29ee:	fe 01       	movw	r30, r28
    29f0:	e3 57       	subi	r30, 0x73	; 115
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	80 83       	st	Z, r24
									lcdarr[u8CntLoc].lcdswconfig.u8coursorstate<<1 |
									lcdarr[u8CntLoc].lcdswconfig.u8coursorblink<<0 ;

			voidWriteCmd(u8CntLoc,u8commnad);
    29f6:	fe 01       	movw	r30, r28
    29f8:	e2 57       	subi	r30, 0x72	; 114
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	de 01       	movw	r26, r28
    29fe:	a3 57       	subi	r26, 0x73	; 115
    2a00:	bf 4f       	sbci	r27, 0xFF	; 255
    2a02:	80 81       	ld	r24, Z
    2a04:	6c 91       	ld	r22, X
    2a06:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e3 59       	subi	r30, 0x93	; 147
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	a0 e8       	ldi	r26, 0x80	; 128
    2a16:	bf e3       	ldi	r27, 0x3F	; 63
    2a18:	80 83       	st	Z, r24
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	a2 83       	std	Z+2, r26	; 0x02
    2a1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a20:	8e 01       	movw	r16, r28
    2a22:	07 59       	subi	r16, 0x97	; 151
    2a24:	1f 4f       	sbci	r17, 0xFF	; 255
    2a26:	fe 01       	movw	r30, r28
    2a28:	e3 59       	subi	r30, 0x93	; 147
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	60 81       	ld	r22, Z
    2a2e:	71 81       	ldd	r23, Z+1	; 0x01
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	93 81       	ldd	r25, Z+3	; 0x03
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4a ef       	ldi	r20, 0xFA	; 250
    2a3a:	54 e4       	ldi	r21, 0x44	; 68
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	f8 01       	movw	r30, r16
    2a46:	80 83       	st	Z, r24
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	a2 83       	std	Z+2, r26	; 0x02
    2a4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e7 59       	subi	r30, 0x97	; 151
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e8       	ldi	r20, 0x80	; 128
    2a62:	5f e3       	ldi	r21, 0x3F	; 63
    2a64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a68:	88 23       	and	r24, r24
    2a6a:	44 f4       	brge	.+16     	; 0x2a7c <LCD_voidInit+0x4f0>
		__ticks = 1;
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e9 59       	subi	r30, 0x99	; 153
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	80 83       	st	Z, r24
    2a7a:	64 c0       	rjmp	.+200    	; 0x2b44 <LCD_voidInit+0x5b8>
	else if (__tmp > 65535)
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e7 59       	subi	r30, 0x97	; 151
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	60 81       	ld	r22, Z
    2a84:	71 81       	ldd	r23, Z+1	; 0x01
    2a86:	82 81       	ldd	r24, Z+2	; 0x02
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	3f ef       	ldi	r19, 0xFF	; 255
    2a8e:	4f e7       	ldi	r20, 0x7F	; 127
    2a90:	57 e4       	ldi	r21, 0x47	; 71
    2a92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a96:	18 16       	cp	r1, r24
    2a98:	0c f0       	brlt	.+2      	; 0x2a9c <LCD_voidInit+0x510>
    2a9a:	43 c0       	rjmp	.+134    	; 0x2b22 <LCD_voidInit+0x596>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e3 59       	subi	r30, 0x93	; 147
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e2       	ldi	r20, 0x20	; 32
    2ab0:	51 e4       	ldi	r21, 0x41	; 65
    2ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	8e 01       	movw	r16, r28
    2abc:	09 59       	subi	r16, 0x99	; 153
    2abe:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac0:	bc 01       	movw	r22, r24
    2ac2:	cd 01       	movw	r24, r26
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	f8 01       	movw	r30, r16
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
    2ad2:	1f c0       	rjmp	.+62     	; 0x2b12 <LCD_voidInit+0x586>
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	eb 59       	subi	r30, 0x9B	; 155
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	88 ec       	ldi	r24, 0xC8	; 200
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	80 83       	st	Z, r24
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	eb 59       	subi	r30, 0x9B	; 155
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	80 81       	ld	r24, Z
    2aea:	91 81       	ldd	r25, Z+1	; 0x01
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	f1 f7       	brne	.-4      	; 0x2aec <LCD_voidInit+0x560>
    2af0:	fe 01       	movw	r30, r28
    2af2:	eb 59       	subi	r30, 0x9B	; 155
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	91 83       	std	Z+1, r25	; 0x01
    2af8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afa:	de 01       	movw	r26, r28
    2afc:	a9 59       	subi	r26, 0x99	; 153
    2afe:	bf 4f       	sbci	r27, 0xFF	; 255
    2b00:	fe 01       	movw	r30, r28
    2b02:	e9 59       	subi	r30, 0x99	; 153
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	80 81       	ld	r24, Z
    2b08:	91 81       	ldd	r25, Z+1	; 0x01
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	11 96       	adiw	r26, 0x01	; 1
    2b0e:	9c 93       	st	X, r25
    2b10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b12:	fe 01       	movw	r30, r28
    2b14:	e9 59       	subi	r30, 0x99	; 153
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	80 81       	ld	r24, Z
    2b1a:	91 81       	ldd	r25, Z+1	; 0x01
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	d1 f6       	brne	.-76     	; 0x2ad4 <LCD_voidInit+0x548>
    2b20:	27 c0       	rjmp	.+78     	; 0x2b70 <LCD_voidInit+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b22:	8e 01       	movw	r16, r28
    2b24:	09 59       	subi	r16, 0x99	; 153
    2b26:	1f 4f       	sbci	r17, 0xFF	; 255
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e7 59       	subi	r30, 0x97	; 151
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	60 81       	ld	r22, Z
    2b30:	71 81       	ldd	r23, Z+1	; 0x01
    2b32:	82 81       	ldd	r24, Z+2	; 0x02
    2b34:	93 81       	ldd	r25, Z+3	; 0x03
    2b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	f8 01       	movw	r30, r16
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	80 83       	st	Z, r24
    2b44:	de 01       	movw	r26, r28
    2b46:	ad 59       	subi	r26, 0x9D	; 157
    2b48:	bf 4f       	sbci	r27, 0xFF	; 255
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e9 59       	subi	r30, 0x99	; 153
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	8d 93       	st	X+, r24
    2b56:	9c 93       	st	X, r25
    2b58:	fe 01       	movw	r30, r28
    2b5a:	ed 59       	subi	r30, 0x9D	; 157
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	80 81       	ld	r24, Z
    2b60:	91 81       	ldd	r25, Z+1	; 0x01
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <LCD_voidInit+0x5d6>
    2b66:	fe 01       	movw	r30, r28
    2b68:	ed 59       	subi	r30, 0x9D	; 157
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	91 83       	std	Z+1, r25	; 0x01
    2b6e:	80 83       	st	Z, r24
			_delay_ms(1);
			voidWriteCmd(u8CntLoc,0x01);
    2b70:	fe 01       	movw	r30, r28
    2b72:	e2 57       	subi	r30, 0x72	; 114
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	80 81       	ld	r24, Z
    2b78:	61 e0       	ldi	r22, 0x01	; 1
    2b7a:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e1 5a       	subi	r30, 0xA1	; 161
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	a0 e4       	ldi	r26, 0x40	; 64
    2b8a:	b0 e4       	ldi	r27, 0x40	; 64
    2b8c:	80 83       	st	Z, r24
    2b8e:	91 83       	std	Z+1, r25	; 0x01
    2b90:	a2 83       	std	Z+2, r26	; 0x02
    2b92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b94:	8e 01       	movw	r16, r28
    2b96:	05 5a       	subi	r16, 0xA5	; 165
    2b98:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	e1 5a       	subi	r30, 0xA1	; 161
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	60 81       	ld	r22, Z
    2ba2:	71 81       	ldd	r23, Z+1	; 0x01
    2ba4:	82 81       	ldd	r24, Z+2	; 0x02
    2ba6:	93 81       	ldd	r25, Z+3	; 0x03
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	4a ef       	ldi	r20, 0xFA	; 250
    2bae:	54 e4       	ldi	r21, 0x44	; 68
    2bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	f8 01       	movw	r30, r16
    2bba:	80 83       	st	Z, r24
    2bbc:	91 83       	std	Z+1, r25	; 0x01
    2bbe:	a2 83       	std	Z+2, r26	; 0x02
    2bc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e5 5a       	subi	r30, 0xA5	; 165
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e8       	ldi	r20, 0x80	; 128
    2bd6:	5f e3       	ldi	r21, 0x3F	; 63
    2bd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bdc:	88 23       	and	r24, r24
    2bde:	44 f4       	brge	.+16     	; 0x2bf0 <LCD_voidInit+0x664>
		__ticks = 1;
    2be0:	fe 01       	movw	r30, r28
    2be2:	e7 5a       	subi	r30, 0xA7	; 167
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	91 83       	std	Z+1, r25	; 0x01
    2bec:	80 83       	st	Z, r24
    2bee:	64 c0       	rjmp	.+200    	; 0x2cb8 <LCD_voidInit+0x72c>
	else if (__tmp > 65535)
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	e5 5a       	subi	r30, 0xA5	; 165
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	60 81       	ld	r22, Z
    2bf8:	71 81       	ldd	r23, Z+1	; 0x01
    2bfa:	82 81       	ldd	r24, Z+2	; 0x02
    2bfc:	93 81       	ldd	r25, Z+3	; 0x03
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	3f ef       	ldi	r19, 0xFF	; 255
    2c02:	4f e7       	ldi	r20, 0x7F	; 127
    2c04:	57 e4       	ldi	r21, 0x47	; 71
    2c06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c0a:	18 16       	cp	r1, r24
    2c0c:	0c f0       	brlt	.+2      	; 0x2c10 <LCD_voidInit+0x684>
    2c0e:	43 c0       	rjmp	.+134    	; 0x2c96 <LCD_voidInit+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c10:	fe 01       	movw	r30, r28
    2c12:	e1 5a       	subi	r30, 0xA1	; 161
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	60 81       	ld	r22, Z
    2c18:	71 81       	ldd	r23, Z+1	; 0x01
    2c1a:	82 81       	ldd	r24, Z+2	; 0x02
    2c1c:	93 81       	ldd	r25, Z+3	; 0x03
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	40 e2       	ldi	r20, 0x20	; 32
    2c24:	51 e4       	ldi	r21, 0x41	; 65
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	8e 01       	movw	r16, r28
    2c30:	07 5a       	subi	r16, 0xA7	; 167
    2c32:	1f 4f       	sbci	r17, 0xFF	; 255
    2c34:	bc 01       	movw	r22, r24
    2c36:	cd 01       	movw	r24, r26
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	f8 01       	movw	r30, r16
    2c42:	91 83       	std	Z+1, r25	; 0x01
    2c44:	80 83       	st	Z, r24
    2c46:	1f c0       	rjmp	.+62     	; 0x2c86 <LCD_voidInit+0x6fa>
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e9 5a       	subi	r30, 0xA9	; 169
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	88 ec       	ldi	r24, 0xC8	; 200
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	91 83       	std	Z+1, r25	; 0x01
    2c54:	80 83       	st	Z, r24
    2c56:	fe 01       	movw	r30, r28
    2c58:	e9 5a       	subi	r30, 0xA9	; 169
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	80 81       	ld	r24, Z
    2c5e:	91 81       	ldd	r25, Z+1	; 0x01
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	f1 f7       	brne	.-4      	; 0x2c60 <LCD_voidInit+0x6d4>
    2c64:	fe 01       	movw	r30, r28
    2c66:	e9 5a       	subi	r30, 0xA9	; 169
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6e:	de 01       	movw	r26, r28
    2c70:	a7 5a       	subi	r26, 0xA7	; 167
    2c72:	bf 4f       	sbci	r27, 0xFF	; 255
    2c74:	fe 01       	movw	r30, r28
    2c76:	e7 5a       	subi	r30, 0xA7	; 167
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	80 81       	ld	r24, Z
    2c7c:	91 81       	ldd	r25, Z+1	; 0x01
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	11 96       	adiw	r26, 0x01	; 1
    2c82:	9c 93       	st	X, r25
    2c84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c86:	fe 01       	movw	r30, r28
    2c88:	e7 5a       	subi	r30, 0xA7	; 167
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	80 81       	ld	r24, Z
    2c8e:	91 81       	ldd	r25, Z+1	; 0x01
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	d1 f6       	brne	.-76     	; 0x2c48 <LCD_voidInit+0x6bc>
    2c94:	27 c0       	rjmp	.+78     	; 0x2ce4 <LCD_voidInit+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c96:	8e 01       	movw	r16, r28
    2c98:	07 5a       	subi	r16, 0xA7	; 167
    2c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e5 5a       	subi	r30, 0xA5	; 165
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	60 81       	ld	r22, Z
    2ca4:	71 81       	ldd	r23, Z+1	; 0x01
    2ca6:	82 81       	ldd	r24, Z+2	; 0x02
    2ca8:	93 81       	ldd	r25, Z+3	; 0x03
    2caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	f8 01       	movw	r30, r16
    2cb4:	91 83       	std	Z+1, r25	; 0x01
    2cb6:	80 83       	st	Z, r24
    2cb8:	de 01       	movw	r26, r28
    2cba:	ab 5a       	subi	r26, 0xAB	; 171
    2cbc:	bf 4f       	sbci	r27, 0xFF	; 255
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e7 5a       	subi	r30, 0xA7	; 167
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	80 81       	ld	r24, Z
    2cc6:	91 81       	ldd	r25, Z+1	; 0x01
    2cc8:	8d 93       	st	X+, r24
    2cca:	9c 93       	st	X, r25
    2ccc:	fe 01       	movw	r30, r28
    2cce:	eb 5a       	subi	r30, 0xAB	; 171
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 81       	ld	r24, Z
    2cd4:	91 81       	ldd	r25, Z+1	; 0x01
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <LCD_voidInit+0x74a>
    2cda:	fe 01       	movw	r30, r28
    2cdc:	eb 5a       	subi	r30, 0xAB	; 171
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	91 83       	std	Z+1, r25	; 0x01
    2ce2:	80 83       	st	Z, r24
			_delay_ms(3);
			u8commnad=0b00000100 | lcdarr[u8CntLoc].lcdswconfig.u8direction<<1 |
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	e2 57       	subi	r30, 0x72	; 114
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	80 81       	ld	r24, Z
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	c9 01       	movw	r24, r18
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	82 0f       	add	r24, r18
    2cf8:	93 1f       	adc	r25, r19
    2cfa:	88 0f       	add	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	88 0f       	add	r24, r24
    2d00:	99 1f       	adc	r25, r25
    2d02:	fc 01       	movw	r30, r24
    2d04:	e4 5e       	subi	r30, 0xE4	; 228
    2d06:	fe 4f       	sbci	r31, 0xFE	; 254
    2d08:	80 81       	ld	r24, Z
    2d0a:	88 1f       	adc	r24, r24
    2d0c:	88 27       	eor	r24, r24
    2d0e:	88 1f       	adc	r24, r24
    2d10:	88 2f       	mov	r24, r24
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	48 2f       	mov	r20, r24
    2d1a:	44 60       	ori	r20, 0x04	; 4
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e2 57       	subi	r30, 0x72	; 114
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	80 81       	ld	r24, Z
    2d24:	28 2f       	mov	r18, r24
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	c9 01       	movw	r24, r18
    2d2a:	88 0f       	add	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	82 0f       	add	r24, r18
    2d30:	93 1f       	adc	r25, r19
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	88 0f       	add	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	e4 5e       	subi	r30, 0xE4	; 228
    2d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d40:	80 81       	ld	r24, Z
    2d42:	82 95       	swap	r24
    2d44:	86 95       	lsr	r24
    2d46:	87 70       	andi	r24, 0x07	; 7
    2d48:	81 70       	andi	r24, 0x01	; 1
    2d4a:	84 2b       	or	r24, r20
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e3 57       	subi	r30, 0x73	; 115
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	80 83       	st	Z, r24

								lcdarr[u8CntLoc].lcdswconfig.u8shift<<0;


			voidWriteCmd(u8CntLoc,u8commnad);
    2d54:	fe 01       	movw	r30, r28
    2d56:	e2 57       	subi	r30, 0x72	; 114
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	de 01       	movw	r26, r28
    2d5c:	a3 57       	subi	r26, 0x73	; 115
    2d5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d60:	80 81       	ld	r24, Z
    2d62:	6c 91       	ld	r22, X
    2d64:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>
    2d68:	fe 01       	movw	r30, r28
    2d6a:	ef 5a       	subi	r30, 0xAF	; 175
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	a0 e4       	ldi	r26, 0x40	; 64
    2d74:	b0 e4       	ldi	r27, 0x40	; 64
    2d76:	80 83       	st	Z, r24
    2d78:	91 83       	std	Z+1, r25	; 0x01
    2d7a:	a2 83       	std	Z+2, r26	; 0x02
    2d7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7e:	8e 01       	movw	r16, r28
    2d80:	03 5b       	subi	r16, 0xB3	; 179
    2d82:	1f 4f       	sbci	r17, 0xFF	; 255
    2d84:	fe 01       	movw	r30, r28
    2d86:	ef 5a       	subi	r30, 0xAF	; 175
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	60 81       	ld	r22, Z
    2d8c:	71 81       	ldd	r23, Z+1	; 0x01
    2d8e:	82 81       	ldd	r24, Z+2	; 0x02
    2d90:	93 81       	ldd	r25, Z+3	; 0x03
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	4a ef       	ldi	r20, 0xFA	; 250
    2d98:	54 e4       	ldi	r21, 0x44	; 68
    2d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	f8 01       	movw	r30, r16
    2da4:	80 83       	st	Z, r24
    2da6:	91 83       	std	Z+1, r25	; 0x01
    2da8:	a2 83       	std	Z+2, r26	; 0x02
    2daa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dac:	fe 01       	movw	r30, r28
    2dae:	e3 5b       	subi	r30, 0xB3	; 179
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	60 81       	ld	r22, Z
    2db4:	71 81       	ldd	r23, Z+1	; 0x01
    2db6:	82 81       	ldd	r24, Z+2	; 0x02
    2db8:	93 81       	ldd	r25, Z+3	; 0x03
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e8       	ldi	r20, 0x80	; 128
    2dc0:	5f e3       	ldi	r21, 0x3F	; 63
    2dc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dc6:	88 23       	and	r24, r24
    2dc8:	44 f4       	brge	.+16     	; 0x2dda <LCD_voidInit+0x84e>
		__ticks = 1;
    2dca:	fe 01       	movw	r30, r28
    2dcc:	e5 5b       	subi	r30, 0xB5	; 181
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	91 83       	std	Z+1, r25	; 0x01
    2dd6:	80 83       	st	Z, r24
    2dd8:	64 c0       	rjmp	.+200    	; 0x2ea2 <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e3 5b       	subi	r30, 0xB3	; 179
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	60 81       	ld	r22, Z
    2de2:	71 81       	ldd	r23, Z+1	; 0x01
    2de4:	82 81       	ldd	r24, Z+2	; 0x02
    2de6:	93 81       	ldd	r25, Z+3	; 0x03
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	3f ef       	ldi	r19, 0xFF	; 255
    2dec:	4f e7       	ldi	r20, 0x7F	; 127
    2dee:	57 e4       	ldi	r21, 0x47	; 71
    2df0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2df4:	18 16       	cp	r1, r24
    2df6:	0c f0       	brlt	.+2      	; 0x2dfa <LCD_voidInit+0x86e>
    2df8:	43 c0       	rjmp	.+134    	; 0x2e80 <LCD_voidInit+0x8f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	ef 5a       	subi	r30, 0xAF	; 175
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	60 81       	ld	r22, Z
    2e02:	71 81       	ldd	r23, Z+1	; 0x01
    2e04:	82 81       	ldd	r24, Z+2	; 0x02
    2e06:	93 81       	ldd	r25, Z+3	; 0x03
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e2       	ldi	r20, 0x20	; 32
    2e0e:	51 e4       	ldi	r21, 0x41	; 65
    2e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	8e 01       	movw	r16, r28
    2e1a:	05 5b       	subi	r16, 0xB5	; 181
    2e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1e:	bc 01       	movw	r22, r24
    2e20:	cd 01       	movw	r24, r26
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	f8 01       	movw	r30, r16
    2e2c:	91 83       	std	Z+1, r25	; 0x01
    2e2e:	80 83       	st	Z, r24
    2e30:	1f c0       	rjmp	.+62     	; 0x2e70 <LCD_voidInit+0x8e4>
    2e32:	fe 01       	movw	r30, r28
    2e34:	e7 5b       	subi	r30, 0xB7	; 183
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	88 ec       	ldi	r24, 0xC8	; 200
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	91 83       	std	Z+1, r25	; 0x01
    2e3e:	80 83       	st	Z, r24
    2e40:	fe 01       	movw	r30, r28
    2e42:	e7 5b       	subi	r30, 0xB7	; 183
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	80 81       	ld	r24, Z
    2e48:	91 81       	ldd	r25, Z+1	; 0x01
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	f1 f7       	brne	.-4      	; 0x2e4a <LCD_voidInit+0x8be>
    2e4e:	fe 01       	movw	r30, r28
    2e50:	e7 5b       	subi	r30, 0xB7	; 183
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	91 83       	std	Z+1, r25	; 0x01
    2e56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e58:	de 01       	movw	r26, r28
    2e5a:	a5 5b       	subi	r26, 0xB5	; 181
    2e5c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e5e:	fe 01       	movw	r30, r28
    2e60:	e5 5b       	subi	r30, 0xB5	; 181
    2e62:	ff 4f       	sbci	r31, 0xFF	; 255
    2e64:	80 81       	ld	r24, Z
    2e66:	91 81       	ldd	r25, Z+1	; 0x01
    2e68:	01 97       	sbiw	r24, 0x01	; 1
    2e6a:	11 96       	adiw	r26, 0x01	; 1
    2e6c:	9c 93       	st	X, r25
    2e6e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e70:	fe 01       	movw	r30, r28
    2e72:	e5 5b       	subi	r30, 0xB5	; 181
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	80 81       	ld	r24, Z
    2e78:	91 81       	ldd	r25, Z+1	; 0x01
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	d1 f6       	brne	.-76     	; 0x2e32 <LCD_voidInit+0x8a6>
    2e7e:	b1 c3       	rjmp	.+1890   	; 0x35e2 <LCD_voidInit+0x1056>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e80:	8e 01       	movw	r16, r28
    2e82:	05 5b       	subi	r16, 0xB5	; 181
    2e84:	1f 4f       	sbci	r17, 0xFF	; 255
    2e86:	fe 01       	movw	r30, r28
    2e88:	e3 5b       	subi	r30, 0xB3	; 179
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	60 81       	ld	r22, Z
    2e8e:	71 81       	ldd	r23, Z+1	; 0x01
    2e90:	82 81       	ldd	r24, Z+2	; 0x02
    2e92:	93 81       	ldd	r25, Z+3	; 0x03
    2e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	f8 01       	movw	r30, r16
    2e9e:	91 83       	std	Z+1, r25	; 0x01
    2ea0:	80 83       	st	Z, r24
    2ea2:	de 01       	movw	r26, r28
    2ea4:	a9 5b       	subi	r26, 0xB9	; 185
    2ea6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	e5 5b       	subi	r30, 0xB5	; 181
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	80 81       	ld	r24, Z
    2eb0:	91 81       	ldd	r25, Z+1	; 0x01
    2eb2:	11 96       	adiw	r26, 0x01	; 1
    2eb4:	9c 93       	st	X, r25
    2eb6:	8e 93       	st	-X, r24
    2eb8:	fe 01       	movw	r30, r28
    2eba:	e9 5b       	subi	r30, 0xB9	; 185
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	80 81       	ld	r24, Z
    2ec0:	91 81       	ldd	r25, Z+1	; 0x01
    2ec2:	01 97       	sbiw	r24, 0x01	; 1
    2ec4:	f1 f7       	brne	.-4      	; 0x2ec2 <LCD_voidInit+0x936>
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	e9 5b       	subi	r30, 0xB9	; 185
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	91 83       	std	Z+1, r25	; 0x01
    2ece:	80 83       	st	Z, r24
    2ed0:	88 c3       	rjmp	.+1808   	; 0x35e2 <LCD_voidInit+0x1056>
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	ed 5b       	subi	r30, 0xBD	; 189
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	a0 ef       	ldi	r26, 0xF0	; 240
    2ede:	b1 e4       	ldi	r27, 0x41	; 65
    2ee0:	80 83       	st	Z, r24
    2ee2:	91 83       	std	Z+1, r25	; 0x01
    2ee4:	a2 83       	std	Z+2, r26	; 0x02
    2ee6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee8:	8e 01       	movw	r16, r28
    2eea:	01 5c       	subi	r16, 0xC1	; 193
    2eec:	1f 4f       	sbci	r17, 0xFF	; 255
    2eee:	fe 01       	movw	r30, r28
    2ef0:	ed 5b       	subi	r30, 0xBD	; 189
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	60 81       	ld	r22, Z
    2ef6:	71 81       	ldd	r23, Z+1	; 0x01
    2ef8:	82 81       	ldd	r24, Z+2	; 0x02
    2efa:	93 81       	ldd	r25, Z+3	; 0x03
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4a ef       	ldi	r20, 0xFA	; 250
    2f02:	54 e4       	ldi	r21, 0x44	; 68
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	f8 01       	movw	r30, r16
    2f0e:	80 83       	st	Z, r24
    2f10:	91 83       	std	Z+1, r25	; 0x01
    2f12:	a2 83       	std	Z+2, r26	; 0x02
    2f14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f16:	fe 01       	movw	r30, r28
    2f18:	ff 96       	adiw	r30, 0x3f	; 63
    2f1a:	60 81       	ld	r22, Z
    2f1c:	71 81       	ldd	r23, Z+1	; 0x01
    2f1e:	82 81       	ldd	r24, Z+2	; 0x02
    2f20:	93 81       	ldd	r25, Z+3	; 0x03
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	40 e8       	ldi	r20, 0x80	; 128
    2f28:	5f e3       	ldi	r21, 0x3F	; 63
    2f2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f2e:	88 23       	and	r24, r24
    2f30:	2c f4       	brge	.+10     	; 0x2f3c <LCD_voidInit+0x9b0>
		__ticks = 1;
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	9e af       	std	Y+62, r25	; 0x3e
    2f38:	8d af       	std	Y+61, r24	; 0x3d
    2f3a:	46 c0       	rjmp	.+140    	; 0x2fc8 <LCD_voidInit+0xa3c>
	else if (__tmp > 65535)
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	ff 96       	adiw	r30, 0x3f	; 63
    2f40:	60 81       	ld	r22, Z
    2f42:	71 81       	ldd	r23, Z+1	; 0x01
    2f44:	82 81       	ldd	r24, Z+2	; 0x02
    2f46:	93 81       	ldd	r25, Z+3	; 0x03
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	3f ef       	ldi	r19, 0xFF	; 255
    2f4c:	4f e7       	ldi	r20, 0x7F	; 127
    2f4e:	57 e4       	ldi	r21, 0x47	; 71
    2f50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f54:	18 16       	cp	r1, r24
    2f56:	64 f5       	brge	.+88     	; 0x2fb0 <LCD_voidInit+0xa24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f58:	fe 01       	movw	r30, r28
    2f5a:	ed 5b       	subi	r30, 0xBD	; 189
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	60 81       	ld	r22, Z
    2f60:	71 81       	ldd	r23, Z+1	; 0x01
    2f62:	82 81       	ldd	r24, Z+2	; 0x02
    2f64:	93 81       	ldd	r25, Z+3	; 0x03
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e2       	ldi	r20, 0x20	; 32
    2f6c:	51 e4       	ldi	r21, 0x41	; 65
    2f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	bc 01       	movw	r22, r24
    2f78:	cd 01       	movw	r24, r26
    2f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	9e af       	std	Y+62, r25	; 0x3e
    2f84:	8d af       	std	Y+61, r24	; 0x3d
    2f86:	0f c0       	rjmp	.+30     	; 0x2fa6 <LCD_voidInit+0xa1a>
    2f88:	88 ec       	ldi	r24, 0xC8	; 200
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	9c af       	std	Y+60, r25	; 0x3c
    2f8e:	8b af       	std	Y+59, r24	; 0x3b
    2f90:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f92:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	f1 f7       	brne	.-4      	; 0x2f94 <LCD_voidInit+0xa08>
    2f98:	9c af       	std	Y+60, r25	; 0x3c
    2f9a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	9e af       	std	Y+62, r25	; 0x3e
    2fa4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fa8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2faa:	00 97       	sbiw	r24, 0x00	; 0
    2fac:	69 f7       	brne	.-38     	; 0x2f88 <LCD_voidInit+0x9fc>
    2fae:	16 c0       	rjmp	.+44     	; 0x2fdc <LCD_voidInit+0xa50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	ff 96       	adiw	r30, 0x3f	; 63
    2fb4:	60 81       	ld	r22, Z
    2fb6:	71 81       	ldd	r23, Z+1	; 0x01
    2fb8:	82 81       	ldd	r24, Z+2	; 0x02
    2fba:	93 81       	ldd	r25, Z+3	; 0x03
    2fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	9e af       	std	Y+62, r25	; 0x3e
    2fc6:	8d af       	std	Y+61, r24	; 0x3d
    2fc8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fca:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fcc:	9a af       	std	Y+58, r25	; 0x3a
    2fce:	89 af       	std	Y+57, r24	; 0x39
    2fd0:	89 ad       	ldd	r24, Y+57	; 0x39
    2fd2:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	f1 f7       	brne	.-4      	; 0x2fd4 <LCD_voidInit+0xa48>
    2fd8:	9a af       	std	Y+58, r25	; 0x3a
    2fda:	89 af       	std	Y+57, r24	; 0x39
		}
		else
		{
			/*step 1*/
			_delay_ms(30);
			voidWriteCmd(u8CntLoc,0b00100000);
    2fdc:	fe 01       	movw	r30, r28
    2fde:	e2 57       	subi	r30, 0x72	; 114
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	80 81       	ld	r24, Z
    2fe4:	60 e2       	ldi	r22, 0x20	; 32
    2fe6:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>

			voidWriteCmd(u8CntLoc,0b00100000);
    2fea:	fe 01       	movw	r30, r28
    2fec:	e2 57       	subi	r30, 0x72	; 114
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	80 81       	ld	r24, Z
    2ff2:	60 e2       	ldi	r22, 0x20	; 32
    2ff4:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>

			u8commnad=0b00000000 |lcdarr[u8CntLoc].lcdswconfig.u8line<<7 |
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	e2 57       	subi	r30, 0x72	; 114
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	80 81       	ld	r24, Z
    3000:	28 2f       	mov	r18, r24
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	c9 01       	movw	r24, r18
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	82 0f       	add	r24, r18
    300c:	93 1f       	adc	r25, r19
    300e:	88 0f       	add	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	88 0f       	add	r24, r24
    3014:	99 1f       	adc	r25, r25
    3016:	fc 01       	movw	r30, r24
    3018:	e4 5e       	subi	r30, 0xE4	; 228
    301a:	fe 4f       	sbci	r31, 0xFE	; 254
    301c:	80 81       	ld	r24, Z
    301e:	86 95       	lsr	r24
    3020:	81 70       	andi	r24, 0x01	; 1
    3022:	88 2f       	mov	r24, r24
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	96 95       	lsr	r25
    3028:	98 2f       	mov	r25, r24
    302a:	88 27       	eor	r24, r24
    302c:	97 95       	ror	r25
    302e:	87 95       	ror	r24
    3030:	48 2f       	mov	r20, r24
    3032:	fe 01       	movw	r30, r28
    3034:	e2 57       	subi	r30, 0x72	; 114
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	80 81       	ld	r24, Z
    303a:	28 2f       	mov	r18, r24
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	c9 01       	movw	r24, r18
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	82 0f       	add	r24, r18
    3046:	93 1f       	adc	r25, r19
    3048:	88 0f       	add	r24, r24
    304a:	99 1f       	adc	r25, r25
    304c:	88 0f       	add	r24, r24
    304e:	99 1f       	adc	r25, r25
    3050:	fc 01       	movw	r30, r24
    3052:	e4 5e       	subi	r30, 0xE4	; 228
    3054:	fe 4f       	sbci	r31, 0xFE	; 254
    3056:	80 81       	ld	r24, Z
    3058:	86 95       	lsr	r24
    305a:	86 95       	lsr	r24
    305c:	81 70       	andi	r24, 0x01	; 1
    305e:	88 2f       	mov	r24, r24
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	00 24       	eor	r0, r0
    3064:	96 95       	lsr	r25
    3066:	87 95       	ror	r24
    3068:	07 94       	ror	r0
    306a:	96 95       	lsr	r25
    306c:	87 95       	ror	r24
    306e:	07 94       	ror	r0
    3070:	98 2f       	mov	r25, r24
    3072:	80 2d       	mov	r24, r0
    3074:	84 2b       	or	r24, r20
    3076:	fe 01       	movw	r30, r28
    3078:	e3 57       	subi	r30, 0x73	; 115
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	80 83       	st	Z, r24
			lcdarr[u8CntLoc].lcdswconfig.u8font <<6 ;

			voidWriteCmd(u8CntLoc,u8commnad);
    307e:	fe 01       	movw	r30, r28
    3080:	e2 57       	subi	r30, 0x72	; 114
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	de 01       	movw	r26, r28
    3086:	a3 57       	subi	r26, 0x73	; 115
    3088:	bf 4f       	sbci	r27, 0xFF	; 255
    308a:	80 81       	ld	r24, Z
    308c:	6c 91       	ld	r22, X
    308e:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	a0 e8       	ldi	r26, 0x80	; 128
    3098:	bf e3       	ldi	r27, 0x3F	; 63
    309a:	8d ab       	std	Y+53, r24	; 0x35
    309c:	9e ab       	std	Y+54, r25	; 0x36
    309e:	af ab       	std	Y+55, r26	; 0x37
    30a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a2:	6d a9       	ldd	r22, Y+53	; 0x35
    30a4:	7e a9       	ldd	r23, Y+54	; 0x36
    30a6:	8f a9       	ldd	r24, Y+55	; 0x37
    30a8:	98 ad       	ldd	r25, Y+56	; 0x38
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	4a ef       	ldi	r20, 0xFA	; 250
    30b0:	54 e4       	ldi	r21, 0x44	; 68
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	89 ab       	std	Y+49, r24	; 0x31
    30bc:	9a ab       	std	Y+50, r25	; 0x32
    30be:	ab ab       	std	Y+51, r26	; 0x33
    30c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30c2:	69 a9       	ldd	r22, Y+49	; 0x31
    30c4:	7a a9       	ldd	r23, Y+50	; 0x32
    30c6:	8b a9       	ldd	r24, Y+51	; 0x33
    30c8:	9c a9       	ldd	r25, Y+52	; 0x34
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	40 e8       	ldi	r20, 0x80	; 128
    30d0:	5f e3       	ldi	r21, 0x3F	; 63
    30d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30d6:	88 23       	and	r24, r24
    30d8:	2c f4       	brge	.+10     	; 0x30e4 <LCD_voidInit+0xb58>
		__ticks = 1;
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	98 ab       	std	Y+48, r25	; 0x30
    30e0:	8f a7       	std	Y+47, r24	; 0x2f
    30e2:	3f c0       	rjmp	.+126    	; 0x3162 <LCD_voidInit+0xbd6>
	else if (__tmp > 65535)
    30e4:	69 a9       	ldd	r22, Y+49	; 0x31
    30e6:	7a a9       	ldd	r23, Y+50	; 0x32
    30e8:	8b a9       	ldd	r24, Y+51	; 0x33
    30ea:	9c a9       	ldd	r25, Y+52	; 0x34
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	3f ef       	ldi	r19, 0xFF	; 255
    30f0:	4f e7       	ldi	r20, 0x7F	; 127
    30f2:	57 e4       	ldi	r21, 0x47	; 71
    30f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30f8:	18 16       	cp	r1, r24
    30fa:	4c f5       	brge	.+82     	; 0x314e <LCD_voidInit+0xbc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30fc:	6d a9       	ldd	r22, Y+53	; 0x35
    30fe:	7e a9       	ldd	r23, Y+54	; 0x36
    3100:	8f a9       	ldd	r24, Y+55	; 0x37
    3102:	98 ad       	ldd	r25, Y+56	; 0x38
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	40 e2       	ldi	r20, 0x20	; 32
    310a:	51 e4       	ldi	r21, 0x41	; 65
    310c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	bc 01       	movw	r22, r24
    3116:	cd 01       	movw	r24, r26
    3118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	98 ab       	std	Y+48, r25	; 0x30
    3122:	8f a7       	std	Y+47, r24	; 0x2f
    3124:	0f c0       	rjmp	.+30     	; 0x3144 <LCD_voidInit+0xbb8>
    3126:	88 ec       	ldi	r24, 0xC8	; 200
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	9e a7       	std	Y+46, r25	; 0x2e
    312c:	8d a7       	std	Y+45, r24	; 0x2d
    312e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3130:	9e a5       	ldd	r25, Y+46	; 0x2e
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	f1 f7       	brne	.-4      	; 0x3132 <LCD_voidInit+0xba6>
    3136:	9e a7       	std	Y+46, r25	; 0x2e
    3138:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313a:	8f a5       	ldd	r24, Y+47	; 0x2f
    313c:	98 a9       	ldd	r25, Y+48	; 0x30
    313e:	01 97       	sbiw	r24, 0x01	; 1
    3140:	98 ab       	std	Y+48, r25	; 0x30
    3142:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3144:	8f a5       	ldd	r24, Y+47	; 0x2f
    3146:	98 a9       	ldd	r25, Y+48	; 0x30
    3148:	00 97       	sbiw	r24, 0x00	; 0
    314a:	69 f7       	brne	.-38     	; 0x3126 <LCD_voidInit+0xb9a>
    314c:	14 c0       	rjmp	.+40     	; 0x3176 <LCD_voidInit+0xbea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    314e:	69 a9       	ldd	r22, Y+49	; 0x31
    3150:	7a a9       	ldd	r23, Y+50	; 0x32
    3152:	8b a9       	ldd	r24, Y+51	; 0x33
    3154:	9c a9       	ldd	r25, Y+52	; 0x34
    3156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	98 ab       	std	Y+48, r25	; 0x30
    3160:	8f a7       	std	Y+47, r24	; 0x2f
    3162:	8f a5       	ldd	r24, Y+47	; 0x2f
    3164:	98 a9       	ldd	r25, Y+48	; 0x30
    3166:	9c a7       	std	Y+44, r25	; 0x2c
    3168:	8b a7       	std	Y+43, r24	; 0x2b
    316a:	8b a5       	ldd	r24, Y+43	; 0x2b
    316c:	9c a5       	ldd	r25, Y+44	; 0x2c
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	f1 f7       	brne	.-4      	; 0x316e <LCD_voidInit+0xbe2>
    3172:	9c a7       	std	Y+44, r25	; 0x2c
    3174:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);

			voidWriteCmd(u8CntLoc,0b00000000);
    3176:	fe 01       	movw	r30, r28
    3178:	e2 57       	subi	r30, 0x72	; 114
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	80 81       	ld	r24, Z
    317e:	60 e0       	ldi	r22, 0x00	; 0
    3180:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>

			u8commnad=0b10000000 |lcdarr[u8CntLoc].lcdswconfig.u8display<<6|
    3184:	fe 01       	movw	r30, r28
    3186:	e2 57       	subi	r30, 0x72	; 114
    3188:	ff 4f       	sbci	r31, 0xFF	; 255
    318a:	80 81       	ld	r24, Z
    318c:	28 2f       	mov	r18, r24
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	c9 01       	movw	r24, r18
    3192:	88 0f       	add	r24, r24
    3194:	99 1f       	adc	r25, r25
    3196:	82 0f       	add	r24, r18
    3198:	93 1f       	adc	r25, r19
    319a:	88 0f       	add	r24, r24
    319c:	99 1f       	adc	r25, r25
    319e:	88 0f       	add	r24, r24
    31a0:	99 1f       	adc	r25, r25
    31a2:	fc 01       	movw	r30, r24
    31a4:	e4 5e       	subi	r30, 0xE4	; 228
    31a6:	fe 4f       	sbci	r31, 0xFE	; 254
    31a8:	80 81       	ld	r24, Z
    31aa:	82 95       	swap	r24
    31ac:	86 95       	lsr	r24
    31ae:	86 95       	lsr	r24
    31b0:	83 70       	andi	r24, 0x03	; 3
    31b2:	81 70       	andi	r24, 0x01	; 1
    31b4:	88 2f       	mov	r24, r24
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	00 24       	eor	r0, r0
    31ba:	96 95       	lsr	r25
    31bc:	87 95       	ror	r24
    31be:	07 94       	ror	r0
    31c0:	96 95       	lsr	r25
    31c2:	87 95       	ror	r24
    31c4:	07 94       	ror	r0
    31c6:	98 2f       	mov	r25, r24
    31c8:	80 2d       	mov	r24, r0
    31ca:	48 2f       	mov	r20, r24
    31cc:	40 68       	ori	r20, 0x80	; 128
    31ce:	fe 01       	movw	r30, r28
    31d0:	e2 57       	subi	r30, 0x72	; 114
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	80 81       	ld	r24, Z
    31d6:	28 2f       	mov	r18, r24
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	c9 01       	movw	r24, r18
    31dc:	88 0f       	add	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	82 0f       	add	r24, r18
    31e2:	93 1f       	adc	r25, r19
    31e4:	88 0f       	add	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	88 0f       	add	r24, r24
    31ea:	99 1f       	adc	r25, r25
    31ec:	fc 01       	movw	r30, r24
    31ee:	e4 5e       	subi	r30, 0xE4	; 228
    31f0:	fe 4f       	sbci	r31, 0xFE	; 254
    31f2:	80 81       	ld	r24, Z
    31f4:	86 95       	lsr	r24
    31f6:	86 95       	lsr	r24
    31f8:	86 95       	lsr	r24
    31fa:	81 70       	andi	r24, 0x01	; 1
    31fc:	88 2f       	mov	r24, r24
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	82 95       	swap	r24
    3206:	92 95       	swap	r25
    3208:	90 7f       	andi	r25, 0xF0	; 240
    320a:	98 27       	eor	r25, r24
    320c:	80 7f       	andi	r24, 0xF0	; 240
    320e:	98 27       	eor	r25, r24
    3210:	48 2b       	or	r20, r24
    3212:	fe 01       	movw	r30, r28
    3214:	e2 57       	subi	r30, 0x72	; 114
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	80 81       	ld	r24, Z
    321a:	28 2f       	mov	r18, r24
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	c9 01       	movw	r24, r18
    3220:	88 0f       	add	r24, r24
    3222:	99 1f       	adc	r25, r25
    3224:	82 0f       	add	r24, r18
    3226:	93 1f       	adc	r25, r19
    3228:	88 0f       	add	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	88 0f       	add	r24, r24
    322e:	99 1f       	adc	r25, r25
    3230:	fc 01       	movw	r30, r24
    3232:	e4 5e       	subi	r30, 0xE4	; 228
    3234:	fe 4f       	sbci	r31, 0xFE	; 254
    3236:	80 81       	ld	r24, Z
    3238:	82 95       	swap	r24
    323a:	8f 70       	andi	r24, 0x0F	; 15
    323c:	81 70       	andi	r24, 0x01	; 1
    323e:	88 2f       	mov	r24, r24
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	82 95       	swap	r24
    3244:	92 95       	swap	r25
    3246:	90 7f       	andi	r25, 0xF0	; 240
    3248:	98 27       	eor	r25, r24
    324a:	80 7f       	andi	r24, 0xF0	; 240
    324c:	98 27       	eor	r25, r24
    324e:	84 2b       	or	r24, r20
    3250:	fe 01       	movw	r30, r28
    3252:	e3 57       	subi	r30, 0x73	; 115
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	80 83       	st	Z, r24
			lcdarr[u8CntLoc].lcdswconfig.u8coursorstate<<5 |
			lcdarr[u8CntLoc].lcdswconfig.u8coursorblink<<4 ;
			voidWriteCmd(u8CntLoc,u8commnad);
    3258:	fe 01       	movw	r30, r28
    325a:	e2 57       	subi	r30, 0x72	; 114
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	de 01       	movw	r26, r28
    3260:	a3 57       	subi	r26, 0x73	; 115
    3262:	bf 4f       	sbci	r27, 0xFF	; 255
    3264:	80 81       	ld	r24, Z
    3266:	6c 91       	ld	r22, X
    3268:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	a0 e8       	ldi	r26, 0x80	; 128
    3272:	bf e3       	ldi	r27, 0x3F	; 63
    3274:	8f a3       	std	Y+39, r24	; 0x27
    3276:	98 a7       	std	Y+40, r25	; 0x28
    3278:	a9 a7       	std	Y+41, r26	; 0x29
    327a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    327c:	6f a1       	ldd	r22, Y+39	; 0x27
    327e:	78 a5       	ldd	r23, Y+40	; 0x28
    3280:	89 a5       	ldd	r24, Y+41	; 0x29
    3282:	9a a5       	ldd	r25, Y+42	; 0x2a
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	4a ef       	ldi	r20, 0xFA	; 250
    328a:	54 e4       	ldi	r21, 0x44	; 68
    328c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	8b a3       	std	Y+35, r24	; 0x23
    3296:	9c a3       	std	Y+36, r25	; 0x24
    3298:	ad a3       	std	Y+37, r26	; 0x25
    329a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    329c:	6b a1       	ldd	r22, Y+35	; 0x23
    329e:	7c a1       	ldd	r23, Y+36	; 0x24
    32a0:	8d a1       	ldd	r24, Y+37	; 0x25
    32a2:	9e a1       	ldd	r25, Y+38	; 0x26
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	40 e8       	ldi	r20, 0x80	; 128
    32aa:	5f e3       	ldi	r21, 0x3F	; 63
    32ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32b0:	88 23       	and	r24, r24
    32b2:	2c f4       	brge	.+10     	; 0x32be <LCD_voidInit+0xd32>
		__ticks = 1;
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	9a a3       	std	Y+34, r25	; 0x22
    32ba:	89 a3       	std	Y+33, r24	; 0x21
    32bc:	3f c0       	rjmp	.+126    	; 0x333c <LCD_voidInit+0xdb0>
	else if (__tmp > 65535)
    32be:	6b a1       	ldd	r22, Y+35	; 0x23
    32c0:	7c a1       	ldd	r23, Y+36	; 0x24
    32c2:	8d a1       	ldd	r24, Y+37	; 0x25
    32c4:	9e a1       	ldd	r25, Y+38	; 0x26
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	3f ef       	ldi	r19, 0xFF	; 255
    32ca:	4f e7       	ldi	r20, 0x7F	; 127
    32cc:	57 e4       	ldi	r21, 0x47	; 71
    32ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32d2:	18 16       	cp	r1, r24
    32d4:	4c f5       	brge	.+82     	; 0x3328 <LCD_voidInit+0xd9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d6:	6f a1       	ldd	r22, Y+39	; 0x27
    32d8:	78 a5       	ldd	r23, Y+40	; 0x28
    32da:	89 a5       	ldd	r24, Y+41	; 0x29
    32dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	40 e2       	ldi	r20, 0x20	; 32
    32e4:	51 e4       	ldi	r21, 0x41	; 65
    32e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	bc 01       	movw	r22, r24
    32f0:	cd 01       	movw	r24, r26
    32f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	9a a3       	std	Y+34, r25	; 0x22
    32fc:	89 a3       	std	Y+33, r24	; 0x21
    32fe:	0f c0       	rjmp	.+30     	; 0x331e <LCD_voidInit+0xd92>
    3300:	88 ec       	ldi	r24, 0xC8	; 200
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	98 a3       	std	Y+32, r25	; 0x20
    3306:	8f 8f       	std	Y+31, r24	; 0x1f
    3308:	8f 8d       	ldd	r24, Y+31	; 0x1f
    330a:	98 a1       	ldd	r25, Y+32	; 0x20
    330c:	01 97       	sbiw	r24, 0x01	; 1
    330e:	f1 f7       	brne	.-4      	; 0x330c <LCD_voidInit+0xd80>
    3310:	98 a3       	std	Y+32, r25	; 0x20
    3312:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3314:	89 a1       	ldd	r24, Y+33	; 0x21
    3316:	9a a1       	ldd	r25, Y+34	; 0x22
    3318:	01 97       	sbiw	r24, 0x01	; 1
    331a:	9a a3       	std	Y+34, r25	; 0x22
    331c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    331e:	89 a1       	ldd	r24, Y+33	; 0x21
    3320:	9a a1       	ldd	r25, Y+34	; 0x22
    3322:	00 97       	sbiw	r24, 0x00	; 0
    3324:	69 f7       	brne	.-38     	; 0x3300 <LCD_voidInit+0xd74>
    3326:	14 c0       	rjmp	.+40     	; 0x3350 <LCD_voidInit+0xdc4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3328:	6b a1       	ldd	r22, Y+35	; 0x23
    332a:	7c a1       	ldd	r23, Y+36	; 0x24
    332c:	8d a1       	ldd	r24, Y+37	; 0x25
    332e:	9e a1       	ldd	r25, Y+38	; 0x26
    3330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	9a a3       	std	Y+34, r25	; 0x22
    333a:	89 a3       	std	Y+33, r24	; 0x21
    333c:	89 a1       	ldd	r24, Y+33	; 0x21
    333e:	9a a1       	ldd	r25, Y+34	; 0x22
    3340:	9e 8f       	std	Y+30, r25	; 0x1e
    3342:	8d 8f       	std	Y+29, r24	; 0x1d
    3344:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3346:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	f1 f7       	brne	.-4      	; 0x3348 <LCD_voidInit+0xdbc>
    334c:	9e 8f       	std	Y+30, r25	; 0x1e
    334e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			voidWriteCmd(u8CntLoc,0b00000000);
    3350:	fe 01       	movw	r30, r28
    3352:	e2 57       	subi	r30, 0x72	; 114
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	80 81       	ld	r24, Z
    3358:	60 e0       	ldi	r22, 0x00	; 0
    335a:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>
			voidWriteCmd(u8CntLoc,0b00010000);
    335e:	fe 01       	movw	r30, r28
    3360:	e2 57       	subi	r30, 0x72	; 114
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 81       	ld	r24, Z
    3366:	60 e1       	ldi	r22, 0x10	; 16
    3368:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	a0 e4       	ldi	r26, 0x40	; 64
    3372:	b0 e4       	ldi	r27, 0x40	; 64
    3374:	89 8f       	std	Y+25, r24	; 0x19
    3376:	9a 8f       	std	Y+26, r25	; 0x1a
    3378:	ab 8f       	std	Y+27, r26	; 0x1b
    337a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337c:	69 8d       	ldd	r22, Y+25	; 0x19
    337e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3380:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3382:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	4a ef       	ldi	r20, 0xFA	; 250
    338a:	54 e4       	ldi	r21, 0x44	; 68
    338c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	8d 8b       	std	Y+21, r24	; 0x15
    3396:	9e 8b       	std	Y+22, r25	; 0x16
    3398:	af 8b       	std	Y+23, r26	; 0x17
    339a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    339c:	6d 89       	ldd	r22, Y+21	; 0x15
    339e:	7e 89       	ldd	r23, Y+22	; 0x16
    33a0:	8f 89       	ldd	r24, Y+23	; 0x17
    33a2:	98 8d       	ldd	r25, Y+24	; 0x18
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	40 e8       	ldi	r20, 0x80	; 128
    33aa:	5f e3       	ldi	r21, 0x3F	; 63
    33ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33b0:	88 23       	and	r24, r24
    33b2:	2c f4       	brge	.+10     	; 0x33be <LCD_voidInit+0xe32>
		__ticks = 1;
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	9c 8b       	std	Y+20, r25	; 0x14
    33ba:	8b 8b       	std	Y+19, r24	; 0x13
    33bc:	3f c0       	rjmp	.+126    	; 0x343c <LCD_voidInit+0xeb0>
	else if (__tmp > 65535)
    33be:	6d 89       	ldd	r22, Y+21	; 0x15
    33c0:	7e 89       	ldd	r23, Y+22	; 0x16
    33c2:	8f 89       	ldd	r24, Y+23	; 0x17
    33c4:	98 8d       	ldd	r25, Y+24	; 0x18
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	3f ef       	ldi	r19, 0xFF	; 255
    33ca:	4f e7       	ldi	r20, 0x7F	; 127
    33cc:	57 e4       	ldi	r21, 0x47	; 71
    33ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33d2:	18 16       	cp	r1, r24
    33d4:	4c f5       	brge	.+82     	; 0x3428 <LCD_voidInit+0xe9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d6:	69 8d       	ldd	r22, Y+25	; 0x19
    33d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	40 e2       	ldi	r20, 0x20	; 32
    33e4:	51 e4       	ldi	r21, 0x41	; 65
    33e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	bc 01       	movw	r22, r24
    33f0:	cd 01       	movw	r24, r26
    33f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	9c 8b       	std	Y+20, r25	; 0x14
    33fc:	8b 8b       	std	Y+19, r24	; 0x13
    33fe:	0f c0       	rjmp	.+30     	; 0x341e <LCD_voidInit+0xe92>
    3400:	88 ec       	ldi	r24, 0xC8	; 200
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	9a 8b       	std	Y+18, r25	; 0x12
    3406:	89 8b       	std	Y+17, r24	; 0x11
    3408:	89 89       	ldd	r24, Y+17	; 0x11
    340a:	9a 89       	ldd	r25, Y+18	; 0x12
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <LCD_voidInit+0xe80>
    3410:	9a 8b       	std	Y+18, r25	; 0x12
    3412:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3414:	8b 89       	ldd	r24, Y+19	; 0x13
    3416:	9c 89       	ldd	r25, Y+20	; 0x14
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	9c 8b       	std	Y+20, r25	; 0x14
    341c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341e:	8b 89       	ldd	r24, Y+19	; 0x13
    3420:	9c 89       	ldd	r25, Y+20	; 0x14
    3422:	00 97       	sbiw	r24, 0x00	; 0
    3424:	69 f7       	brne	.-38     	; 0x3400 <LCD_voidInit+0xe74>
    3426:	14 c0       	rjmp	.+40     	; 0x3450 <LCD_voidInit+0xec4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3428:	6d 89       	ldd	r22, Y+21	; 0x15
    342a:	7e 89       	ldd	r23, Y+22	; 0x16
    342c:	8f 89       	ldd	r24, Y+23	; 0x17
    342e:	98 8d       	ldd	r25, Y+24	; 0x18
    3430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	9c 8b       	std	Y+20, r25	; 0x14
    343a:	8b 8b       	std	Y+19, r24	; 0x13
    343c:	8b 89       	ldd	r24, Y+19	; 0x13
    343e:	9c 89       	ldd	r25, Y+20	; 0x14
    3440:	98 8b       	std	Y+16, r25	; 0x10
    3442:	8f 87       	std	Y+15, r24	; 0x0f
    3444:	8f 85       	ldd	r24, Y+15	; 0x0f
    3446:	98 89       	ldd	r25, Y+16	; 0x10
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	f1 f7       	brne	.-4      	; 0x3448 <LCD_voidInit+0xebc>
    344c:	98 8b       	std	Y+16, r25	; 0x10
    344e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(3);
			voidWriteCmd(u8CntLoc,0b00000000);
    3450:	fe 01       	movw	r30, r28
    3452:	e2 57       	subi	r30, 0x72	; 114
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	80 81       	ld	r24, Z
    3458:	60 e0       	ldi	r22, 0x00	; 0
    345a:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>

			u8commnad= 0b01000000 | lcdarr[u8CntLoc].lcdswconfig.u8direction<<5 |
    345e:	fe 01       	movw	r30, r28
    3460:	e2 57       	subi	r30, 0x72	; 114
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 81       	ld	r24, Z
    3466:	28 2f       	mov	r18, r24
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	c9 01       	movw	r24, r18
    346c:	88 0f       	add	r24, r24
    346e:	99 1f       	adc	r25, r25
    3470:	82 0f       	add	r24, r18
    3472:	93 1f       	adc	r25, r19
    3474:	88 0f       	add	r24, r24
    3476:	99 1f       	adc	r25, r25
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	fc 01       	movw	r30, r24
    347e:	e4 5e       	subi	r30, 0xE4	; 228
    3480:	fe 4f       	sbci	r31, 0xFE	; 254
    3482:	80 81       	ld	r24, Z
    3484:	88 1f       	adc	r24, r24
    3486:	88 27       	eor	r24, r24
    3488:	88 1f       	adc	r24, r24
    348a:	88 2f       	mov	r24, r24
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	88 0f       	add	r24, r24
    3490:	99 1f       	adc	r25, r25
    3492:	82 95       	swap	r24
    3494:	92 95       	swap	r25
    3496:	90 7f       	andi	r25, 0xF0	; 240
    3498:	98 27       	eor	r25, r24
    349a:	80 7f       	andi	r24, 0xF0	; 240
    349c:	98 27       	eor	r25, r24
    349e:	48 2f       	mov	r20, r24
    34a0:	40 64       	ori	r20, 0x40	; 64
    34a2:	fe 01       	movw	r30, r28
    34a4:	e2 57       	subi	r30, 0x72	; 114
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	80 81       	ld	r24, Z
    34aa:	28 2f       	mov	r18, r24
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	c9 01       	movw	r24, r18
    34b0:	88 0f       	add	r24, r24
    34b2:	99 1f       	adc	r25, r25
    34b4:	82 0f       	add	r24, r18
    34b6:	93 1f       	adc	r25, r19
    34b8:	88 0f       	add	r24, r24
    34ba:	99 1f       	adc	r25, r25
    34bc:	88 0f       	add	r24, r24
    34be:	99 1f       	adc	r25, r25
    34c0:	fc 01       	movw	r30, r24
    34c2:	e4 5e       	subi	r30, 0xE4	; 228
    34c4:	fe 4f       	sbci	r31, 0xFE	; 254
    34c6:	80 81       	ld	r24, Z
    34c8:	82 95       	swap	r24
    34ca:	86 95       	lsr	r24
    34cc:	87 70       	andi	r24, 0x07	; 7
    34ce:	81 70       	andi	r24, 0x01	; 1
    34d0:	88 2f       	mov	r24, r24
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	82 95       	swap	r24
    34d6:	92 95       	swap	r25
    34d8:	90 7f       	andi	r25, 0xF0	; 240
    34da:	98 27       	eor	r25, r24
    34dc:	80 7f       	andi	r24, 0xF0	; 240
    34de:	98 27       	eor	r25, r24
    34e0:	84 2b       	or	r24, r20
    34e2:	fe 01       	movw	r30, r28
    34e4:	e3 57       	subi	r30, 0x73	; 115
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	80 83       	st	Z, r24
					   lcdarr[u8CntLoc].lcdswconfig.u8shift<<4 ;


			voidWriteCmd(u8CntLoc,u8commnad);
    34ea:	fe 01       	movw	r30, r28
    34ec:	e2 57       	subi	r30, 0x72	; 114
    34ee:	ff 4f       	sbci	r31, 0xFF	; 255
    34f0:	de 01       	movw	r26, r28
    34f2:	a3 57       	subi	r26, 0x73	; 115
    34f4:	bf 4f       	sbci	r27, 0xFF	; 255
    34f6:	80 81       	ld	r24, Z
    34f8:	6c 91       	ld	r22, X
    34fa:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	a0 e4       	ldi	r26, 0x40	; 64
    3504:	b0 e4       	ldi	r27, 0x40	; 64
    3506:	8b 87       	std	Y+11, r24	; 0x0b
    3508:	9c 87       	std	Y+12, r25	; 0x0c
    350a:	ad 87       	std	Y+13, r26	; 0x0d
    350c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3510:	7c 85       	ldd	r23, Y+12	; 0x0c
    3512:	8d 85       	ldd	r24, Y+13	; 0x0d
    3514:	9e 85       	ldd	r25, Y+14	; 0x0e
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	4a ef       	ldi	r20, 0xFA	; 250
    351c:	54 e4       	ldi	r21, 0x44	; 68
    351e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	8f 83       	std	Y+7, r24	; 0x07
    3528:	98 87       	std	Y+8, r25	; 0x08
    352a:	a9 87       	std	Y+9, r26	; 0x09
    352c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    352e:	6f 81       	ldd	r22, Y+7	; 0x07
    3530:	78 85       	ldd	r23, Y+8	; 0x08
    3532:	89 85       	ldd	r24, Y+9	; 0x09
    3534:	9a 85       	ldd	r25, Y+10	; 0x0a
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	40 e8       	ldi	r20, 0x80	; 128
    353c:	5f e3       	ldi	r21, 0x3F	; 63
    353e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3542:	88 23       	and	r24, r24
    3544:	2c f4       	brge	.+10     	; 0x3550 <LCD_voidInit+0xfc4>
		__ticks = 1;
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	9e 83       	std	Y+6, r25	; 0x06
    354c:	8d 83       	std	Y+5, r24	; 0x05
    354e:	3f c0       	rjmp	.+126    	; 0x35ce <LCD_voidInit+0x1042>
	else if (__tmp > 65535)
    3550:	6f 81       	ldd	r22, Y+7	; 0x07
    3552:	78 85       	ldd	r23, Y+8	; 0x08
    3554:	89 85       	ldd	r24, Y+9	; 0x09
    3556:	9a 85       	ldd	r25, Y+10	; 0x0a
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	3f ef       	ldi	r19, 0xFF	; 255
    355c:	4f e7       	ldi	r20, 0x7F	; 127
    355e:	57 e4       	ldi	r21, 0x47	; 71
    3560:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3564:	18 16       	cp	r1, r24
    3566:	4c f5       	brge	.+82     	; 0x35ba <LCD_voidInit+0x102e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3568:	6b 85       	ldd	r22, Y+11	; 0x0b
    356a:	7c 85       	ldd	r23, Y+12	; 0x0c
    356c:	8d 85       	ldd	r24, Y+13	; 0x0d
    356e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e2       	ldi	r20, 0x20	; 32
    3576:	51 e4       	ldi	r21, 0x41	; 65
    3578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	bc 01       	movw	r22, r24
    3582:	cd 01       	movw	r24, r26
    3584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	9e 83       	std	Y+6, r25	; 0x06
    358e:	8d 83       	std	Y+5, r24	; 0x05
    3590:	0f c0       	rjmp	.+30     	; 0x35b0 <LCD_voidInit+0x1024>
    3592:	88 ec       	ldi	r24, 0xC8	; 200
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	9c 83       	std	Y+4, r25	; 0x04
    3598:	8b 83       	std	Y+3, r24	; 0x03
    359a:	8b 81       	ldd	r24, Y+3	; 0x03
    359c:	9c 81       	ldd	r25, Y+4	; 0x04
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <LCD_voidInit+0x1012>
    35a2:	9c 83       	std	Y+4, r25	; 0x04
    35a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a6:	8d 81       	ldd	r24, Y+5	; 0x05
    35a8:	9e 81       	ldd	r25, Y+6	; 0x06
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	9e 83       	std	Y+6, r25	; 0x06
    35ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b0:	8d 81       	ldd	r24, Y+5	; 0x05
    35b2:	9e 81       	ldd	r25, Y+6	; 0x06
    35b4:	00 97       	sbiw	r24, 0x00	; 0
    35b6:	69 f7       	brne	.-38     	; 0x3592 <LCD_voidInit+0x1006>
    35b8:	14 c0       	rjmp	.+40     	; 0x35e2 <LCD_voidInit+0x1056>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ba:	6f 81       	ldd	r22, Y+7	; 0x07
    35bc:	78 85       	ldd	r23, Y+8	; 0x08
    35be:	89 85       	ldd	r24, Y+9	; 0x09
    35c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	9e 83       	std	Y+6, r25	; 0x06
    35cc:	8d 83       	std	Y+5, r24	; 0x05
    35ce:	8d 81       	ldd	r24, Y+5	; 0x05
    35d0:	9e 81       	ldd	r25, Y+6	; 0x06
    35d2:	9a 83       	std	Y+2, r25	; 0x02
    35d4:	89 83       	std	Y+1, r24	; 0x01
    35d6:	89 81       	ldd	r24, Y+1	; 0x01
    35d8:	9a 81       	ldd	r25, Y+2	; 0x02
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	f1 f7       	brne	.-4      	; 0x35da <LCD_voidInit+0x104e>
    35de:	9a 83       	std	Y+2, r25	; 0x02
    35e0:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidInit(void)
{
	uint8 u8CntLoc;
	uint8 u8commnad=0;
	for (u8CntLoc =0  ; u8CntLoc <MAX_NUM ; u8CntLoc++)
    35e2:	de 01       	movw	r26, r28
    35e4:	a2 57       	subi	r26, 0x72	; 114
    35e6:	bf 4f       	sbci	r27, 0xFF	; 255
    35e8:	fe 01       	movw	r30, r28
    35ea:	e2 57       	subi	r30, 0x72	; 114
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	80 81       	ld	r24, Z
    35f0:	8f 5f       	subi	r24, 0xFF	; 255
    35f2:	8c 93       	st	X, r24
    35f4:	fe 01       	movw	r30, r28
    35f6:	e2 57       	subi	r30, 0x72	; 114
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	80 81       	ld	r24, Z
    35fc:	88 23       	and	r24, r24
    35fe:	11 f4       	brne	.+4      	; 0x3604 <LCD_voidInit+0x1078>
    3600:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <LCD_voidInit+0x2e>

	}



}
    3604:	c2 57       	subi	r28, 0x72	; 114
    3606:	df 4f       	sbci	r29, 0xFF	; 255
    3608:	0f b6       	in	r0, 0x3f	; 63
    360a:	f8 94       	cli
    360c:	de bf       	out	0x3e, r29	; 62
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	cd bf       	out	0x3d, r28	; 61
    3612:	cf 91       	pop	r28
    3614:	df 91       	pop	r29
    3616:	1f 91       	pop	r17
    3618:	0f 91       	pop	r16
    361a:	08 95       	ret

0000361c <voidWriteCmd>:


static void voidWriteCmd(uint8 u8Index , uint8 u8CmdCPy)
 {
    361c:	df 93       	push	r29
    361e:	cf 93       	push	r28
    3620:	00 d0       	rcall	.+0      	; 0x3622 <voidWriteCmd+0x6>
    3622:	cd b7       	in	r28, 0x3d	; 61
    3624:	de b7       	in	r29, 0x3e	; 62
    3626:	89 83       	std	Y+1, r24	; 0x01
    3628:	6a 83       	std	Y+2, r22	; 0x02

	/*RS   0*/
	DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8RS , DIO_LOW);
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	28 2f       	mov	r18, r24
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	c9 01       	movw	r24, r18
    3632:	88 0f       	add	r24, r24
    3634:	99 1f       	adc	r25, r25
    3636:	82 0f       	add	r24, r18
    3638:	93 1f       	adc	r25, r19
    363a:	88 0f       	add	r24, r24
    363c:	99 1f       	adc	r25, r25
    363e:	88 0f       	add	r24, r24
    3640:	99 1f       	adc	r25, r25
    3642:	fc 01       	movw	r30, r24
    3644:	e3 5e       	subi	r30, 0xE3	; 227
    3646:	fe 4f       	sbci	r31, 0xFE	; 254
    3648:	80 81       	ld	r24, Z
    364a:	60 e0       	ldi	r22, 0x00	; 0
    364c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>

	/*help*/
	LCDHelp(u8Index,u8CmdCPy);
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	6a 81       	ldd	r22, Y+2	; 0x02
    3654:	0e 94 31 1b 	call	0x3662	; 0x3662 <LCDHelp>

 }
    3658:	0f 90       	pop	r0
    365a:	0f 90       	pop	r0
    365c:	cf 91       	pop	r28
    365e:	df 91       	pop	r29
    3660:	08 95       	ret

00003662 <LCDHelp>:

static void  LCDHelp(uint8 u8Index , uint8 u8dataCmdCPy)
	{
    3662:	df 93       	push	r29
    3664:	cf 93       	push	r28
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
    366a:	6f 97       	sbiw	r28, 0x1f	; 31
    366c:	0f b6       	in	r0, 0x3f	; 63
    366e:	f8 94       	cli
    3670:	de bf       	out	0x3e, r29	; 62
    3672:	0f be       	out	0x3f, r0	; 63
    3674:	cd bf       	out	0x3d, r28	; 61
    3676:	8e 8f       	std	Y+30, r24	; 0x1e
    3678:	6f 8f       	std	Y+31, r22	; 0x1f
		uint8 u8CntLoc=0;
    367a:	1d 8e       	std	Y+29, r1	; 0x1d
		/*set to write to lCD */
		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8RW , DIO_LOW);
    367c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    367e:	28 2f       	mov	r18, r24
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	c9 01       	movw	r24, r18
    3684:	88 0f       	add	r24, r24
    3686:	99 1f       	adc	r25, r25
    3688:	82 0f       	add	r24, r18
    368a:	93 1f       	adc	r25, r19
    368c:	88 0f       	add	r24, r24
    368e:	99 1f       	adc	r25, r25
    3690:	01 96       	adiw	r24, 0x01	; 1
    3692:	88 0f       	add	r24, r24
    3694:	99 1f       	adc	r25, r25
    3696:	fc 01       	movw	r30, r24
    3698:	e4 5e       	subi	r30, 0xE4	; 228
    369a:	fe 4f       	sbci	r31, 0xFE	; 254
    369c:	80 81       	ld	r24, Z
    369e:	60 e0       	ldi	r22, 0x00	; 0
    36a0:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>

		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8E , DIO_HIGH);
    36a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    36a6:	28 2f       	mov	r18, r24
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	c9 01       	movw	r24, r18
    36ac:	88 0f       	add	r24, r24
    36ae:	99 1f       	adc	r25, r25
    36b0:	82 0f       	add	r24, r18
    36b2:	93 1f       	adc	r25, r19
    36b4:	88 0f       	add	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	88 0f       	add	r24, r24
    36ba:	99 1f       	adc	r25, r25
    36bc:	fc 01       	movw	r30, r24
    36be:	e1 5e       	subi	r30, 0xE1	; 225
    36c0:	fe 4f       	sbci	r31, 0xFE	; 254
    36c2:	80 81       	ld	r24, Z
    36c4:	61 e0       	ldi	r22, 0x01	; 1
    36c6:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>

		if (lcdarr[u8Index].lcdswconfig.u8mode==LCD_8_BIT_MODE)
    36ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    36cc:	28 2f       	mov	r18, r24
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	c9 01       	movw	r24, r18
    36d2:	88 0f       	add	r24, r24
    36d4:	99 1f       	adc	r25, r25
    36d6:	82 0f       	add	r24, r18
    36d8:	93 1f       	adc	r25, r19
    36da:	88 0f       	add	r24, r24
    36dc:	99 1f       	adc	r25, r25
    36de:	88 0f       	add	r24, r24
    36e0:	99 1f       	adc	r25, r25
    36e2:	fc 01       	movw	r30, r24
    36e4:	e4 5e       	subi	r30, 0xE4	; 228
    36e6:	fe 4f       	sbci	r31, 0xFE	; 254
    36e8:	80 81       	ld	r24, Z
    36ea:	81 70       	andi	r24, 0x01	; 1
    36ec:	81 30       	cpi	r24, 0x01	; 1
    36ee:	89 f5       	brne	.+98     	; 0x3752 <LCDHelp+0xf0>
		{
			for (u8CntLoc =0 ;u8CntLoc<8;u8CntLoc++)
    36f0:	1d 8e       	std	Y+29, r1	; 0x1d
    36f2:	2b c0       	rjmp	.+86     	; 0x374a <LCDHelp+0xe8>
			{
				DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.au8data[u8CntLoc],GET_BIT(u8dataCmdCPy,u8CntLoc));
    36f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    36f6:	28 2f       	mov	r18, r24
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36fc:	48 2f       	mov	r20, r24
    36fe:	50 e0       	ldi	r21, 0x00	; 0
    3700:	c9 01       	movw	r24, r18
    3702:	88 0f       	add	r24, r24
    3704:	99 1f       	adc	r25, r25
    3706:	82 0f       	add	r24, r18
    3708:	93 1f       	adc	r25, r19
    370a:	88 0f       	add	r24, r24
    370c:	99 1f       	adc	r25, r25
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	84 0f       	add	r24, r20
    3714:	95 1f       	adc	r25, r21
    3716:	fc 01       	movw	r30, r24
    3718:	e0 5e       	subi	r30, 0xE0	; 224
    371a:	fe 4f       	sbci	r31, 0xFE	; 254
    371c:	40 81       	ld	r20, Z
    371e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3720:	28 2f       	mov	r18, r24
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3726:	88 2f       	mov	r24, r24
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	b9 01       	movw	r22, r18
    372c:	02 c0       	rjmp	.+4      	; 0x3732 <LCDHelp+0xd0>
    372e:	75 95       	asr	r23
    3730:	67 95       	ror	r22
    3732:	8a 95       	dec	r24
    3734:	e2 f7       	brpl	.-8      	; 0x372e <LCDHelp+0xcc>
    3736:	cb 01       	movw	r24, r22
    3738:	98 2f       	mov	r25, r24
    373a:	91 70       	andi	r25, 0x01	; 1
    373c:	84 2f       	mov	r24, r20
    373e:	69 2f       	mov	r22, r25
    3740:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>

		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8E , DIO_HIGH);

		if (lcdarr[u8Index].lcdswconfig.u8mode==LCD_8_BIT_MODE)
		{
			for (u8CntLoc =0 ;u8CntLoc<8;u8CntLoc++)
    3744:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3746:	8f 5f       	subi	r24, 0xFF	; 255
    3748:	8d 8f       	std	Y+29, r24	; 0x1d
    374a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    374c:	88 30       	cpi	r24, 0x08	; 8
    374e:	90 f2       	brcs	.-92     	; 0x36f4 <LCDHelp+0x92>
    3750:	31 c0       	rjmp	.+98     	; 0x37b4 <LCDHelp+0x152>

		}

		else
		{
			for (u8CntLoc =4 ;u8CntLoc<8;u8CntLoc++)
    3752:	84 e0       	ldi	r24, 0x04	; 4
    3754:	8d 8f       	std	Y+29, r24	; 0x1d
    3756:	2b c0       	rjmp	.+86     	; 0x37ae <LCDHelp+0x14c>
			{
				DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.au8data[u8CntLoc],GET_BIT(u8dataCmdCPy,u8CntLoc));
    3758:	8e 8d       	ldd	r24, Y+30	; 0x1e
    375a:	28 2f       	mov	r18, r24
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3760:	48 2f       	mov	r20, r24
    3762:	50 e0       	ldi	r21, 0x00	; 0
    3764:	c9 01       	movw	r24, r18
    3766:	88 0f       	add	r24, r24
    3768:	99 1f       	adc	r25, r25
    376a:	82 0f       	add	r24, r18
    376c:	93 1f       	adc	r25, r19
    376e:	88 0f       	add	r24, r24
    3770:	99 1f       	adc	r25, r25
    3772:	88 0f       	add	r24, r24
    3774:	99 1f       	adc	r25, r25
    3776:	84 0f       	add	r24, r20
    3778:	95 1f       	adc	r25, r21
    377a:	fc 01       	movw	r30, r24
    377c:	e0 5e       	subi	r30, 0xE0	; 224
    377e:	fe 4f       	sbci	r31, 0xFE	; 254
    3780:	40 81       	ld	r20, Z
    3782:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3784:	28 2f       	mov	r18, r24
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	8d 8d       	ldd	r24, Y+29	; 0x1d
    378a:	88 2f       	mov	r24, r24
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	b9 01       	movw	r22, r18
    3790:	02 c0       	rjmp	.+4      	; 0x3796 <LCDHelp+0x134>
    3792:	75 95       	asr	r23
    3794:	67 95       	ror	r22
    3796:	8a 95       	dec	r24
    3798:	e2 f7       	brpl	.-8      	; 0x3792 <LCDHelp+0x130>
    379a:	cb 01       	movw	r24, r22
    379c:	98 2f       	mov	r25, r24
    379e:	91 70       	andi	r25, 0x01	; 1
    37a0:	84 2f       	mov	r24, r20
    37a2:	69 2f       	mov	r22, r25
    37a4:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>

		}

		else
		{
			for (u8CntLoc =4 ;u8CntLoc<8;u8CntLoc++)
    37a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37aa:	8f 5f       	subi	r24, 0xFF	; 255
    37ac:	8d 8f       	std	Y+29, r24	; 0x1d
    37ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37b0:	88 30       	cpi	r24, 0x08	; 8
    37b2:	90 f2       	brcs	.-92     	; 0x3758 <LCDHelp+0xf6>
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	a0 e2       	ldi	r26, 0x20	; 32
    37ba:	b1 e4       	ldi	r27, 0x41	; 65
    37bc:	89 8f       	std	Y+25, r24	; 0x19
    37be:	9a 8f       	std	Y+26, r25	; 0x1a
    37c0:	ab 8f       	std	Y+27, r26	; 0x1b
    37c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c4:	69 8d       	ldd	r22, Y+25	; 0x19
    37c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	4a ef       	ldi	r20, 0xFA	; 250
    37d2:	54 e4       	ldi	r21, 0x44	; 68
    37d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	8d 8b       	std	Y+21, r24	; 0x15
    37de:	9e 8b       	std	Y+22, r25	; 0x16
    37e0:	af 8b       	std	Y+23, r26	; 0x17
    37e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37e4:	6d 89       	ldd	r22, Y+21	; 0x15
    37e6:	7e 89       	ldd	r23, Y+22	; 0x16
    37e8:	8f 89       	ldd	r24, Y+23	; 0x17
    37ea:	98 8d       	ldd	r25, Y+24	; 0x18
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	40 e8       	ldi	r20, 0x80	; 128
    37f2:	5f e3       	ldi	r21, 0x3F	; 63
    37f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37f8:	88 23       	and	r24, r24
    37fa:	2c f4       	brge	.+10     	; 0x3806 <LCDHelp+0x1a4>
		__ticks = 1;
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	9c 8b       	std	Y+20, r25	; 0x14
    3802:	8b 8b       	std	Y+19, r24	; 0x13
    3804:	3f c0       	rjmp	.+126    	; 0x3884 <LCDHelp+0x222>
	else if (__tmp > 65535)
    3806:	6d 89       	ldd	r22, Y+21	; 0x15
    3808:	7e 89       	ldd	r23, Y+22	; 0x16
    380a:	8f 89       	ldd	r24, Y+23	; 0x17
    380c:	98 8d       	ldd	r25, Y+24	; 0x18
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	3f ef       	ldi	r19, 0xFF	; 255
    3812:	4f e7       	ldi	r20, 0x7F	; 127
    3814:	57 e4       	ldi	r21, 0x47	; 71
    3816:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    381a:	18 16       	cp	r1, r24
    381c:	4c f5       	brge	.+82     	; 0x3870 <LCDHelp+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    381e:	69 8d       	ldd	r22, Y+25	; 0x19
    3820:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3822:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3824:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	40 e2       	ldi	r20, 0x20	; 32
    382c:	51 e4       	ldi	r21, 0x41	; 65
    382e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3832:	dc 01       	movw	r26, r24
    3834:	cb 01       	movw	r24, r22
    3836:	bc 01       	movw	r22, r24
    3838:	cd 01       	movw	r24, r26
    383a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	9c 8b       	std	Y+20, r25	; 0x14
    3844:	8b 8b       	std	Y+19, r24	; 0x13
    3846:	0f c0       	rjmp	.+30     	; 0x3866 <LCDHelp+0x204>
    3848:	88 ec       	ldi	r24, 0xC8	; 200
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	9a 8b       	std	Y+18, r25	; 0x12
    384e:	89 8b       	std	Y+17, r24	; 0x11
    3850:	89 89       	ldd	r24, Y+17	; 0x11
    3852:	9a 89       	ldd	r25, Y+18	; 0x12
    3854:	01 97       	sbiw	r24, 0x01	; 1
    3856:	f1 f7       	brne	.-4      	; 0x3854 <LCDHelp+0x1f2>
    3858:	9a 8b       	std	Y+18, r25	; 0x12
    385a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    385c:	8b 89       	ldd	r24, Y+19	; 0x13
    385e:	9c 89       	ldd	r25, Y+20	; 0x14
    3860:	01 97       	sbiw	r24, 0x01	; 1
    3862:	9c 8b       	std	Y+20, r25	; 0x14
    3864:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3866:	8b 89       	ldd	r24, Y+19	; 0x13
    3868:	9c 89       	ldd	r25, Y+20	; 0x14
    386a:	00 97       	sbiw	r24, 0x00	; 0
    386c:	69 f7       	brne	.-38     	; 0x3848 <LCDHelp+0x1e6>
    386e:	14 c0       	rjmp	.+40     	; 0x3898 <LCDHelp+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3870:	6d 89       	ldd	r22, Y+21	; 0x15
    3872:	7e 89       	ldd	r23, Y+22	; 0x16
    3874:	8f 89       	ldd	r24, Y+23	; 0x17
    3876:	98 8d       	ldd	r25, Y+24	; 0x18
    3878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	9c 8b       	std	Y+20, r25	; 0x14
    3882:	8b 8b       	std	Y+19, r24	; 0x13
    3884:	8b 89       	ldd	r24, Y+19	; 0x13
    3886:	9c 89       	ldd	r25, Y+20	; 0x14
    3888:	98 8b       	std	Y+16, r25	; 0x10
    388a:	8f 87       	std	Y+15, r24	; 0x0f
    388c:	8f 85       	ldd	r24, Y+15	; 0x0f
    388e:	98 89       	ldd	r25, Y+16	; 0x10
    3890:	01 97       	sbiw	r24, 0x01	; 1
    3892:	f1 f7       	brne	.-4      	; 0x3890 <LCDHelp+0x22e>
    3894:	98 8b       	std	Y+16, r25	; 0x10
    3896:	8f 87       	std	Y+15, r24	; 0x0f
				DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.au8data[u8CntLoc],GET_BIT(u8dataCmdCPy,u8CntLoc));
			}
		}
			/* latch */
		_delay_ms(10);
		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8E , DIO_LOW);
    3898:	8e 8d       	ldd	r24, Y+30	; 0x1e
    389a:	28 2f       	mov	r18, r24
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	c9 01       	movw	r24, r18
    38a0:	88 0f       	add	r24, r24
    38a2:	99 1f       	adc	r25, r25
    38a4:	82 0f       	add	r24, r18
    38a6:	93 1f       	adc	r25, r19
    38a8:	88 0f       	add	r24, r24
    38aa:	99 1f       	adc	r25, r25
    38ac:	88 0f       	add	r24, r24
    38ae:	99 1f       	adc	r25, r25
    38b0:	fc 01       	movw	r30, r24
    38b2:	e1 5e       	subi	r30, 0xE1	; 225
    38b4:	fe 4f       	sbci	r31, 0xFE	; 254
    38b6:	80 81       	ld	r24, Z
    38b8:	60 e0       	ldi	r22, 0x00	; 0
    38ba:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	a0 e2       	ldi	r26, 0x20	; 32
    38c4:	b1 e4       	ldi	r27, 0x41	; 65
    38c6:	8b 87       	std	Y+11, r24	; 0x0b
    38c8:	9c 87       	std	Y+12, r25	; 0x0c
    38ca:	ad 87       	std	Y+13, r26	; 0x0d
    38cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    38d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	4a ef       	ldi	r20, 0xFA	; 250
    38dc:	54 e4       	ldi	r21, 0x44	; 68
    38de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	8f 83       	std	Y+7, r24	; 0x07
    38e8:	98 87       	std	Y+8, r25	; 0x08
    38ea:	a9 87       	std	Y+9, r26	; 0x09
    38ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38ee:	6f 81       	ldd	r22, Y+7	; 0x07
    38f0:	78 85       	ldd	r23, Y+8	; 0x08
    38f2:	89 85       	ldd	r24, Y+9	; 0x09
    38f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	40 e8       	ldi	r20, 0x80	; 128
    38fc:	5f e3       	ldi	r21, 0x3F	; 63
    38fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3902:	88 23       	and	r24, r24
    3904:	2c f4       	brge	.+10     	; 0x3910 <LCDHelp+0x2ae>
		__ticks = 1;
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	9e 83       	std	Y+6, r25	; 0x06
    390c:	8d 83       	std	Y+5, r24	; 0x05
    390e:	3f c0       	rjmp	.+126    	; 0x398e <LCDHelp+0x32c>
	else if (__tmp > 65535)
    3910:	6f 81       	ldd	r22, Y+7	; 0x07
    3912:	78 85       	ldd	r23, Y+8	; 0x08
    3914:	89 85       	ldd	r24, Y+9	; 0x09
    3916:	9a 85       	ldd	r25, Y+10	; 0x0a
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	3f ef       	ldi	r19, 0xFF	; 255
    391c:	4f e7       	ldi	r20, 0x7F	; 127
    391e:	57 e4       	ldi	r21, 0x47	; 71
    3920:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3924:	18 16       	cp	r1, r24
    3926:	4c f5       	brge	.+82     	; 0x397a <LCDHelp+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3928:	6b 85       	ldd	r22, Y+11	; 0x0b
    392a:	7c 85       	ldd	r23, Y+12	; 0x0c
    392c:	8d 85       	ldd	r24, Y+13	; 0x0d
    392e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 e2       	ldi	r20, 0x20	; 32
    3936:	51 e4       	ldi	r21, 0x41	; 65
    3938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	bc 01       	movw	r22, r24
    3942:	cd 01       	movw	r24, r26
    3944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	9e 83       	std	Y+6, r25	; 0x06
    394e:	8d 83       	std	Y+5, r24	; 0x05
    3950:	0f c0       	rjmp	.+30     	; 0x3970 <LCDHelp+0x30e>
    3952:	88 ec       	ldi	r24, 0xC8	; 200
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	9c 83       	std	Y+4, r25	; 0x04
    3958:	8b 83       	std	Y+3, r24	; 0x03
    395a:	8b 81       	ldd	r24, Y+3	; 0x03
    395c:	9c 81       	ldd	r25, Y+4	; 0x04
    395e:	01 97       	sbiw	r24, 0x01	; 1
    3960:	f1 f7       	brne	.-4      	; 0x395e <LCDHelp+0x2fc>
    3962:	9c 83       	std	Y+4, r25	; 0x04
    3964:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3966:	8d 81       	ldd	r24, Y+5	; 0x05
    3968:	9e 81       	ldd	r25, Y+6	; 0x06
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	9e 83       	std	Y+6, r25	; 0x06
    396e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3970:	8d 81       	ldd	r24, Y+5	; 0x05
    3972:	9e 81       	ldd	r25, Y+6	; 0x06
    3974:	00 97       	sbiw	r24, 0x00	; 0
    3976:	69 f7       	brne	.-38     	; 0x3952 <LCDHelp+0x2f0>
    3978:	14 c0       	rjmp	.+40     	; 0x39a2 <LCDHelp+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    397a:	6f 81       	ldd	r22, Y+7	; 0x07
    397c:	78 85       	ldd	r23, Y+8	; 0x08
    397e:	89 85       	ldd	r24, Y+9	; 0x09
    3980:	9a 85       	ldd	r25, Y+10	; 0x0a
    3982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	9e 83       	std	Y+6, r25	; 0x06
    398c:	8d 83       	std	Y+5, r24	; 0x05
    398e:	8d 81       	ldd	r24, Y+5	; 0x05
    3990:	9e 81       	ldd	r25, Y+6	; 0x06
    3992:	9a 83       	std	Y+2, r25	; 0x02
    3994:	89 83       	std	Y+1, r24	; 0x01
    3996:	89 81       	ldd	r24, Y+1	; 0x01
    3998:	9a 81       	ldd	r25, Y+2	; 0x02
    399a:	01 97       	sbiw	r24, 0x01	; 1
    399c:	f1 f7       	brne	.-4      	; 0x399a <LCDHelp+0x338>
    399e:	9a 83       	std	Y+2, r25	; 0x02
    39a0:	89 83       	std	Y+1, r24	; 0x01
		/*extra delay*/
		_delay_ms(10);
	}
    39a2:	6f 96       	adiw	r28, 0x1f	; 31
    39a4:	0f b6       	in	r0, 0x3f	; 63
    39a6:	f8 94       	cli
    39a8:	de bf       	out	0x3e, r29	; 62
    39aa:	0f be       	out	0x3f, r0	; 63
    39ac:	cd bf       	out	0x3d, r28	; 61
    39ae:	cf 91       	pop	r28
    39b0:	df 91       	pop	r29
    39b2:	08 95       	ret

000039b4 <LCD_voidSendChar>:

void LCD_voidSendChar(uint8 u8IndexCpy, uint8 u8CharCpy)

{
    39b4:	df 93       	push	r29
    39b6:	cf 93       	push	r28
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
    39bc:	ac 97       	sbiw	r28, 0x2c	; 44
    39be:	0f b6       	in	r0, 0x3f	; 63
    39c0:	f8 94       	cli
    39c2:	de bf       	out	0x3e, r29	; 62
    39c4:	0f be       	out	0x3f, r0	; 63
    39c6:	cd bf       	out	0x3d, r28	; 61
    39c8:	8b a7       	std	Y+43, r24	; 0x2b
    39ca:	6c a7       	std	Y+44, r22	; 0x2c
	/*RS  1*/
	DIO_enuWritePin(lcdarr[u8IndexCpy].lcdhwconfig.u8RS , DIO_HIGH);
    39cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    39ce:	28 2f       	mov	r18, r24
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	c9 01       	movw	r24, r18
    39d4:	88 0f       	add	r24, r24
    39d6:	99 1f       	adc	r25, r25
    39d8:	82 0f       	add	r24, r18
    39da:	93 1f       	adc	r25, r19
    39dc:	88 0f       	add	r24, r24
    39de:	99 1f       	adc	r25, r25
    39e0:	88 0f       	add	r24, r24
    39e2:	99 1f       	adc	r25, r25
    39e4:	fc 01       	movw	r30, r24
    39e6:	e3 5e       	subi	r30, 0xE3	; 227
    39e8:	fe 4f       	sbci	r31, 0xFE	; 254
    39ea:	80 81       	ld	r24, Z
    39ec:	61 e0       	ldi	r22, 0x01	; 1
    39ee:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>


	if (lcdarr[u8IndexCpy].lcdswconfig.u8mode==LCD_8_BIT_MODE)
    39f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    39f4:	28 2f       	mov	r18, r24
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	c9 01       	movw	r24, r18
    39fa:	88 0f       	add	r24, r24
    39fc:	99 1f       	adc	r25, r25
    39fe:	82 0f       	add	r24, r18
    3a00:	93 1f       	adc	r25, r19
    3a02:	88 0f       	add	r24, r24
    3a04:	99 1f       	adc	r25, r25
    3a06:	88 0f       	add	r24, r24
    3a08:	99 1f       	adc	r25, r25
    3a0a:	fc 01       	movw	r30, r24
    3a0c:	e4 5e       	subi	r30, 0xE4	; 228
    3a0e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a10:	80 81       	ld	r24, Z
    3a12:	81 70       	andi	r24, 0x01	; 1
    3a14:	81 30       	cpi	r24, 0x01	; 1
    3a16:	09 f0       	breq	.+2      	; 0x3a1a <LCD_voidSendChar+0x66>
    3a18:	77 c0       	rjmp	.+238    	; 0x3b08 <LCD_voidSendChar+0x154>
	{
		LCDHelp(u8IndexCpy,u8CharCpy);
    3a1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a1c:	6c a5       	ldd	r22, Y+44	; 0x2c
    3a1e:	0e 94 31 1b 	call	0x3662	; 0x3662 <LCDHelp>
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	a0 e8       	ldi	r26, 0x80	; 128
    3a28:	bf e3       	ldi	r27, 0x3F	; 63
    3a2a:	8f a3       	std	Y+39, r24	; 0x27
    3a2c:	98 a7       	std	Y+40, r25	; 0x28
    3a2e:	a9 a7       	std	Y+41, r26	; 0x29
    3a30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a32:	6f a1       	ldd	r22, Y+39	; 0x27
    3a34:	78 a5       	ldd	r23, Y+40	; 0x28
    3a36:	89 a5       	ldd	r24, Y+41	; 0x29
    3a38:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	4a ef       	ldi	r20, 0xFA	; 250
    3a40:	54 e4       	ldi	r21, 0x44	; 68
    3a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	8b a3       	std	Y+35, r24	; 0x23
    3a4c:	9c a3       	std	Y+36, r25	; 0x24
    3a4e:	ad a3       	std	Y+37, r26	; 0x25
    3a50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a52:	6b a1       	ldd	r22, Y+35	; 0x23
    3a54:	7c a1       	ldd	r23, Y+36	; 0x24
    3a56:	8d a1       	ldd	r24, Y+37	; 0x25
    3a58:	9e a1       	ldd	r25, Y+38	; 0x26
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	40 e8       	ldi	r20, 0x80	; 128
    3a60:	5f e3       	ldi	r21, 0x3F	; 63
    3a62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a66:	88 23       	and	r24, r24
    3a68:	2c f4       	brge	.+10     	; 0x3a74 <LCD_voidSendChar+0xc0>
		__ticks = 1;
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	9a a3       	std	Y+34, r25	; 0x22
    3a70:	89 a3       	std	Y+33, r24	; 0x21
    3a72:	3f c0       	rjmp	.+126    	; 0x3af2 <LCD_voidSendChar+0x13e>
	else if (__tmp > 65535)
    3a74:	6b a1       	ldd	r22, Y+35	; 0x23
    3a76:	7c a1       	ldd	r23, Y+36	; 0x24
    3a78:	8d a1       	ldd	r24, Y+37	; 0x25
    3a7a:	9e a1       	ldd	r25, Y+38	; 0x26
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	3f ef       	ldi	r19, 0xFF	; 255
    3a80:	4f e7       	ldi	r20, 0x7F	; 127
    3a82:	57 e4       	ldi	r21, 0x47	; 71
    3a84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a88:	18 16       	cp	r1, r24
    3a8a:	4c f5       	brge	.+82     	; 0x3ade <LCD_voidSendChar+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a8c:	6f a1       	ldd	r22, Y+39	; 0x27
    3a8e:	78 a5       	ldd	r23, Y+40	; 0x28
    3a90:	89 a5       	ldd	r24, Y+41	; 0x29
    3a92:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	40 e2       	ldi	r20, 0x20	; 32
    3a9a:	51 e4       	ldi	r21, 0x41	; 65
    3a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	bc 01       	movw	r22, r24
    3aa6:	cd 01       	movw	r24, r26
    3aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	9a a3       	std	Y+34, r25	; 0x22
    3ab2:	89 a3       	std	Y+33, r24	; 0x21
    3ab4:	0f c0       	rjmp	.+30     	; 0x3ad4 <LCD_voidSendChar+0x120>
    3ab6:	88 ec       	ldi	r24, 0xC8	; 200
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	98 a3       	std	Y+32, r25	; 0x20
    3abc:	8f 8f       	std	Y+31, r24	; 0x1f
    3abe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ac0:	98 a1       	ldd	r25, Y+32	; 0x20
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	f1 f7       	brne	.-4      	; 0x3ac2 <LCD_voidSendChar+0x10e>
    3ac6:	98 a3       	std	Y+32, r25	; 0x20
    3ac8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aca:	89 a1       	ldd	r24, Y+33	; 0x21
    3acc:	9a a1       	ldd	r25, Y+34	; 0x22
    3ace:	01 97       	sbiw	r24, 0x01	; 1
    3ad0:	9a a3       	std	Y+34, r25	; 0x22
    3ad2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad4:	89 a1       	ldd	r24, Y+33	; 0x21
    3ad6:	9a a1       	ldd	r25, Y+34	; 0x22
    3ad8:	00 97       	sbiw	r24, 0x00	; 0
    3ada:	69 f7       	brne	.-38     	; 0x3ab6 <LCD_voidSendChar+0x102>
    3adc:	05 c1       	rjmp	.+522    	; 0x3ce8 <LCD_voidSendChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ade:	6b a1       	ldd	r22, Y+35	; 0x23
    3ae0:	7c a1       	ldd	r23, Y+36	; 0x24
    3ae2:	8d a1       	ldd	r24, Y+37	; 0x25
    3ae4:	9e a1       	ldd	r25, Y+38	; 0x26
    3ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	9a a3       	std	Y+34, r25	; 0x22
    3af0:	89 a3       	std	Y+33, r24	; 0x21
    3af2:	89 a1       	ldd	r24, Y+33	; 0x21
    3af4:	9a a1       	ldd	r25, Y+34	; 0x22
    3af6:	9e 8f       	std	Y+30, r25	; 0x1e
    3af8:	8d 8f       	std	Y+29, r24	; 0x1d
    3afa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3afc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3afe:	01 97       	sbiw	r24, 0x01	; 1
    3b00:	f1 f7       	brne	.-4      	; 0x3afe <LCD_voidSendChar+0x14a>
    3b02:	9e 8f       	std	Y+30, r25	; 0x1e
    3b04:	8d 8f       	std	Y+29, r24	; 0x1d
    3b06:	f0 c0       	rjmp	.+480    	; 0x3ce8 <LCD_voidSendChar+0x334>
		_delay_ms(1);

	}
	else
	{
		LCDHelp(u8IndexCpy,u8CharCpy);
    3b08:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b0a:	6c a5       	ldd	r22, Y+44	; 0x2c
    3b0c:	0e 94 31 1b 	call	0x3662	; 0x3662 <LCDHelp>
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	a0 e8       	ldi	r26, 0x80	; 128
    3b16:	bf e3       	ldi	r27, 0x3F	; 63
    3b18:	89 8f       	std	Y+25, r24	; 0x19
    3b1a:	9a 8f       	std	Y+26, r25	; 0x1a
    3b1c:	ab 8f       	std	Y+27, r26	; 0x1b
    3b1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b20:	69 8d       	ldd	r22, Y+25	; 0x19
    3b22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	4a ef       	ldi	r20, 0xFA	; 250
    3b2e:	54 e4       	ldi	r21, 0x44	; 68
    3b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	8d 8b       	std	Y+21, r24	; 0x15
    3b3a:	9e 8b       	std	Y+22, r25	; 0x16
    3b3c:	af 8b       	std	Y+23, r26	; 0x17
    3b3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b40:	6d 89       	ldd	r22, Y+21	; 0x15
    3b42:	7e 89       	ldd	r23, Y+22	; 0x16
    3b44:	8f 89       	ldd	r24, Y+23	; 0x17
    3b46:	98 8d       	ldd	r25, Y+24	; 0x18
    3b48:	20 e0       	ldi	r18, 0x00	; 0
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	40 e8       	ldi	r20, 0x80	; 128
    3b4e:	5f e3       	ldi	r21, 0x3F	; 63
    3b50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b54:	88 23       	and	r24, r24
    3b56:	2c f4       	brge	.+10     	; 0x3b62 <LCD_voidSendChar+0x1ae>
		__ticks = 1;
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	9c 8b       	std	Y+20, r25	; 0x14
    3b5e:	8b 8b       	std	Y+19, r24	; 0x13
    3b60:	3f c0       	rjmp	.+126    	; 0x3be0 <LCD_voidSendChar+0x22c>
	else if (__tmp > 65535)
    3b62:	6d 89       	ldd	r22, Y+21	; 0x15
    3b64:	7e 89       	ldd	r23, Y+22	; 0x16
    3b66:	8f 89       	ldd	r24, Y+23	; 0x17
    3b68:	98 8d       	ldd	r25, Y+24	; 0x18
    3b6a:	20 e0       	ldi	r18, 0x00	; 0
    3b6c:	3f ef       	ldi	r19, 0xFF	; 255
    3b6e:	4f e7       	ldi	r20, 0x7F	; 127
    3b70:	57 e4       	ldi	r21, 0x47	; 71
    3b72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b76:	18 16       	cp	r1, r24
    3b78:	4c f5       	brge	.+82     	; 0x3bcc <LCD_voidSendChar+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b7a:	69 8d       	ldd	r22, Y+25	; 0x19
    3b7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b82:	20 e0       	ldi	r18, 0x00	; 0
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	40 e2       	ldi	r20, 0x20	; 32
    3b88:	51 e4       	ldi	r21, 0x41	; 65
    3b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b8e:	dc 01       	movw	r26, r24
    3b90:	cb 01       	movw	r24, r22
    3b92:	bc 01       	movw	r22, r24
    3b94:	cd 01       	movw	r24, r26
    3b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	cb 01       	movw	r24, r22
    3b9e:	9c 8b       	std	Y+20, r25	; 0x14
    3ba0:	8b 8b       	std	Y+19, r24	; 0x13
    3ba2:	0f c0       	rjmp	.+30     	; 0x3bc2 <LCD_voidSendChar+0x20e>
    3ba4:	88 ec       	ldi	r24, 0xC8	; 200
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	9a 8b       	std	Y+18, r25	; 0x12
    3baa:	89 8b       	std	Y+17, r24	; 0x11
    3bac:	89 89       	ldd	r24, Y+17	; 0x11
    3bae:	9a 89       	ldd	r25, Y+18	; 0x12
    3bb0:	01 97       	sbiw	r24, 0x01	; 1
    3bb2:	f1 f7       	brne	.-4      	; 0x3bb0 <LCD_voidSendChar+0x1fc>
    3bb4:	9a 8b       	std	Y+18, r25	; 0x12
    3bb6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bb8:	8b 89       	ldd	r24, Y+19	; 0x13
    3bba:	9c 89       	ldd	r25, Y+20	; 0x14
    3bbc:	01 97       	sbiw	r24, 0x01	; 1
    3bbe:	9c 8b       	std	Y+20, r25	; 0x14
    3bc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc2:	8b 89       	ldd	r24, Y+19	; 0x13
    3bc4:	9c 89       	ldd	r25, Y+20	; 0x14
    3bc6:	00 97       	sbiw	r24, 0x00	; 0
    3bc8:	69 f7       	brne	.-38     	; 0x3ba4 <LCD_voidSendChar+0x1f0>
    3bca:	14 c0       	rjmp	.+40     	; 0x3bf4 <LCD_voidSendChar+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bcc:	6d 89       	ldd	r22, Y+21	; 0x15
    3bce:	7e 89       	ldd	r23, Y+22	; 0x16
    3bd0:	8f 89       	ldd	r24, Y+23	; 0x17
    3bd2:	98 8d       	ldd	r25, Y+24	; 0x18
    3bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd8:	dc 01       	movw	r26, r24
    3bda:	cb 01       	movw	r24, r22
    3bdc:	9c 8b       	std	Y+20, r25	; 0x14
    3bde:	8b 8b       	std	Y+19, r24	; 0x13
    3be0:	8b 89       	ldd	r24, Y+19	; 0x13
    3be2:	9c 89       	ldd	r25, Y+20	; 0x14
    3be4:	98 8b       	std	Y+16, r25	; 0x10
    3be6:	8f 87       	std	Y+15, r24	; 0x0f
    3be8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bea:	98 89       	ldd	r25, Y+16	; 0x10
    3bec:	01 97       	sbiw	r24, 0x01	; 1
    3bee:	f1 f7       	brne	.-4      	; 0x3bec <LCD_voidSendChar+0x238>
    3bf0:	98 8b       	std	Y+16, r25	; 0x10
    3bf2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		LCDHelp(u8IndexCpy,u8CharCpy<<4);
    3bf4:	8c a5       	ldd	r24, Y+44	; 0x2c
    3bf6:	98 2f       	mov	r25, r24
    3bf8:	92 95       	swap	r25
    3bfa:	90 7f       	andi	r25, 0xF0	; 240
    3bfc:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bfe:	69 2f       	mov	r22, r25
    3c00:	0e 94 31 1b 	call	0x3662	; 0x3662 <LCDHelp>
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	a0 e8       	ldi	r26, 0x80	; 128
    3c0a:	bf e3       	ldi	r27, 0x3F	; 63
    3c0c:	8b 87       	std	Y+11, r24	; 0x0b
    3c0e:	9c 87       	std	Y+12, r25	; 0x0c
    3c10:	ad 87       	std	Y+13, r26	; 0x0d
    3c12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	4a ef       	ldi	r20, 0xFA	; 250
    3c22:	54 e4       	ldi	r21, 0x44	; 68
    3c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c28:	dc 01       	movw	r26, r24
    3c2a:	cb 01       	movw	r24, r22
    3c2c:	8f 83       	std	Y+7, r24	; 0x07
    3c2e:	98 87       	std	Y+8, r25	; 0x08
    3c30:	a9 87       	std	Y+9, r26	; 0x09
    3c32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c34:	6f 81       	ldd	r22, Y+7	; 0x07
    3c36:	78 85       	ldd	r23, Y+8	; 0x08
    3c38:	89 85       	ldd	r24, Y+9	; 0x09
    3c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3c:	20 e0       	ldi	r18, 0x00	; 0
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	40 e8       	ldi	r20, 0x80	; 128
    3c42:	5f e3       	ldi	r21, 0x3F	; 63
    3c44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c48:	88 23       	and	r24, r24
    3c4a:	2c f4       	brge	.+10     	; 0x3c56 <LCD_voidSendChar+0x2a2>
		__ticks = 1;
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	9e 83       	std	Y+6, r25	; 0x06
    3c52:	8d 83       	std	Y+5, r24	; 0x05
    3c54:	3f c0       	rjmp	.+126    	; 0x3cd4 <LCD_voidSendChar+0x320>
	else if (__tmp > 65535)
    3c56:	6f 81       	ldd	r22, Y+7	; 0x07
    3c58:	78 85       	ldd	r23, Y+8	; 0x08
    3c5a:	89 85       	ldd	r24, Y+9	; 0x09
    3c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	3f ef       	ldi	r19, 0xFF	; 255
    3c62:	4f e7       	ldi	r20, 0x7F	; 127
    3c64:	57 e4       	ldi	r21, 0x47	; 71
    3c66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c6a:	18 16       	cp	r1, r24
    3c6c:	4c f5       	brge	.+82     	; 0x3cc0 <LCD_voidSendChar+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c70:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c76:	20 e0       	ldi	r18, 0x00	; 0
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	40 e2       	ldi	r20, 0x20	; 32
    3c7c:	51 e4       	ldi	r21, 0x41	; 65
    3c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c82:	dc 01       	movw	r26, r24
    3c84:	cb 01       	movw	r24, r22
    3c86:	bc 01       	movw	r22, r24
    3c88:	cd 01       	movw	r24, r26
    3c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c8e:	dc 01       	movw	r26, r24
    3c90:	cb 01       	movw	r24, r22
    3c92:	9e 83       	std	Y+6, r25	; 0x06
    3c94:	8d 83       	std	Y+5, r24	; 0x05
    3c96:	0f c0       	rjmp	.+30     	; 0x3cb6 <LCD_voidSendChar+0x302>
    3c98:	88 ec       	ldi	r24, 0xC8	; 200
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	9c 83       	std	Y+4, r25	; 0x04
    3c9e:	8b 83       	std	Y+3, r24	; 0x03
    3ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca4:	01 97       	sbiw	r24, 0x01	; 1
    3ca6:	f1 f7       	brne	.-4      	; 0x3ca4 <LCD_voidSendChar+0x2f0>
    3ca8:	9c 83       	std	Y+4, r25	; 0x04
    3caa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cac:	8d 81       	ldd	r24, Y+5	; 0x05
    3cae:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb0:	01 97       	sbiw	r24, 0x01	; 1
    3cb2:	9e 83       	std	Y+6, r25	; 0x06
    3cb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cba:	00 97       	sbiw	r24, 0x00	; 0
    3cbc:	69 f7       	brne	.-38     	; 0x3c98 <LCD_voidSendChar+0x2e4>
    3cbe:	14 c0       	rjmp	.+40     	; 0x3ce8 <LCD_voidSendChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc2:	78 85       	ldd	r23, Y+8	; 0x08
    3cc4:	89 85       	ldd	r24, Y+9	; 0x09
    3cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ccc:	dc 01       	movw	r26, r24
    3cce:	cb 01       	movw	r24, r22
    3cd0:	9e 83       	std	Y+6, r25	; 0x06
    3cd2:	8d 83       	std	Y+5, r24	; 0x05
    3cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd8:	9a 83       	std	Y+2, r25	; 0x02
    3cda:	89 83       	std	Y+1, r24	; 0x01
    3cdc:	89 81       	ldd	r24, Y+1	; 0x01
    3cde:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce0:	01 97       	sbiw	r24, 0x01	; 1
    3ce2:	f1 f7       	brne	.-4      	; 0x3ce0 <LCD_voidSendChar+0x32c>
    3ce4:	9a 83       	std	Y+2, r25	; 0x02
    3ce6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

	}

	}
    3ce8:	ac 96       	adiw	r28, 0x2c	; 44
    3cea:	0f b6       	in	r0, 0x3f	; 63
    3cec:	f8 94       	cli
    3cee:	de bf       	out	0x3e, r29	; 62
    3cf0:	0f be       	out	0x3f, r0	; 63
    3cf2:	cd bf       	out	0x3d, r28	; 61
    3cf4:	cf 91       	pop	r28
    3cf6:	df 91       	pop	r29
    3cf8:	08 95       	ret

00003cfa <LCD_voidSendCommand>:



void LCD_voidSendCommand(uint8 u8IndexCpy, uint8 u8CommandCpy)
{
    3cfa:	df 93       	push	r29
    3cfc:	cf 93       	push	r28
    3cfe:	cd b7       	in	r28, 0x3d	; 61
    3d00:	de b7       	in	r29, 0x3e	; 62
    3d02:	ac 97       	sbiw	r28, 0x2c	; 44
    3d04:	0f b6       	in	r0, 0x3f	; 63
    3d06:	f8 94       	cli
    3d08:	de bf       	out	0x3e, r29	; 62
    3d0a:	0f be       	out	0x3f, r0	; 63
    3d0c:	cd bf       	out	0x3d, r28	; 61
    3d0e:	8b a7       	std	Y+43, r24	; 0x2b
    3d10:	6c a7       	std	Y+44, r22	; 0x2c
	if (lcdarr[u8IndexCpy].lcdswconfig.u8mode==LCD_8_BIT_MODE)
    3d12:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d14:	28 2f       	mov	r18, r24
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	c9 01       	movw	r24, r18
    3d1a:	88 0f       	add	r24, r24
    3d1c:	99 1f       	adc	r25, r25
    3d1e:	82 0f       	add	r24, r18
    3d20:	93 1f       	adc	r25, r19
    3d22:	88 0f       	add	r24, r24
    3d24:	99 1f       	adc	r25, r25
    3d26:	88 0f       	add	r24, r24
    3d28:	99 1f       	adc	r25, r25
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	e4 5e       	subi	r30, 0xE4	; 228
    3d2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d30:	80 81       	ld	r24, Z
    3d32:	81 70       	andi	r24, 0x01	; 1
    3d34:	81 30       	cpi	r24, 0x01	; 1
    3d36:	09 f0       	breq	.+2      	; 0x3d3a <LCD_voidSendCommand+0x40>
    3d38:	77 c0       	rjmp	.+238    	; 0x3e28 <LCD_voidSendCommand+0x12e>
		{
			voidWriteCmd(u8IndexCpy,u8CommandCpy);
    3d3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d3c:	6c a5       	ldd	r22, Y+44	; 0x2c
    3d3e:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	a0 e8       	ldi	r26, 0x80	; 128
    3d48:	bf e3       	ldi	r27, 0x3F	; 63
    3d4a:	8f a3       	std	Y+39, r24	; 0x27
    3d4c:	98 a7       	std	Y+40, r25	; 0x28
    3d4e:	a9 a7       	std	Y+41, r26	; 0x29
    3d50:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d52:	6f a1       	ldd	r22, Y+39	; 0x27
    3d54:	78 a5       	ldd	r23, Y+40	; 0x28
    3d56:	89 a5       	ldd	r24, Y+41	; 0x29
    3d58:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d5a:	20 e0       	ldi	r18, 0x00	; 0
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	4a ef       	ldi	r20, 0xFA	; 250
    3d60:	54 e4       	ldi	r21, 0x44	; 68
    3d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d66:	dc 01       	movw	r26, r24
    3d68:	cb 01       	movw	r24, r22
    3d6a:	8b a3       	std	Y+35, r24	; 0x23
    3d6c:	9c a3       	std	Y+36, r25	; 0x24
    3d6e:	ad a3       	std	Y+37, r26	; 0x25
    3d70:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d72:	6b a1       	ldd	r22, Y+35	; 0x23
    3d74:	7c a1       	ldd	r23, Y+36	; 0x24
    3d76:	8d a1       	ldd	r24, Y+37	; 0x25
    3d78:	9e a1       	ldd	r25, Y+38	; 0x26
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	40 e8       	ldi	r20, 0x80	; 128
    3d80:	5f e3       	ldi	r21, 0x3F	; 63
    3d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d86:	88 23       	and	r24, r24
    3d88:	2c f4       	brge	.+10     	; 0x3d94 <LCD_voidSendCommand+0x9a>
		__ticks = 1;
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	9a a3       	std	Y+34, r25	; 0x22
    3d90:	89 a3       	std	Y+33, r24	; 0x21
    3d92:	3f c0       	rjmp	.+126    	; 0x3e12 <LCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
    3d94:	6b a1       	ldd	r22, Y+35	; 0x23
    3d96:	7c a1       	ldd	r23, Y+36	; 0x24
    3d98:	8d a1       	ldd	r24, Y+37	; 0x25
    3d9a:	9e a1       	ldd	r25, Y+38	; 0x26
    3d9c:	20 e0       	ldi	r18, 0x00	; 0
    3d9e:	3f ef       	ldi	r19, 0xFF	; 255
    3da0:	4f e7       	ldi	r20, 0x7F	; 127
    3da2:	57 e4       	ldi	r21, 0x47	; 71
    3da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3da8:	18 16       	cp	r1, r24
    3daa:	4c f5       	brge	.+82     	; 0x3dfe <LCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dac:	6f a1       	ldd	r22, Y+39	; 0x27
    3dae:	78 a5       	ldd	r23, Y+40	; 0x28
    3db0:	89 a5       	ldd	r24, Y+41	; 0x29
    3db2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3db4:	20 e0       	ldi	r18, 0x00	; 0
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	40 e2       	ldi	r20, 0x20	; 32
    3dba:	51 e4       	ldi	r21, 0x41	; 65
    3dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	bc 01       	movw	r22, r24
    3dc6:	cd 01       	movw	r24, r26
    3dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dcc:	dc 01       	movw	r26, r24
    3dce:	cb 01       	movw	r24, r22
    3dd0:	9a a3       	std	Y+34, r25	; 0x22
    3dd2:	89 a3       	std	Y+33, r24	; 0x21
    3dd4:	0f c0       	rjmp	.+30     	; 0x3df4 <LCD_voidSendCommand+0xfa>
    3dd6:	88 ec       	ldi	r24, 0xC8	; 200
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	98 a3       	std	Y+32, r25	; 0x20
    3ddc:	8f 8f       	std	Y+31, r24	; 0x1f
    3dde:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3de0:	98 a1       	ldd	r25, Y+32	; 0x20
    3de2:	01 97       	sbiw	r24, 0x01	; 1
    3de4:	f1 f7       	brne	.-4      	; 0x3de2 <LCD_voidSendCommand+0xe8>
    3de6:	98 a3       	std	Y+32, r25	; 0x20
    3de8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dea:	89 a1       	ldd	r24, Y+33	; 0x21
    3dec:	9a a1       	ldd	r25, Y+34	; 0x22
    3dee:	01 97       	sbiw	r24, 0x01	; 1
    3df0:	9a a3       	std	Y+34, r25	; 0x22
    3df2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3df4:	89 a1       	ldd	r24, Y+33	; 0x21
    3df6:	9a a1       	ldd	r25, Y+34	; 0x22
    3df8:	00 97       	sbiw	r24, 0x00	; 0
    3dfa:	69 f7       	brne	.-38     	; 0x3dd6 <LCD_voidSendCommand+0xdc>
    3dfc:	05 c1       	rjmp	.+522    	; 0x4008 <LCD_voidSendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dfe:	6b a1       	ldd	r22, Y+35	; 0x23
    3e00:	7c a1       	ldd	r23, Y+36	; 0x24
    3e02:	8d a1       	ldd	r24, Y+37	; 0x25
    3e04:	9e a1       	ldd	r25, Y+38	; 0x26
    3e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e0a:	dc 01       	movw	r26, r24
    3e0c:	cb 01       	movw	r24, r22
    3e0e:	9a a3       	std	Y+34, r25	; 0x22
    3e10:	89 a3       	std	Y+33, r24	; 0x21
    3e12:	89 a1       	ldd	r24, Y+33	; 0x21
    3e14:	9a a1       	ldd	r25, Y+34	; 0x22
    3e16:	9e 8f       	std	Y+30, r25	; 0x1e
    3e18:	8d 8f       	std	Y+29, r24	; 0x1d
    3e1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e1e:	01 97       	sbiw	r24, 0x01	; 1
    3e20:	f1 f7       	brne	.-4      	; 0x3e1e <LCD_voidSendCommand+0x124>
    3e22:	9e 8f       	std	Y+30, r25	; 0x1e
    3e24:	8d 8f       	std	Y+29, r24	; 0x1d
    3e26:	f0 c0       	rjmp	.+480    	; 0x4008 <LCD_voidSendCommand+0x30e>
			_delay_ms(1);

		}
		else
		{
			voidWriteCmd(u8IndexCpy,u8CommandCpy);
    3e28:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e2a:	6c a5       	ldd	r22, Y+44	; 0x2c
    3e2c:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>
    3e30:	80 e0       	ldi	r24, 0x00	; 0
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	a0 e8       	ldi	r26, 0x80	; 128
    3e36:	bf e3       	ldi	r27, 0x3F	; 63
    3e38:	89 8f       	std	Y+25, r24	; 0x19
    3e3a:	9a 8f       	std	Y+26, r25	; 0x1a
    3e3c:	ab 8f       	std	Y+27, r26	; 0x1b
    3e3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e40:	69 8d       	ldd	r22, Y+25	; 0x19
    3e42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	4a ef       	ldi	r20, 0xFA	; 250
    3e4e:	54 e4       	ldi	r21, 0x44	; 68
    3e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	8d 8b       	std	Y+21, r24	; 0x15
    3e5a:	9e 8b       	std	Y+22, r25	; 0x16
    3e5c:	af 8b       	std	Y+23, r26	; 0x17
    3e5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e60:	6d 89       	ldd	r22, Y+21	; 0x15
    3e62:	7e 89       	ldd	r23, Y+22	; 0x16
    3e64:	8f 89       	ldd	r24, Y+23	; 0x17
    3e66:	98 8d       	ldd	r25, Y+24	; 0x18
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	40 e8       	ldi	r20, 0x80	; 128
    3e6e:	5f e3       	ldi	r21, 0x3F	; 63
    3e70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e74:	88 23       	and	r24, r24
    3e76:	2c f4       	brge	.+10     	; 0x3e82 <LCD_voidSendCommand+0x188>
		__ticks = 1;
    3e78:	81 e0       	ldi	r24, 0x01	; 1
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	9c 8b       	std	Y+20, r25	; 0x14
    3e7e:	8b 8b       	std	Y+19, r24	; 0x13
    3e80:	3f c0       	rjmp	.+126    	; 0x3f00 <LCD_voidSendCommand+0x206>
	else if (__tmp > 65535)
    3e82:	6d 89       	ldd	r22, Y+21	; 0x15
    3e84:	7e 89       	ldd	r23, Y+22	; 0x16
    3e86:	8f 89       	ldd	r24, Y+23	; 0x17
    3e88:	98 8d       	ldd	r25, Y+24	; 0x18
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	3f ef       	ldi	r19, 0xFF	; 255
    3e8e:	4f e7       	ldi	r20, 0x7F	; 127
    3e90:	57 e4       	ldi	r21, 0x47	; 71
    3e92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e96:	18 16       	cp	r1, r24
    3e98:	4c f5       	brge	.+82     	; 0x3eec <LCD_voidSendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e9a:	69 8d       	ldd	r22, Y+25	; 0x19
    3e9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ea0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	40 e2       	ldi	r20, 0x20	; 32
    3ea8:	51 e4       	ldi	r21, 0x41	; 65
    3eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	bc 01       	movw	r22, r24
    3eb4:	cd 01       	movw	r24, r26
    3eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eba:	dc 01       	movw	r26, r24
    3ebc:	cb 01       	movw	r24, r22
    3ebe:	9c 8b       	std	Y+20, r25	; 0x14
    3ec0:	8b 8b       	std	Y+19, r24	; 0x13
    3ec2:	0f c0       	rjmp	.+30     	; 0x3ee2 <LCD_voidSendCommand+0x1e8>
    3ec4:	88 ec       	ldi	r24, 0xC8	; 200
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	9a 8b       	std	Y+18, r25	; 0x12
    3eca:	89 8b       	std	Y+17, r24	; 0x11
    3ecc:	89 89       	ldd	r24, Y+17	; 0x11
    3ece:	9a 89       	ldd	r25, Y+18	; 0x12
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
    3ed2:	f1 f7       	brne	.-4      	; 0x3ed0 <LCD_voidSendCommand+0x1d6>
    3ed4:	9a 8b       	std	Y+18, r25	; 0x12
    3ed6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ed8:	8b 89       	ldd	r24, Y+19	; 0x13
    3eda:	9c 89       	ldd	r25, Y+20	; 0x14
    3edc:	01 97       	sbiw	r24, 0x01	; 1
    3ede:	9c 8b       	std	Y+20, r25	; 0x14
    3ee0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ee2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ee4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ee6:	00 97       	sbiw	r24, 0x00	; 0
    3ee8:	69 f7       	brne	.-38     	; 0x3ec4 <LCD_voidSendCommand+0x1ca>
    3eea:	14 c0       	rjmp	.+40     	; 0x3f14 <LCD_voidSendCommand+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eec:	6d 89       	ldd	r22, Y+21	; 0x15
    3eee:	7e 89       	ldd	r23, Y+22	; 0x16
    3ef0:	8f 89       	ldd	r24, Y+23	; 0x17
    3ef2:	98 8d       	ldd	r25, Y+24	; 0x18
    3ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	9c 8b       	std	Y+20, r25	; 0x14
    3efe:	8b 8b       	std	Y+19, r24	; 0x13
    3f00:	8b 89       	ldd	r24, Y+19	; 0x13
    3f02:	9c 89       	ldd	r25, Y+20	; 0x14
    3f04:	98 8b       	std	Y+16, r25	; 0x10
    3f06:	8f 87       	std	Y+15, r24	; 0x0f
    3f08:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f0a:	98 89       	ldd	r25, Y+16	; 0x10
    3f0c:	01 97       	sbiw	r24, 0x01	; 1
    3f0e:	f1 f7       	brne	.-4      	; 0x3f0c <LCD_voidSendCommand+0x212>
    3f10:	98 8b       	std	Y+16, r25	; 0x10
    3f12:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			voidWriteCmd(u8IndexCpy,u8CommandCpy<<4);
    3f14:	8c a5       	ldd	r24, Y+44	; 0x2c
    3f16:	98 2f       	mov	r25, r24
    3f18:	92 95       	swap	r25
    3f1a:	90 7f       	andi	r25, 0xF0	; 240
    3f1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f1e:	69 2f       	mov	r22, r25
    3f20:	0e 94 0e 1b 	call	0x361c	; 0x361c <voidWriteCmd>
    3f24:	80 e0       	ldi	r24, 0x00	; 0
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	a0 e8       	ldi	r26, 0x80	; 128
    3f2a:	bf e3       	ldi	r27, 0x3F	; 63
    3f2c:	8b 87       	std	Y+11, r24	; 0x0b
    3f2e:	9c 87       	std	Y+12, r25	; 0x0c
    3f30:	ad 87       	std	Y+13, r26	; 0x0d
    3f32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	4a ef       	ldi	r20, 0xFA	; 250
    3f42:	54 e4       	ldi	r21, 0x44	; 68
    3f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	8f 83       	std	Y+7, r24	; 0x07
    3f4e:	98 87       	std	Y+8, r25	; 0x08
    3f50:	a9 87       	std	Y+9, r26	; 0x09
    3f52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f54:	6f 81       	ldd	r22, Y+7	; 0x07
    3f56:	78 85       	ldd	r23, Y+8	; 0x08
    3f58:	89 85       	ldd	r24, Y+9	; 0x09
    3f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	40 e8       	ldi	r20, 0x80	; 128
    3f62:	5f e3       	ldi	r21, 0x3F	; 63
    3f64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f68:	88 23       	and	r24, r24
    3f6a:	2c f4       	brge	.+10     	; 0x3f76 <LCD_voidSendCommand+0x27c>
		__ticks = 1;
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	9e 83       	std	Y+6, r25	; 0x06
    3f72:	8d 83       	std	Y+5, r24	; 0x05
    3f74:	3f c0       	rjmp	.+126    	; 0x3ff4 <LCD_voidSendCommand+0x2fa>
	else if (__tmp > 65535)
    3f76:	6f 81       	ldd	r22, Y+7	; 0x07
    3f78:	78 85       	ldd	r23, Y+8	; 0x08
    3f7a:	89 85       	ldd	r24, Y+9	; 0x09
    3f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	3f ef       	ldi	r19, 0xFF	; 255
    3f82:	4f e7       	ldi	r20, 0x7F	; 127
    3f84:	57 e4       	ldi	r21, 0x47	; 71
    3f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f8a:	18 16       	cp	r1, r24
    3f8c:	4c f5       	brge	.+82     	; 0x3fe0 <LCD_voidSendCommand+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	40 e2       	ldi	r20, 0x20	; 32
    3f9c:	51 e4       	ldi	r21, 0x41	; 65
    3f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	bc 01       	movw	r22, r24
    3fa8:	cd 01       	movw	r24, r26
    3faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fae:	dc 01       	movw	r26, r24
    3fb0:	cb 01       	movw	r24, r22
    3fb2:	9e 83       	std	Y+6, r25	; 0x06
    3fb4:	8d 83       	std	Y+5, r24	; 0x05
    3fb6:	0f c0       	rjmp	.+30     	; 0x3fd6 <LCD_voidSendCommand+0x2dc>
    3fb8:	88 ec       	ldi	r24, 0xC8	; 200
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	9c 83       	std	Y+4, r25	; 0x04
    3fbe:	8b 83       	std	Y+3, r24	; 0x03
    3fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc4:	01 97       	sbiw	r24, 0x01	; 1
    3fc6:	f1 f7       	brne	.-4      	; 0x3fc4 <LCD_voidSendCommand+0x2ca>
    3fc8:	9c 83       	std	Y+4, r25	; 0x04
    3fca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fce:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd0:	01 97       	sbiw	r24, 0x01	; 1
    3fd2:	9e 83       	std	Y+6, r25	; 0x06
    3fd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fda:	00 97       	sbiw	r24, 0x00	; 0
    3fdc:	69 f7       	brne	.-38     	; 0x3fb8 <LCD_voidSendCommand+0x2be>
    3fde:	14 c0       	rjmp	.+40     	; 0x4008 <LCD_voidSendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    3fe2:	78 85       	ldd	r23, Y+8	; 0x08
    3fe4:	89 85       	ldd	r24, Y+9	; 0x09
    3fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fec:	dc 01       	movw	r26, r24
    3fee:	cb 01       	movw	r24, r22
    3ff0:	9e 83       	std	Y+6, r25	; 0x06
    3ff2:	8d 83       	std	Y+5, r24	; 0x05
    3ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff8:	9a 83       	std	Y+2, r25	; 0x02
    3ffa:	89 83       	std	Y+1, r24	; 0x01
    3ffc:	89 81       	ldd	r24, Y+1	; 0x01
    3ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    4000:	01 97       	sbiw	r24, 0x01	; 1
    4002:	f1 f7       	brne	.-4      	; 0x4000 <LCD_voidSendCommand+0x306>
    4004:	9a 83       	std	Y+2, r25	; 0x02
    4006:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
		}

}
    4008:	ac 96       	adiw	r28, 0x2c	; 44
    400a:	0f b6       	in	r0, 0x3f	; 63
    400c:	f8 94       	cli
    400e:	de bf       	out	0x3e, r29	; 62
    4010:	0f be       	out	0x3f, r0	; 63
    4012:	cd bf       	out	0x3d, r28	; 61
    4014:	cf 91       	pop	r28
    4016:	df 91       	pop	r29
    4018:	08 95       	ret

0000401a <LCD_voidSendString>:



void LCD_voidSendString(uint8 u8IndexCpy, uint8* pau8CharCpy)
{
    401a:	df 93       	push	r29
    401c:	cf 93       	push	r28
    401e:	00 d0       	rcall	.+0      	; 0x4020 <LCD_voidSendString+0x6>
    4020:	00 d0       	rcall	.+0      	; 0x4022 <LCD_voidSendString+0x8>
    4022:	cd b7       	in	r28, 0x3d	; 61
    4024:	de b7       	in	r29, 0x3e	; 62
    4026:	8a 83       	std	Y+2, r24	; 0x02
    4028:	7c 83       	std	Y+4, r23	; 0x04
    402a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8CntLoc=0;
    402c:	19 82       	std	Y+1, r1	; 0x01
    402e:	10 c0       	rjmp	.+32     	; 0x4050 <LCD_voidSendString+0x36>
	while(pau8CharCpy[u8CntLoc]!= '\0')
			{
				LCD_voidSendChar(u8IndexCpy,pau8CharCpy[u8CntLoc])	;
    4030:	89 81       	ldd	r24, Y+1	; 0x01
    4032:	28 2f       	mov	r18, r24
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	8b 81       	ldd	r24, Y+3	; 0x03
    4038:	9c 81       	ldd	r25, Y+4	; 0x04
    403a:	fc 01       	movw	r30, r24
    403c:	e2 0f       	add	r30, r18
    403e:	f3 1f       	adc	r31, r19
    4040:	90 81       	ld	r25, Z
    4042:	8a 81       	ldd	r24, Y+2	; 0x02
    4044:	69 2f       	mov	r22, r25
    4046:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <LCD_voidSendChar>
				u8CntLoc++;
    404a:	89 81       	ldd	r24, Y+1	; 0x01
    404c:	8f 5f       	subi	r24, 0xFF	; 255
    404e:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidSendString(uint8 u8IndexCpy, uint8* pau8CharCpy)
{
	uint8 u8CntLoc=0;
	while(pau8CharCpy[u8CntLoc]!= '\0')
    4050:	89 81       	ldd	r24, Y+1	; 0x01
    4052:	28 2f       	mov	r18, r24
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	8b 81       	ldd	r24, Y+3	; 0x03
    4058:	9c 81       	ldd	r25, Y+4	; 0x04
    405a:	fc 01       	movw	r30, r24
    405c:	e2 0f       	add	r30, r18
    405e:	f3 1f       	adc	r31, r19
    4060:	80 81       	ld	r24, Z
    4062:	88 23       	and	r24, r24
    4064:	29 f7       	brne	.-54     	; 0x4030 <LCD_voidSendString+0x16>
			{
				LCD_voidSendChar(u8IndexCpy,pau8CharCpy[u8CntLoc])	;
				u8CntLoc++;
			}
}
    4066:	0f 90       	pop	r0
    4068:	0f 90       	pop	r0
    406a:	0f 90       	pop	r0
    406c:	0f 90       	pop	r0
    406e:	cf 91       	pop	r28
    4070:	df 91       	pop	r29
    4072:	08 95       	ret

00004074 <LCD_voidClrScr>:

void LCD_voidClrScr(uint8 u8IndexCpy)
	{
    4074:	df 93       	push	r29
    4076:	cf 93       	push	r28
    4078:	0f 92       	push	r0
    407a:	cd b7       	in	r28, 0x3d	; 61
    407c:	de b7       	in	r29, 0x3e	; 62
    407e:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendCommand(u8IndexCpy,0x01);
    4080:	89 81       	ldd	r24, Y+1	; 0x01
    4082:	61 e0       	ldi	r22, 0x01	; 1
    4084:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <LCD_voidSendCommand>
	}
    4088:	0f 90       	pop	r0
    408a:	cf 91       	pop	r28
    408c:	df 91       	pop	r29
    408e:	08 95       	ret

00004090 <LCD_voidSendNumber>:

void LCD_voidSendNumber(uint8 u8IndexCpy,uint32 u32NumberCpy )
{
    4090:	0f 93       	push	r16
    4092:	1f 93       	push	r17
    4094:	df 93       	push	r29
    4096:	cf 93       	push	r28
    4098:	cd b7       	in	r28, 0x3d	; 61
    409a:	de b7       	in	r29, 0x3e	; 62
    409c:	62 97       	sbiw	r28, 0x12	; 18
    409e:	0f b6       	in	r0, 0x3f	; 63
    40a0:	f8 94       	cli
    40a2:	de bf       	out	0x3e, r29	; 62
    40a4:	0f be       	out	0x3f, r0	; 63
    40a6:	cd bf       	out	0x3d, r28	; 61
    40a8:	8e 87       	std	Y+14, r24	; 0x0e
    40aa:	4f 87       	std	Y+15, r20	; 0x0f
    40ac:	58 8b       	std	Y+16, r21	; 0x10
    40ae:	69 8b       	std	Y+17, r22	; 0x11
    40b0:	7a 8b       	std	Y+18, r23	; 0x12
	uint8 i=0, Num[10]={'\0'};
    40b2:	1b 82       	std	Y+3, r1	; 0x03
    40b4:	8a e0       	ldi	r24, 0x0A	; 10
    40b6:	fe 01       	movw	r30, r28
    40b8:	34 96       	adiw	r30, 0x04	; 4
    40ba:	df 01       	movw	r26, r30
    40bc:	98 2f       	mov	r25, r24
    40be:	1d 92       	st	X+, r1
    40c0:	9a 95       	dec	r25
    40c2:	e9 f7       	brne	.-6      	; 0x40be <LCD_voidSendNumber+0x2e>
	do
	{
		Num[i] = (u32NumberCpy%10);
    40c4:	8b 81       	ldd	r24, Y+3	; 0x03
    40c6:	08 2f       	mov	r16, r24
    40c8:	10 e0       	ldi	r17, 0x00	; 0
    40ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    40cc:	98 89       	ldd	r25, Y+16	; 0x10
    40ce:	a9 89       	ldd	r26, Y+17	; 0x11
    40d0:	ba 89       	ldd	r27, Y+18	; 0x12
    40d2:	2a e0       	ldi	r18, 0x0A	; 10
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	40 e0       	ldi	r20, 0x00	; 0
    40d8:	50 e0       	ldi	r21, 0x00	; 0
    40da:	bc 01       	movw	r22, r24
    40dc:	cd 01       	movw	r24, r26
    40de:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__udivmodsi4>
    40e2:	dc 01       	movw	r26, r24
    40e4:	cb 01       	movw	r24, r22
    40e6:	28 2f       	mov	r18, r24
    40e8:	ce 01       	movw	r24, r28
    40ea:	04 96       	adiw	r24, 0x04	; 4
    40ec:	fc 01       	movw	r30, r24
    40ee:	e0 0f       	add	r30, r16
    40f0:	f1 1f       	adc	r31, r17
    40f2:	20 83       	st	Z, r18
		u32NumberCpy /= 10;
    40f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    40f6:	98 89       	ldd	r25, Y+16	; 0x10
    40f8:	a9 89       	ldd	r26, Y+17	; 0x11
    40fa:	ba 89       	ldd	r27, Y+18	; 0x12
    40fc:	2a e0       	ldi	r18, 0x0A	; 10
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	40 e0       	ldi	r20, 0x00	; 0
    4102:	50 e0       	ldi	r21, 0x00	; 0
    4104:	bc 01       	movw	r22, r24
    4106:	cd 01       	movw	r24, r26
    4108:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__udivmodsi4>
    410c:	da 01       	movw	r26, r20
    410e:	c9 01       	movw	r24, r18
    4110:	8f 87       	std	Y+15, r24	; 0x0f
    4112:	98 8b       	std	Y+16, r25	; 0x10
    4114:	a9 8b       	std	Y+17, r26	; 0x11
    4116:	ba 8b       	std	Y+18, r27	; 0x12
		i++;
    4118:	8b 81       	ldd	r24, Y+3	; 0x03
    411a:	8f 5f       	subi	r24, 0xFF	; 255
    411c:	8b 83       	std	Y+3, r24	; 0x03
	}while(u32NumberCpy != 0);
    411e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4120:	98 89       	ldd	r25, Y+16	; 0x10
    4122:	a9 89       	ldd	r26, Y+17	; 0x11
    4124:	ba 89       	ldd	r27, Y+18	; 0x12
    4126:	00 97       	sbiw	r24, 0x00	; 0
    4128:	a1 05       	cpc	r26, r1
    412a:	b1 05       	cpc	r27, r1
    412c:	59 f6       	brne	.-106    	; 0x40c4 <LCD_voidSendNumber+0x34>
	i=10;
    412e:	8a e0       	ldi	r24, 0x0A	; 10
    4130:	8b 83       	std	Y+3, r24	; 0x03
    4132:	2a c0       	rjmp	.+84     	; 0x4188 <LCD_voidSendNumber+0xf8>
	while(i != 0)
	{
		i--;
    4134:	8b 81       	ldd	r24, Y+3	; 0x03
    4136:	81 50       	subi	r24, 0x01	; 1
    4138:	8b 83       	std	Y+3, r24	; 0x03
		if(Num[i] != '\0')
    413a:	8b 81       	ldd	r24, Y+3	; 0x03
    413c:	28 2f       	mov	r18, r24
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	ce 01       	movw	r24, r28
    4142:	04 96       	adiw	r24, 0x04	; 4
    4144:	fc 01       	movw	r30, r24
    4146:	e2 0f       	add	r30, r18
    4148:	f3 1f       	adc	r31, r19
    414a:	80 81       	ld	r24, Z
    414c:	88 23       	and	r24, r24
    414e:	e1 f0       	breq	.+56     	; 0x4188 <LCD_voidSendNumber+0xf8>
		{
			for(int j=i;i>0;i--)
    4150:	8b 81       	ldd	r24, Y+3	; 0x03
    4152:	88 2f       	mov	r24, r24
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	9a 83       	std	Y+2, r25	; 0x02
    4158:	89 83       	std	Y+1, r24	; 0x01
    415a:	12 c0       	rjmp	.+36     	; 0x4180 <LCD_voidSendNumber+0xf0>
			{
				LCD_voidSendChar(u8IndexCpy,Num[i]+'0');
    415c:	8b 81       	ldd	r24, Y+3	; 0x03
    415e:	28 2f       	mov	r18, r24
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	ce 01       	movw	r24, r28
    4164:	04 96       	adiw	r24, 0x04	; 4
    4166:	fc 01       	movw	r30, r24
    4168:	e2 0f       	add	r30, r18
    416a:	f3 1f       	adc	r31, r19
    416c:	80 81       	ld	r24, Z
    416e:	98 2f       	mov	r25, r24
    4170:	90 5d       	subi	r25, 0xD0	; 208
    4172:	8e 85       	ldd	r24, Y+14	; 0x0e
    4174:	69 2f       	mov	r22, r25
    4176:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <LCD_voidSendChar>
	while(i != 0)
	{
		i--;
		if(Num[i] != '\0')
		{
			for(int j=i;i>0;i--)
    417a:	8b 81       	ldd	r24, Y+3	; 0x03
    417c:	81 50       	subi	r24, 0x01	; 1
    417e:	8b 83       	std	Y+3, r24	; 0x03
    4180:	8b 81       	ldd	r24, Y+3	; 0x03
    4182:	88 23       	and	r24, r24
    4184:	59 f7       	brne	.-42     	; 0x415c <LCD_voidSendNumber+0xcc>
    4186:	03 c0       	rjmp	.+6      	; 0x418e <LCD_voidSendNumber+0xfe>
		Num[i] = (u32NumberCpy%10);
		u32NumberCpy /= 10;
		i++;
	}while(u32NumberCpy != 0);
	i=10;
	while(i != 0)
    4188:	8b 81       	ldd	r24, Y+3	; 0x03
    418a:	88 23       	and	r24, r24
    418c:	99 f6       	brne	.-90     	; 0x4134 <LCD_voidSendNumber+0xa4>
				LCD_voidSendChar(u8IndexCpy,Num[i]+'0');
			}
			break;
		}
	}
	LCD_voidSendChar(u8IndexCpy,Num[0]+'0');
    418e:	8c 81       	ldd	r24, Y+4	; 0x04
    4190:	98 2f       	mov	r25, r24
    4192:	90 5d       	subi	r25, 0xD0	; 208
    4194:	8e 85       	ldd	r24, Y+14	; 0x0e
    4196:	69 2f       	mov	r22, r25
    4198:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <LCD_voidSendChar>
}
    419c:	62 96       	adiw	r28, 0x12	; 18
    419e:	0f b6       	in	r0, 0x3f	; 63
    41a0:	f8 94       	cli
    41a2:	de bf       	out	0x3e, r29	; 62
    41a4:	0f be       	out	0x3f, r0	; 63
    41a6:	cd bf       	out	0x3d, r28	; 61
    41a8:	cf 91       	pop	r28
    41aa:	df 91       	pop	r29
    41ac:	1f 91       	pop	r17
    41ae:	0f 91       	pop	r16
    41b0:	08 95       	ret

000041b2 <LCD_voidDisplayHex>:


void LCD_voidDisplayHex(uint8 u8IndexCpy,uint16 u16HexNumberCpy )
{}
    41b2:	df 93       	push	r29
    41b4:	cf 93       	push	r28
    41b6:	00 d0       	rcall	.+0      	; 0x41b8 <LCD_voidDisplayHex+0x6>
    41b8:	0f 92       	push	r0
    41ba:	cd b7       	in	r28, 0x3d	; 61
    41bc:	de b7       	in	r29, 0x3e	; 62
    41be:	89 83       	std	Y+1, r24	; 0x01
    41c0:	7b 83       	std	Y+3, r23	; 0x03
    41c2:	6a 83       	std	Y+2, r22	; 0x02
    41c4:	0f 90       	pop	r0
    41c6:	0f 90       	pop	r0
    41c8:	0f 90       	pop	r0
    41ca:	cf 91       	pop	r28
    41cc:	df 91       	pop	r29
    41ce:	08 95       	ret

000041d0 <LCD_voidMoveCourser>:
void LCD_voidMoveCourser(uint8 u8IndexCpy,uint8 u8RowCPy,uint8 u8ColmCpy)
{
    41d0:	df 93       	push	r29
    41d2:	cf 93       	push	r28
    41d4:	00 d0       	rcall	.+0      	; 0x41d6 <LCD_voidMoveCourser+0x6>
    41d6:	00 d0       	rcall	.+0      	; 0x41d8 <LCD_voidMoveCourser+0x8>
    41d8:	cd b7       	in	r28, 0x3d	; 61
    41da:	de b7       	in	r29, 0x3e	; 62
    41dc:	8a 83       	std	Y+2, r24	; 0x02
    41de:	6b 83       	std	Y+3, r22	; 0x03
    41e0:	4c 83       	std	Y+4, r20	; 0x04
	uint8 u8commnad=0;
    41e2:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuWritePin(lcdarr[u8IndexCpy].lcdhwconfig.u8RS,DIO_LOW);
    41e4:	8a 81       	ldd	r24, Y+2	; 0x02
    41e6:	28 2f       	mov	r18, r24
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	c9 01       	movw	r24, r18
    41ec:	88 0f       	add	r24, r24
    41ee:	99 1f       	adc	r25, r25
    41f0:	82 0f       	add	r24, r18
    41f2:	93 1f       	adc	r25, r19
    41f4:	88 0f       	add	r24, r24
    41f6:	99 1f       	adc	r25, r25
    41f8:	88 0f       	add	r24, r24
    41fa:	99 1f       	adc	r25, r25
    41fc:	fc 01       	movw	r30, r24
    41fe:	e3 5e       	subi	r30, 0xE3	; 227
    4200:	fe 4f       	sbci	r31, 0xFE	; 254
    4202:	80 81       	ld	r24, Z
    4204:	60 e0       	ldi	r22, 0x00	; 0
    4206:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
	if(u8RowCPy == 1)
    420a:	8b 81       	ldd	r24, Y+3	; 0x03
    420c:	81 30       	cpi	r24, 0x01	; 1
    420e:	41 f4       	brne	.+16     	; 0x4220 <LCD_voidMoveCourser+0x50>
	{
		u8commnad = LCD_FIRST_POS_IN_L1 + u8ColmCpy -1;
    4210:	8c 81       	ldd	r24, Y+4	; 0x04
    4212:	81 58       	subi	r24, 0x81	; 129
    4214:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendCommand(u8IndexCpy,u8commnad);
    4216:	8a 81       	ldd	r24, Y+2	; 0x02
    4218:	69 81       	ldd	r22, Y+1	; 0x01
    421a:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <LCD_voidSendCommand>
    421e:	0a c0       	rjmp	.+20     	; 0x4234 <LCD_voidMoveCourser+0x64>
	}
	else if(u8RowCPy == 2)
    4220:	8b 81       	ldd	r24, Y+3	; 0x03
    4222:	82 30       	cpi	r24, 0x02	; 2
    4224:	39 f4       	brne	.+14     	; 0x4234 <LCD_voidMoveCourser+0x64>
	{
		u8commnad = LCD_FIRST_POS_IN_L2 + u8ColmCpy -1;
    4226:	8c 81       	ldd	r24, Y+4	; 0x04
    4228:	81 54       	subi	r24, 0x41	; 65
    422a:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendCommand(u8IndexCpy,u8commnad);
    422c:	8a 81       	ldd	r24, Y+2	; 0x02
    422e:	69 81       	ldd	r22, Y+1	; 0x01
    4230:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <LCD_voidSendCommand>
	}
	else
	{
		/* NOTHING */
	}
}
    4234:	0f 90       	pop	r0
    4236:	0f 90       	pop	r0
    4238:	0f 90       	pop	r0
    423a:	0f 90       	pop	r0
    423c:	cf 91       	pop	r28
    423e:	df 91       	pop	r29
    4240:	08 95       	ret

00004242 <KPD_voidInit>:
#include "Keypad_Private.h"



void KPD_voidInit(void)
{
    4242:	df 93       	push	r29
    4244:	cf 93       	push	r28
    4246:	cd b7       	in	r28, 0x3d	; 61
    4248:	de b7       	in	r29, 0x3e	; 62
	DIO_enuWritePin(KPD_COL0,DIO_HIGH);
    424a:	8c e1       	ldi	r24, 0x1C	; 28
    424c:	61 e0       	ldi	r22, 0x01	; 1
    424e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
	DIO_enuWritePin(KPD_COL1,DIO_HIGH);
    4252:	8d e1       	ldi	r24, 0x1D	; 29
    4254:	61 e0       	ldi	r22, 0x01	; 1
    4256:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
	DIO_enuWritePin(KPD_COL2,DIO_HIGH);
    425a:	8e e1       	ldi	r24, 0x1E	; 30
    425c:	61 e0       	ldi	r22, 0x01	; 1
    425e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
	DIO_enuWritePin(KPD_COL3,DIO_HIGH);
    4262:	8f e1       	ldi	r24, 0x1F	; 31
    4264:	61 e0       	ldi	r22, 0x01	; 1
    4266:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>

	DIO_enuStatePullup(KPD_ROW0,DIO_ACTIVATE_PULLUP);
    426a:	88 e1       	ldi	r24, 0x18	; 24
    426c:	61 e0       	ldi	r22, 0x01	; 1
    426e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <DIO_enuStatePullup>
	DIO_enuStatePullup(KPD_ROW1,DIO_ACTIVATE_PULLUP);
    4272:	89 e1       	ldi	r24, 0x19	; 25
    4274:	61 e0       	ldi	r22, 0x01	; 1
    4276:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <DIO_enuStatePullup>
	DIO_enuStatePullup(KPD_ROW2,DIO_ACTIVATE_PULLUP);
    427a:	8a e1       	ldi	r24, 0x1A	; 26
    427c:	61 e0       	ldi	r22, 0x01	; 1
    427e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <DIO_enuStatePullup>
	DIO_enuStatePullup(KPD_ROW3,DIO_ACTIVATE_PULLUP);
    4282:	8b e1       	ldi	r24, 0x1B	; 27
    4284:	61 e0       	ldi	r22, 0x01	; 1
    4286:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <DIO_enuStatePullup>

}
    428a:	cf 91       	pop	r28
    428c:	df 91       	pop	r29
    428e:	08 95       	ret

00004290 <KPD_u8GetPressedKey>:
uint8 KPD_u8GetPressedKey(void)
{
    4290:	df 93       	push	r29
    4292:	cf 93       	push	r28
    4294:	00 d0       	rcall	.+0      	; 0x4296 <KPD_u8GetPressedKey+0x6>
    4296:	cd b7       	in	r28, 0x3d	; 61
    4298:	de b7       	in	r29, 0x3e	; 62
	static uint8 u8KpdColArr[4]={KPD_COL0,KPD_COL1,KPD_COL2,KPD_COL3};
	static uint8 u8KpdRowArr[4]={KPD_ROW0,KPD_ROW1,KPD_ROW2,KPD_ROW3};
	static uint8 u8KpdColIdx;
	static uint8 u8KpdRowIdx;
	static uint8 u8KpdPinState;
	uint8 u8KpdPressedKeyLoc=NOT_KEY_PRESSED;
    429a:	8f ef       	ldi	r24, 0xFF	; 255
    429c:	89 83       	std	Y+1, r24	; 0x01

	static uint8 au8KpdArrLoc[4][4]= KPD_PUTTONS;


	for (u8KpdColIdx=0 ;u8KpdColIdx<4 ;u8KpdColIdx++)
    429e:	10 92 50 01 	sts	0x0150, r1
    42a2:	6d c0       	rjmp	.+218    	; 0x437e <KPD_u8GetPressedKey+0xee>
	{
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_LOW);
    42a4:	80 91 50 01 	lds	r24, 0x0150
    42a8:	88 2f       	mov	r24, r24
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	fc 01       	movw	r30, r24
    42ae:	e4 5c       	subi	r30, 0xC4	; 196
    42b0:	fe 4f       	sbci	r31, 0xFE	; 254
    42b2:	80 81       	ld	r24, Z
    42b4:	60 e0       	ldi	r22, 0x00	; 0
    42b6:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>


		for(u8KpdRowIdx=0;u8KpdRowIdx<4;u8KpdRowIdx++)
    42ba:	10 92 4f 01 	sts	0x014F, r1
    42be:	4a c0       	rjmp	.+148    	; 0x4354 <KPD_u8GetPressedKey+0xc4>
		{
			DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
    42c0:	80 91 4f 01 	lds	r24, 0x014F
    42c4:	88 2f       	mov	r24, r24
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	fc 01       	movw	r30, r24
    42ca:	e8 5c       	subi	r30, 0xC8	; 200
    42cc:	fe 4f       	sbci	r31, 0xFE	; 254
    42ce:	80 81       	ld	r24, Z
    42d0:	2e e4       	ldi	r18, 0x4E	; 78
    42d2:	31 e0       	ldi	r19, 0x01	; 1
    42d4:	b9 01       	movw	r22, r18
    42d6:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_enuReadPin>
			if (u8KpdPinState==DIO_LOW)
    42da:	80 91 4e 01 	lds	r24, 0x014E
    42de:	88 23       	and	r24, r24
    42e0:	a1 f5       	brne	.+104    	; 0x434a <KPD_u8GetPressedKey+0xba>
			{
				u8KpdPressedKeyLoc=au8KpdArrLoc[u8KpdRowIdx][u8KpdColIdx];
    42e2:	80 91 4f 01 	lds	r24, 0x014F
    42e6:	48 2f       	mov	r20, r24
    42e8:	50 e0       	ldi	r21, 0x00	; 0
    42ea:	80 91 50 01 	lds	r24, 0x0150
    42ee:	28 2f       	mov	r18, r24
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	ca 01       	movw	r24, r20
    42f4:	88 0f       	add	r24, r24
    42f6:	99 1f       	adc	r25, r25
    42f8:	88 0f       	add	r24, r24
    42fa:	99 1f       	adc	r25, r25
    42fc:	82 0f       	add	r24, r18
    42fe:	93 1f       	adc	r25, r19
    4300:	fc 01       	movw	r30, r24
    4302:	e8 5d       	subi	r30, 0xD8	; 216
    4304:	fe 4f       	sbci	r31, 0xFE	; 254
    4306:	80 81       	ld	r24, Z
    4308:	89 83       	std	Y+1, r24	; 0x01
    430a:	0d c0       	rjmp	.+26     	; 0x4326 <KPD_u8GetPressedKey+0x96>

				while(u8KpdPinState==DIO_LOW)
				{
					DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
    430c:	80 91 4f 01 	lds	r24, 0x014F
    4310:	88 2f       	mov	r24, r24
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	fc 01       	movw	r30, r24
    4316:	e8 5c       	subi	r30, 0xC8	; 200
    4318:	fe 4f       	sbci	r31, 0xFE	; 254
    431a:	80 81       	ld	r24, Z
    431c:	2e e4       	ldi	r18, 0x4E	; 78
    431e:	31 e0       	ldi	r19, 0x01	; 1
    4320:	b9 01       	movw	r22, r18
    4322:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_enuReadPin>
			DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
			if (u8KpdPinState==DIO_LOW)
			{
				u8KpdPressedKeyLoc=au8KpdArrLoc[u8KpdRowIdx][u8KpdColIdx];

				while(u8KpdPinState==DIO_LOW)
    4326:	80 91 4e 01 	lds	r24, 0x014E
    432a:	88 23       	and	r24, r24
    432c:	79 f3       	breq	.-34     	; 0x430c <KPD_u8GetPressedKey+0x7c>
				{
					DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
				}
				DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_HIGH);
    432e:	80 91 50 01 	lds	r24, 0x0150
    4332:	88 2f       	mov	r24, r24
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	fc 01       	movw	r30, r24
    4338:	e4 5c       	subi	r30, 0xC4	; 196
    433a:	fe 4f       	sbci	r31, 0xFE	; 254
    433c:	80 81       	ld	r24, Z
    433e:	61 e0       	ldi	r22, 0x01	; 1
    4340:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>

				return u8KpdPressedKeyLoc;
    4344:	89 81       	ldd	r24, Y+1	; 0x01
    4346:	8a 83       	std	Y+2, r24	; 0x02
    4348:	21 c0       	rjmp	.+66     	; 0x438c <KPD_u8GetPressedKey+0xfc>
	for (u8KpdColIdx=0 ;u8KpdColIdx<4 ;u8KpdColIdx++)
	{
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_LOW);


		for(u8KpdRowIdx=0;u8KpdRowIdx<4;u8KpdRowIdx++)
    434a:	80 91 4f 01 	lds	r24, 0x014F
    434e:	8f 5f       	subi	r24, 0xFF	; 255
    4350:	80 93 4f 01 	sts	0x014F, r24
    4354:	80 91 4f 01 	lds	r24, 0x014F
    4358:	84 30       	cpi	r24, 0x04	; 4
    435a:	08 f4       	brcc	.+2      	; 0x435e <KPD_u8GetPressedKey+0xce>
    435c:	b1 cf       	rjmp	.-158    	; 0x42c0 <KPD_u8GetPressedKey+0x30>

				return u8KpdPressedKeyLoc;
			}

		}
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_HIGH);
    435e:	80 91 50 01 	lds	r24, 0x0150
    4362:	88 2f       	mov	r24, r24
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	fc 01       	movw	r30, r24
    4368:	e4 5c       	subi	r30, 0xC4	; 196
    436a:	fe 4f       	sbci	r31, 0xFE	; 254
    436c:	80 81       	ld	r24, Z
    436e:	61 e0       	ldi	r22, 0x01	; 1
    4370:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
	uint8 u8KpdPressedKeyLoc=NOT_KEY_PRESSED;

	static uint8 au8KpdArrLoc[4][4]= KPD_PUTTONS;


	for (u8KpdColIdx=0 ;u8KpdColIdx<4 ;u8KpdColIdx++)
    4374:	80 91 50 01 	lds	r24, 0x0150
    4378:	8f 5f       	subi	r24, 0xFF	; 255
    437a:	80 93 50 01 	sts	0x0150, r24
    437e:	80 91 50 01 	lds	r24, 0x0150
    4382:	84 30       	cpi	r24, 0x04	; 4
    4384:	08 f4       	brcc	.+2      	; 0x4388 <KPD_u8GetPressedKey+0xf8>
    4386:	8e cf       	rjmp	.-228    	; 0x42a4 <KPD_u8GetPressedKey+0x14>

		}
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_HIGH);

	}
	return u8KpdPressedKeyLoc;
    4388:	89 81       	ldd	r24, Y+1	; 0x01
    438a:	8a 83       	std	Y+2, r24	; 0x02
    438c:	8a 81       	ldd	r24, Y+2	; 0x02


}
    438e:	0f 90       	pop	r0
    4390:	0f 90       	pop	r0
    4392:	cf 91       	pop	r28
    4394:	df 91       	pop	r29
    4396:	08 95       	ret

00004398 <DCM_voidRotateCW>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "../DCM/DC_Motor_Config.h"
#include "../DCM/DC_Motor_Interface.h"

void DCM_voidRotateCW(void)
{
    4398:	df 93       	push	r29
    439a:	cf 93       	push	r28
    439c:	cd b7       	in	r28, 0x3d	; 61
    439e:	de b7       	in	r29, 0x3e	; 62
	DIO_enuWritePin(DCM_PIN0,DIO_LOW);
    43a0:	80 e1       	ldi	r24, 0x10	; 16
    43a2:	60 e0       	ldi	r22, 0x00	; 0
    43a4:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
	DIO_enuWritePin(DCM_PIN1,DIO_HIGH);
    43a8:	81 e1       	ldi	r24, 0x11	; 17
    43aa:	61 e0       	ldi	r22, 0x01	; 1
    43ac:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
}
    43b0:	cf 91       	pop	r28
    43b2:	df 91       	pop	r29
    43b4:	08 95       	ret

000043b6 <DCM_voidRotateCCW>:

void DCM_voidRotateCCW(void)
{
    43b6:	df 93       	push	r29
    43b8:	cf 93       	push	r28
    43ba:	cd b7       	in	r28, 0x3d	; 61
    43bc:	de b7       	in	r29, 0x3e	; 62
	DIO_enuWritePin(DCM_PIN0,DIO_HIGH);
    43be:	80 e1       	ldi	r24, 0x10	; 16
    43c0:	61 e0       	ldi	r22, 0x01	; 1
    43c2:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
	DIO_enuWritePin(DCM_PIN1,DIO_LOW);
    43c6:	81 e1       	ldi	r24, 0x11	; 17
    43c8:	60 e0       	ldi	r22, 0x00	; 0
    43ca:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
}
    43ce:	cf 91       	pop	r28
    43d0:	df 91       	pop	r29
    43d2:	08 95       	ret

000043d4 <DCM_voidStop>:

void DCM_voidStop(void)
{
    43d4:	df 93       	push	r29
    43d6:	cf 93       	push	r28
    43d8:	cd b7       	in	r28, 0x3d	; 61
    43da:	de b7       	in	r29, 0x3e	; 62
	DIO_enuWritePin(DCM_PIN0,DIO_LOW);
    43dc:	80 e1       	ldi	r24, 0x10	; 16
    43de:	60 e0       	ldi	r22, 0x00	; 0
    43e0:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
	DIO_enuWritePin(DCM_PIN1,DIO_LOW);
    43e4:	81 e1       	ldi	r24, 0x11	; 17
    43e6:	60 e0       	ldi	r22, 0x00	; 0
    43e8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_enuWritePin>
}
    43ec:	cf 91       	pop	r28
    43ee:	df 91       	pop	r29
    43f0:	08 95       	ret

000043f2 <Hours>:

uint8 u8Key=0xff;
uint8 hours=0,minutes=0,seconds=0;

void Hours(void)
{
    43f2:	df 93       	push	r29
    43f4:	cf 93       	push	r28
    43f6:	cd b7       	in	r28, 0x3d	; 61
    43f8:	de b7       	in	r29, 0x3e	; 62
    43fa:	6d 97       	sbiw	r28, 0x1d	; 29
    43fc:	0f b6       	in	r0, 0x3f	; 63
    43fe:	f8 94       	cli
    4400:	de bf       	out	0x3e, r29	; 62
    4402:	0f be       	out	0x3f, r0	; 63
    4404:	cd bf       	out	0x3d, r28	; 61
	uint8 flag=0;
    4406:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_voidClrScr(0);
    4408:	80 e0       	ldi	r24, 0x00	; 0
    440a:	0e 94 3a 20 	call	0x4074	; 0x4074 <LCD_voidClrScr>
	LCD_voidSendString(0,"hours=--");
    440e:	20 e6       	ldi	r18, 0x60	; 96
    4410:	30 e0       	ldi	r19, 0x00	; 0
    4412:	80 e0       	ldi	r24, 0x00	; 0
    4414:	b9 01       	movw	r22, r18
    4416:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
	LCD_voidMoveCourser(0,1,7);
    441a:	80 e0       	ldi	r24, 0x00	; 0
    441c:	61 e0       	ldi	r22, 0x01	; 1
    441e:	47 e0       	ldi	r20, 0x07	; 7
    4420:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_voidMoveCourser>
	while(1)
	{
		u8Key = KPD_u8GetPressedKey();
    4424:	0e 94 48 21 	call	0x4290	; 0x4290 <KPD_u8GetPressedKey>
    4428:	80 93 40 01 	sts	0x0140, r24
		if(u8Key != 0xff)
    442c:	80 91 40 01 	lds	r24, 0x0140
    4430:	8f 3f       	cpi	r24, 0xFF	; 255
    4432:	c1 f3       	breq	.-16     	; 0x4424 <Hours+0x32>
		{
			if(u8Key <= '2' && flag == 0 && (u8Key != '/' && u8Key != '*' && u8Key != '+' && u8Key != '-'))
    4434:	80 91 40 01 	lds	r24, 0x0140
    4438:	83 33       	cpi	r24, 0x33	; 51
    443a:	08 f5       	brcc	.+66     	; 0x447e <Hours+0x8c>
    443c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    443e:	88 23       	and	r24, r24
    4440:	f1 f4       	brne	.+60     	; 0x447e <Hours+0x8c>
    4442:	80 91 40 01 	lds	r24, 0x0140
    4446:	8f 32       	cpi	r24, 0x2F	; 47
    4448:	d1 f0       	breq	.+52     	; 0x447e <Hours+0x8c>
    444a:	80 91 40 01 	lds	r24, 0x0140
    444e:	8a 32       	cpi	r24, 0x2A	; 42
    4450:	b1 f0       	breq	.+44     	; 0x447e <Hours+0x8c>
    4452:	80 91 40 01 	lds	r24, 0x0140
    4456:	8b 32       	cpi	r24, 0x2B	; 43
    4458:	91 f0       	breq	.+36     	; 0x447e <Hours+0x8c>
    445a:	80 91 40 01 	lds	r24, 0x0140
    445e:	8d 32       	cpi	r24, 0x2D	; 45
    4460:	71 f0       	breq	.+28     	; 0x447e <Hours+0x8c>
			{
				hours = (u8Key-'0');
    4462:	80 91 40 01 	lds	r24, 0x0140
    4466:	80 53       	subi	r24, 0x30	; 48
    4468:	80 93 51 01 	sts	0x0151, r24
				LCD_voidSendChar(0,u8Key);
    446c:	90 91 40 01 	lds	r25, 0x0140
    4470:	80 e0       	ldi	r24, 0x00	; 0
    4472:	69 2f       	mov	r22, r25
    4474:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <LCD_voidSendChar>
				flag=1;
    4478:	81 e0       	ldi	r24, 0x01	; 1
    447a:	8d 8f       	std	Y+29, r24	; 0x1d
    447c:	d3 cf       	rjmp	.-90     	; 0x4424 <Hours+0x32>
			}
			else if(u8Key <= '9' && flag == 1 && (u8Key != '/' && u8Key != '*' && u8Key != '+' && u8Key != '-'))
    447e:	80 91 40 01 	lds	r24, 0x0140
    4482:	8a 33       	cpi	r24, 0x3A	; 58
    4484:	08 f0       	brcs	.+2      	; 0x4488 <Hours+0x96>
    4486:	de c0       	rjmp	.+444    	; 0x4644 <Hours+0x252>
    4488:	8d 8d       	ldd	r24, Y+29	; 0x1d
    448a:	81 30       	cpi	r24, 0x01	; 1
    448c:	09 f0       	breq	.+2      	; 0x4490 <Hours+0x9e>
    448e:	da c0       	rjmp	.+436    	; 0x4644 <Hours+0x252>
    4490:	80 91 40 01 	lds	r24, 0x0140
    4494:	8f 32       	cpi	r24, 0x2F	; 47
    4496:	09 f4       	brne	.+2      	; 0x449a <Hours+0xa8>
    4498:	d5 c0       	rjmp	.+426    	; 0x4644 <Hours+0x252>
    449a:	80 91 40 01 	lds	r24, 0x0140
    449e:	8a 32       	cpi	r24, 0x2A	; 42
    44a0:	09 f4       	brne	.+2      	; 0x44a4 <Hours+0xb2>
    44a2:	d0 c0       	rjmp	.+416    	; 0x4644 <Hours+0x252>
    44a4:	80 91 40 01 	lds	r24, 0x0140
    44a8:	8b 32       	cpi	r24, 0x2B	; 43
    44aa:	09 f4       	brne	.+2      	; 0x44ae <Hours+0xbc>
    44ac:	cb c0       	rjmp	.+406    	; 0x4644 <Hours+0x252>
    44ae:	80 91 40 01 	lds	r24, 0x0140
    44b2:	8d 32       	cpi	r24, 0x2D	; 45
    44b4:	09 f4       	brne	.+2      	; 0x44b8 <Hours+0xc6>
    44b6:	c6 c0       	rjmp	.+396    	; 0x4644 <Hours+0x252>
			{
				LCD_voidSendChar(0,u8Key);
    44b8:	90 91 40 01 	lds	r25, 0x0140
    44bc:	80 e0       	ldi	r24, 0x00	; 0
    44be:	69 2f       	mov	r22, r25
    44c0:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <LCD_voidSendChar>
				if(hours == 2)
    44c4:	80 91 51 01 	lds	r24, 0x0151
    44c8:	82 30       	cpi	r24, 0x02	; 2
    44ca:	09 f0       	breq	.+2      	; 0x44ce <Hours+0xdc>
    44cc:	a5 c0       	rjmp	.+330    	; 0x4618 <Hours+0x226>
				{
					if(u8Key <= '3')
    44ce:	80 91 40 01 	lds	r24, 0x0140
    44d2:	84 33       	cpi	r24, 0x34	; 52
    44d4:	b0 f4       	brcc	.+44     	; 0x4502 <Hours+0x110>
					{
						hours = (hours*10) + (u8Key-'0');
    44d6:	80 91 51 01 	lds	r24, 0x0151
    44da:	88 2f       	mov	r24, r24
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	9c 01       	movw	r18, r24
    44e0:	22 0f       	add	r18, r18
    44e2:	33 1f       	adc	r19, r19
    44e4:	c9 01       	movw	r24, r18
    44e6:	88 0f       	add	r24, r24
    44e8:	99 1f       	adc	r25, r25
    44ea:	88 0f       	add	r24, r24
    44ec:	99 1f       	adc	r25, r25
    44ee:	82 0f       	add	r24, r18
    44f0:	93 1f       	adc	r25, r19
    44f2:	98 2f       	mov	r25, r24
    44f4:	80 91 40 01 	lds	r24, 0x0140
    44f8:	89 0f       	add	r24, r25
    44fa:	80 53       	subi	r24, 0x30	; 48
    44fc:	80 93 51 01 	sts	0x0151, r24
    4500:	2c c1       	rjmp	.+600    	; 0x475a <Hours+0x368>
						break;
					}
					else
					{
						LCD_voidClrScr(0);
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	0e 94 3a 20 	call	0x4074	; 0x4074 <LCD_voidClrScr>
						LCD_voidSendString(0,"No hours > 24");
    4508:	29 e6       	ldi	r18, 0x69	; 105
    450a:	30 e0       	ldi	r19, 0x00	; 0
    450c:	80 e0       	ldi	r24, 0x00	; 0
    450e:	b9 01       	movw	r22, r18
    4510:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
    4514:	80 e0       	ldi	r24, 0x00	; 0
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	aa ef       	ldi	r26, 0xFA	; 250
    451a:	b3 e4       	ldi	r27, 0x43	; 67
    451c:	89 8f       	std	Y+25, r24	; 0x19
    451e:	9a 8f       	std	Y+26, r25	; 0x1a
    4520:	ab 8f       	std	Y+27, r26	; 0x1b
    4522:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4524:	69 8d       	ldd	r22, Y+25	; 0x19
    4526:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4528:	8b 8d       	ldd	r24, Y+27	; 0x1b
    452a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	4a ef       	ldi	r20, 0xFA	; 250
    4532:	54 e4       	ldi	r21, 0x44	; 68
    4534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	8d 8b       	std	Y+21, r24	; 0x15
    453e:	9e 8b       	std	Y+22, r25	; 0x16
    4540:	af 8b       	std	Y+23, r26	; 0x17
    4542:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4544:	6d 89       	ldd	r22, Y+21	; 0x15
    4546:	7e 89       	ldd	r23, Y+22	; 0x16
    4548:	8f 89       	ldd	r24, Y+23	; 0x17
    454a:	98 8d       	ldd	r25, Y+24	; 0x18
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	40 e8       	ldi	r20, 0x80	; 128
    4552:	5f e3       	ldi	r21, 0x3F	; 63
    4554:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4558:	88 23       	and	r24, r24
    455a:	2c f4       	brge	.+10     	; 0x4566 <Hours+0x174>
		__ticks = 1;
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	9c 8b       	std	Y+20, r25	; 0x14
    4562:	8b 8b       	std	Y+19, r24	; 0x13
    4564:	3f c0       	rjmp	.+126    	; 0x45e4 <Hours+0x1f2>
	else if (__tmp > 65535)
    4566:	6d 89       	ldd	r22, Y+21	; 0x15
    4568:	7e 89       	ldd	r23, Y+22	; 0x16
    456a:	8f 89       	ldd	r24, Y+23	; 0x17
    456c:	98 8d       	ldd	r25, Y+24	; 0x18
    456e:	20 e0       	ldi	r18, 0x00	; 0
    4570:	3f ef       	ldi	r19, 0xFF	; 255
    4572:	4f e7       	ldi	r20, 0x7F	; 127
    4574:	57 e4       	ldi	r21, 0x47	; 71
    4576:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    457a:	18 16       	cp	r1, r24
    457c:	4c f5       	brge	.+82     	; 0x45d0 <Hours+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    457e:	69 8d       	ldd	r22, Y+25	; 0x19
    4580:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4582:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4584:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4586:	20 e0       	ldi	r18, 0x00	; 0
    4588:	30 e0       	ldi	r19, 0x00	; 0
    458a:	40 e2       	ldi	r20, 0x20	; 32
    458c:	51 e4       	ldi	r21, 0x41	; 65
    458e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	bc 01       	movw	r22, r24
    4598:	cd 01       	movw	r24, r26
    459a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    459e:	dc 01       	movw	r26, r24
    45a0:	cb 01       	movw	r24, r22
    45a2:	9c 8b       	std	Y+20, r25	; 0x14
    45a4:	8b 8b       	std	Y+19, r24	; 0x13
    45a6:	0f c0       	rjmp	.+30     	; 0x45c6 <Hours+0x1d4>
    45a8:	88 ec       	ldi	r24, 0xC8	; 200
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	9a 8b       	std	Y+18, r25	; 0x12
    45ae:	89 8b       	std	Y+17, r24	; 0x11
    45b0:	89 89       	ldd	r24, Y+17	; 0x11
    45b2:	9a 89       	ldd	r25, Y+18	; 0x12
    45b4:	01 97       	sbiw	r24, 0x01	; 1
    45b6:	f1 f7       	brne	.-4      	; 0x45b4 <Hours+0x1c2>
    45b8:	9a 8b       	std	Y+18, r25	; 0x12
    45ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45bc:	8b 89       	ldd	r24, Y+19	; 0x13
    45be:	9c 89       	ldd	r25, Y+20	; 0x14
    45c0:	01 97       	sbiw	r24, 0x01	; 1
    45c2:	9c 8b       	std	Y+20, r25	; 0x14
    45c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45c6:	8b 89       	ldd	r24, Y+19	; 0x13
    45c8:	9c 89       	ldd	r25, Y+20	; 0x14
    45ca:	00 97       	sbiw	r24, 0x00	; 0
    45cc:	69 f7       	brne	.-38     	; 0x45a8 <Hours+0x1b6>
    45ce:	14 c0       	rjmp	.+40     	; 0x45f8 <Hours+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45d0:	6d 89       	ldd	r22, Y+21	; 0x15
    45d2:	7e 89       	ldd	r23, Y+22	; 0x16
    45d4:	8f 89       	ldd	r24, Y+23	; 0x17
    45d6:	98 8d       	ldd	r25, Y+24	; 0x18
    45d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	9c 8b       	std	Y+20, r25	; 0x14
    45e2:	8b 8b       	std	Y+19, r24	; 0x13
    45e4:	8b 89       	ldd	r24, Y+19	; 0x13
    45e6:	9c 89       	ldd	r25, Y+20	; 0x14
    45e8:	98 8b       	std	Y+16, r25	; 0x10
    45ea:	8f 87       	std	Y+15, r24	; 0x0f
    45ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    45ee:	98 89       	ldd	r25, Y+16	; 0x10
    45f0:	01 97       	sbiw	r24, 0x01	; 1
    45f2:	f1 f7       	brne	.-4      	; 0x45f0 <Hours+0x1fe>
    45f4:	98 8b       	std	Y+16, r25	; 0x10
    45f6:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(500);
						LCD_voidClrScr(0);
    45f8:	80 e0       	ldi	r24, 0x00	; 0
    45fa:	0e 94 3a 20 	call	0x4074	; 0x4074 <LCD_voidClrScr>
						LCD_voidSendString(0,"hours=--");
    45fe:	20 e6       	ldi	r18, 0x60	; 96
    4600:	30 e0       	ldi	r19, 0x00	; 0
    4602:	80 e0       	ldi	r24, 0x00	; 0
    4604:	b9 01       	movw	r22, r18
    4606:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
						LCD_voidMoveCourser(0,1,7);
    460a:	80 e0       	ldi	r24, 0x00	; 0
    460c:	61 e0       	ldi	r22, 0x01	; 1
    460e:	47 e0       	ldi	r20, 0x07	; 7
    4610:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_voidMoveCourser>
						flag=0;
    4614:	1d 8e       	std	Y+29, r1	; 0x1d
    4616:	06 cf       	rjmp	.-500    	; 0x4424 <Hours+0x32>
					}
				}
				else
				{
					hours = (hours*10) + (u8Key-'0');
    4618:	80 91 51 01 	lds	r24, 0x0151
    461c:	88 2f       	mov	r24, r24
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	9c 01       	movw	r18, r24
    4622:	22 0f       	add	r18, r18
    4624:	33 1f       	adc	r19, r19
    4626:	c9 01       	movw	r24, r18
    4628:	88 0f       	add	r24, r24
    462a:	99 1f       	adc	r25, r25
    462c:	88 0f       	add	r24, r24
    462e:	99 1f       	adc	r25, r25
    4630:	82 0f       	add	r24, r18
    4632:	93 1f       	adc	r25, r19
    4634:	98 2f       	mov	r25, r24
    4636:	80 91 40 01 	lds	r24, 0x0140
    463a:	89 0f       	add	r24, r25
    463c:	80 53       	subi	r24, 0x30	; 48
    463e:	80 93 51 01 	sts	0x0151, r24
    4642:	8b c0       	rjmp	.+278    	; 0x475a <Hours+0x368>
					break;
				}
			}
			else
			{
				LCD_voidClrScr(0);
    4644:	80 e0       	ldi	r24, 0x00	; 0
    4646:	0e 94 3a 20 	call	0x4074	; 0x4074 <LCD_voidClrScr>
				LCD_voidSendString(0,"No hours > 24");
    464a:	29 e6       	ldi	r18, 0x69	; 105
    464c:	30 e0       	ldi	r19, 0x00	; 0
    464e:	80 e0       	ldi	r24, 0x00	; 0
    4650:	b9 01       	movw	r22, r18
    4652:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
    4656:	80 e0       	ldi	r24, 0x00	; 0
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	aa ef       	ldi	r26, 0xFA	; 250
    465c:	b3 e4       	ldi	r27, 0x43	; 67
    465e:	8b 87       	std	Y+11, r24	; 0x0b
    4660:	9c 87       	std	Y+12, r25	; 0x0c
    4662:	ad 87       	std	Y+13, r26	; 0x0d
    4664:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4666:	6b 85       	ldd	r22, Y+11	; 0x0b
    4668:	7c 85       	ldd	r23, Y+12	; 0x0c
    466a:	8d 85       	ldd	r24, Y+13	; 0x0d
    466c:	9e 85       	ldd	r25, Y+14	; 0x0e
    466e:	20 e0       	ldi	r18, 0x00	; 0
    4670:	30 e0       	ldi	r19, 0x00	; 0
    4672:	4a ef       	ldi	r20, 0xFA	; 250
    4674:	54 e4       	ldi	r21, 0x44	; 68
    4676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    467a:	dc 01       	movw	r26, r24
    467c:	cb 01       	movw	r24, r22
    467e:	8f 83       	std	Y+7, r24	; 0x07
    4680:	98 87       	std	Y+8, r25	; 0x08
    4682:	a9 87       	std	Y+9, r26	; 0x09
    4684:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4686:	6f 81       	ldd	r22, Y+7	; 0x07
    4688:	78 85       	ldd	r23, Y+8	; 0x08
    468a:	89 85       	ldd	r24, Y+9	; 0x09
    468c:	9a 85       	ldd	r25, Y+10	; 0x0a
    468e:	20 e0       	ldi	r18, 0x00	; 0
    4690:	30 e0       	ldi	r19, 0x00	; 0
    4692:	40 e8       	ldi	r20, 0x80	; 128
    4694:	5f e3       	ldi	r21, 0x3F	; 63
    4696:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    469a:	88 23       	and	r24, r24
    469c:	2c f4       	brge	.+10     	; 0x46a8 <Hours+0x2b6>
		__ticks = 1;
    469e:	81 e0       	ldi	r24, 0x01	; 1
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	9e 83       	std	Y+6, r25	; 0x06
    46a4:	8d 83       	std	Y+5, r24	; 0x05
    46a6:	3f c0       	rjmp	.+126    	; 0x4726 <Hours+0x334>
	else if (__tmp > 65535)
    46a8:	6f 81       	ldd	r22, Y+7	; 0x07
    46aa:	78 85       	ldd	r23, Y+8	; 0x08
    46ac:	89 85       	ldd	r24, Y+9	; 0x09
    46ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    46b0:	20 e0       	ldi	r18, 0x00	; 0
    46b2:	3f ef       	ldi	r19, 0xFF	; 255
    46b4:	4f e7       	ldi	r20, 0x7F	; 127
    46b6:	57 e4       	ldi	r21, 0x47	; 71
    46b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46bc:	18 16       	cp	r1, r24
    46be:	4c f5       	brge	.+82     	; 0x4712 <Hours+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    46c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    46c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    46c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    46c8:	20 e0       	ldi	r18, 0x00	; 0
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	40 e2       	ldi	r20, 0x20	; 32
    46ce:	51 e4       	ldi	r21, 0x41	; 65
    46d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46d4:	dc 01       	movw	r26, r24
    46d6:	cb 01       	movw	r24, r22
    46d8:	bc 01       	movw	r22, r24
    46da:	cd 01       	movw	r24, r26
    46dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e0:	dc 01       	movw	r26, r24
    46e2:	cb 01       	movw	r24, r22
    46e4:	9e 83       	std	Y+6, r25	; 0x06
    46e6:	8d 83       	std	Y+5, r24	; 0x05
    46e8:	0f c0       	rjmp	.+30     	; 0x4708 <Hours+0x316>
    46ea:	88 ec       	ldi	r24, 0xC8	; 200
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	9c 83       	std	Y+4, r25	; 0x04
    46f0:	8b 83       	std	Y+3, r24	; 0x03
    46f2:	8b 81       	ldd	r24, Y+3	; 0x03
    46f4:	9c 81       	ldd	r25, Y+4	; 0x04
    46f6:	01 97       	sbiw	r24, 0x01	; 1
    46f8:	f1 f7       	brne	.-4      	; 0x46f6 <Hours+0x304>
    46fa:	9c 83       	std	Y+4, r25	; 0x04
    46fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4700:	9e 81       	ldd	r25, Y+6	; 0x06
    4702:	01 97       	sbiw	r24, 0x01	; 1
    4704:	9e 83       	std	Y+6, r25	; 0x06
    4706:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4708:	8d 81       	ldd	r24, Y+5	; 0x05
    470a:	9e 81       	ldd	r25, Y+6	; 0x06
    470c:	00 97       	sbiw	r24, 0x00	; 0
    470e:	69 f7       	brne	.-38     	; 0x46ea <Hours+0x2f8>
    4710:	14 c0       	rjmp	.+40     	; 0x473a <Hours+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4712:	6f 81       	ldd	r22, Y+7	; 0x07
    4714:	78 85       	ldd	r23, Y+8	; 0x08
    4716:	89 85       	ldd	r24, Y+9	; 0x09
    4718:	9a 85       	ldd	r25, Y+10	; 0x0a
    471a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    471e:	dc 01       	movw	r26, r24
    4720:	cb 01       	movw	r24, r22
    4722:	9e 83       	std	Y+6, r25	; 0x06
    4724:	8d 83       	std	Y+5, r24	; 0x05
    4726:	8d 81       	ldd	r24, Y+5	; 0x05
    4728:	9e 81       	ldd	r25, Y+6	; 0x06
    472a:	9a 83       	std	Y+2, r25	; 0x02
    472c:	89 83       	std	Y+1, r24	; 0x01
    472e:	89 81       	ldd	r24, Y+1	; 0x01
    4730:	9a 81       	ldd	r25, Y+2	; 0x02
    4732:	01 97       	sbiw	r24, 0x01	; 1
    4734:	f1 f7       	brne	.-4      	; 0x4732 <Hours+0x340>
    4736:	9a 83       	std	Y+2, r25	; 0x02
    4738:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				LCD_voidClrScr(0);
    473a:	80 e0       	ldi	r24, 0x00	; 0
    473c:	0e 94 3a 20 	call	0x4074	; 0x4074 <LCD_voidClrScr>
				LCD_voidSendString(0,"hours=--");
    4740:	20 e6       	ldi	r18, 0x60	; 96
    4742:	30 e0       	ldi	r19, 0x00	; 0
    4744:	80 e0       	ldi	r24, 0x00	; 0
    4746:	b9 01       	movw	r22, r18
    4748:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
				LCD_voidMoveCourser(0,1,7);
    474c:	80 e0       	ldi	r24, 0x00	; 0
    474e:	61 e0       	ldi	r22, 0x01	; 1
    4750:	47 e0       	ldi	r20, 0x07	; 7
    4752:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_voidMoveCourser>
				flag=0;
    4756:	1d 8e       	std	Y+29, r1	; 0x1d
    4758:	65 ce       	rjmp	.-822    	; 0x4424 <Hours+0x32>
		else
		{
			/* Nothing */
		}
	}
	Minutes();
    475a:	0e 94 b8 23 	call	0x4770	; 0x4770 <Minutes>
}
    475e:	6d 96       	adiw	r28, 0x1d	; 29
    4760:	0f b6       	in	r0, 0x3f	; 63
    4762:	f8 94       	cli
    4764:	de bf       	out	0x3e, r29	; 62
    4766:	0f be       	out	0x3f, r0	; 63
    4768:	cd bf       	out	0x3d, r28	; 61
    476a:	cf 91       	pop	r28
    476c:	df 91       	pop	r29
    476e:	08 95       	ret

00004770 <Minutes>:

void Minutes(void)
{
    4770:	df 93       	push	r29
    4772:	cf 93       	push	r28
    4774:	cd b7       	in	r28, 0x3d	; 61
    4776:	de b7       	in	r29, 0x3e	; 62
    4778:	2f 97       	sbiw	r28, 0x0f	; 15
    477a:	0f b6       	in	r0, 0x3f	; 63
    477c:	f8 94       	cli
    477e:	de bf       	out	0x3e, r29	; 62
    4780:	0f be       	out	0x3f, r0	; 63
    4782:	cd bf       	out	0x3d, r28	; 61
	uint8 flag=0;
    4784:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_voidClrScr(0);
    4786:	80 e0       	ldi	r24, 0x00	; 0
    4788:	0e 94 3a 20 	call	0x4074	; 0x4074 <LCD_voidClrScr>
	LCD_voidSendString(0,"minutes=--");
    478c:	27 e7       	ldi	r18, 0x77	; 119
    478e:	30 e0       	ldi	r19, 0x00	; 0
    4790:	80 e0       	ldi	r24, 0x00	; 0
    4792:	b9 01       	movw	r22, r18
    4794:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
	LCD_voidMoveCourser(0,1,9);
    4798:	80 e0       	ldi	r24, 0x00	; 0
    479a:	61 e0       	ldi	r22, 0x01	; 1
    479c:	49 e0       	ldi	r20, 0x09	; 9
    479e:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_voidMoveCourser>
	while(1)
	{
		u8Key = KPD_u8GetPressedKey();
    47a2:	0e 94 48 21 	call	0x4290	; 0x4290 <KPD_u8GetPressedKey>
    47a6:	80 93 40 01 	sts	0x0140, r24
		if(u8Key != 0xff)
    47aa:	80 91 40 01 	lds	r24, 0x0140
    47ae:	8f 3f       	cpi	r24, 0xFF	; 255
    47b0:	c1 f3       	breq	.-16     	; 0x47a2 <Minutes+0x32>
		{
			if(u8Key <= '5' && flag == 0 && (u8Key != '/' && u8Key != '*' && u8Key != '+' && u8Key != '-'))
    47b2:	80 91 40 01 	lds	r24, 0x0140
    47b6:	86 33       	cpi	r24, 0x36	; 54
    47b8:	08 f5       	brcc	.+66     	; 0x47fc <Minutes+0x8c>
    47ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    47bc:	88 23       	and	r24, r24
    47be:	f1 f4       	brne	.+60     	; 0x47fc <Minutes+0x8c>
    47c0:	80 91 40 01 	lds	r24, 0x0140
    47c4:	8f 32       	cpi	r24, 0x2F	; 47
    47c6:	d1 f0       	breq	.+52     	; 0x47fc <Minutes+0x8c>
    47c8:	80 91 40 01 	lds	r24, 0x0140
    47cc:	8a 32       	cpi	r24, 0x2A	; 42
    47ce:	b1 f0       	breq	.+44     	; 0x47fc <Minutes+0x8c>
    47d0:	80 91 40 01 	lds	r24, 0x0140
    47d4:	8b 32       	cpi	r24, 0x2B	; 43
    47d6:	91 f0       	breq	.+36     	; 0x47fc <Minutes+0x8c>
    47d8:	80 91 40 01 	lds	r24, 0x0140
    47dc:	8d 32       	cpi	r24, 0x2D	; 45
    47de:	71 f0       	breq	.+28     	; 0x47fc <Minutes+0x8c>
			{
				minutes = (u8Key-'0');
    47e0:	80 91 40 01 	lds	r24, 0x0140
    47e4:	80 53       	subi	r24, 0x30	; 48
    47e6:	80 93 52 01 	sts	0x0152, r24
				LCD_voidSendChar(0,u8Key);
    47ea:	90 91 40 01 	lds	r25, 0x0140
    47ee:	80 e0       	ldi	r24, 0x00	; 0
    47f0:	69 2f       	mov	r22, r25
    47f2:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <LCD_voidSendChar>
				flag=1;
    47f6:	81 e0       	ldi	r24, 0x01	; 1
    47f8:	8f 87       	std	Y+15, r24	; 0x0f
    47fa:	d3 cf       	rjmp	.-90     	; 0x47a2 <Minutes+0x32>
			}
			else if(u8Key <= '9' && flag == 1 && (u8Key != '/' && u8Key != '*' && u8Key != '+' && u8Key != '-'))
    47fc:	80 91 40 01 	lds	r24, 0x0140
    4800:	8a 33       	cpi	r24, 0x3A	; 58
    4802:	c8 f5       	brcc	.+114    	; 0x4876 <Minutes+0x106>
    4804:	8f 85       	ldd	r24, Y+15	; 0x0f
    4806:	81 30       	cpi	r24, 0x01	; 1
    4808:	b1 f5       	brne	.+108    	; 0x4876 <Minutes+0x106>
    480a:	80 91 40 01 	lds	r24, 0x0140
    480e:	8f 32       	cpi	r24, 0x2F	; 47
    4810:	91 f1       	breq	.+100    	; 0x4876 <Minutes+0x106>
    4812:	80 91 40 01 	lds	r24, 0x0140
    4816:	8a 32       	cpi	r24, 0x2A	; 42
    4818:	71 f1       	breq	.+92     	; 0x4876 <Minutes+0x106>
    481a:	80 91 40 01 	lds	r24, 0x0140
    481e:	8b 32       	cpi	r24, 0x2B	; 43
    4820:	51 f1       	breq	.+84     	; 0x4876 <Minutes+0x106>
    4822:	80 91 40 01 	lds	r24, 0x0140
    4826:	8d 32       	cpi	r24, 0x2D	; 45
    4828:	31 f1       	breq	.+76     	; 0x4876 <Minutes+0x106>
			{
				LCD_voidSendChar(0,u8Key);
    482a:	90 91 40 01 	lds	r25, 0x0140
    482e:	80 e0       	ldi	r24, 0x00	; 0
    4830:	69 2f       	mov	r22, r25
    4832:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <LCD_voidSendChar>
				minutes = (minutes*10) + (u8Key - '0');
    4836:	80 91 52 01 	lds	r24, 0x0152
    483a:	88 2f       	mov	r24, r24
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	9c 01       	movw	r18, r24
    4840:	22 0f       	add	r18, r18
    4842:	33 1f       	adc	r19, r19
    4844:	c9 01       	movw	r24, r18
    4846:	88 0f       	add	r24, r24
    4848:	99 1f       	adc	r25, r25
    484a:	88 0f       	add	r24, r24
    484c:	99 1f       	adc	r25, r25
    484e:	82 0f       	add	r24, r18
    4850:	93 1f       	adc	r25, r19
    4852:	98 2f       	mov	r25, r24
    4854:	80 91 40 01 	lds	r24, 0x0140
    4858:	89 0f       	add	r24, r25
    485a:	80 53       	subi	r24, 0x30	; 48
    485c:	80 93 52 01 	sts	0x0152, r24
		else
		{
			/* Nothing */
		}
	}
	Seconds();
    4860:	0e 94 c6 24 	call	0x498c	; 0x498c <Seconds>
}
    4864:	2f 96       	adiw	r28, 0x0f	; 15
    4866:	0f b6       	in	r0, 0x3f	; 63
    4868:	f8 94       	cli
    486a:	de bf       	out	0x3e, r29	; 62
    486c:	0f be       	out	0x3f, r0	; 63
    486e:	cd bf       	out	0x3d, r28	; 61
    4870:	cf 91       	pop	r28
    4872:	df 91       	pop	r29
    4874:	08 95       	ret
				minutes = (minutes*10) + (u8Key - '0');
				break;
			}
			else
			{
				LCD_voidClrScr(0);
    4876:	80 e0       	ldi	r24, 0x00	; 0
    4878:	0e 94 3a 20 	call	0x4074	; 0x4074 <LCD_voidClrScr>
				LCD_voidSendString(0,"No minutes > 60");
    487c:	22 e8       	ldi	r18, 0x82	; 130
    487e:	30 e0       	ldi	r19, 0x00	; 0
    4880:	80 e0       	ldi	r24, 0x00	; 0
    4882:	b9 01       	movw	r22, r18
    4884:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
    4888:	80 e0       	ldi	r24, 0x00	; 0
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	aa ef       	ldi	r26, 0xFA	; 250
    488e:	b3 e4       	ldi	r27, 0x43	; 67
    4890:	8b 87       	std	Y+11, r24	; 0x0b
    4892:	9c 87       	std	Y+12, r25	; 0x0c
    4894:	ad 87       	std	Y+13, r26	; 0x0d
    4896:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4898:	6b 85       	ldd	r22, Y+11	; 0x0b
    489a:	7c 85       	ldd	r23, Y+12	; 0x0c
    489c:	8d 85       	ldd	r24, Y+13	; 0x0d
    489e:	9e 85       	ldd	r25, Y+14	; 0x0e
    48a0:	20 e0       	ldi	r18, 0x00	; 0
    48a2:	30 e0       	ldi	r19, 0x00	; 0
    48a4:	4a ef       	ldi	r20, 0xFA	; 250
    48a6:	54 e4       	ldi	r21, 0x44	; 68
    48a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ac:	dc 01       	movw	r26, r24
    48ae:	cb 01       	movw	r24, r22
    48b0:	8f 83       	std	Y+7, r24	; 0x07
    48b2:	98 87       	std	Y+8, r25	; 0x08
    48b4:	a9 87       	std	Y+9, r26	; 0x09
    48b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48b8:	6f 81       	ldd	r22, Y+7	; 0x07
    48ba:	78 85       	ldd	r23, Y+8	; 0x08
    48bc:	89 85       	ldd	r24, Y+9	; 0x09
    48be:	9a 85       	ldd	r25, Y+10	; 0x0a
    48c0:	20 e0       	ldi	r18, 0x00	; 0
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	40 e8       	ldi	r20, 0x80	; 128
    48c6:	5f e3       	ldi	r21, 0x3F	; 63
    48c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48cc:	88 23       	and	r24, r24
    48ce:	2c f4       	brge	.+10     	; 0x48da <Minutes+0x16a>
		__ticks = 1;
    48d0:	81 e0       	ldi	r24, 0x01	; 1
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	9e 83       	std	Y+6, r25	; 0x06
    48d6:	8d 83       	std	Y+5, r24	; 0x05
    48d8:	3f c0       	rjmp	.+126    	; 0x4958 <Minutes+0x1e8>
	else if (__tmp > 65535)
    48da:	6f 81       	ldd	r22, Y+7	; 0x07
    48dc:	78 85       	ldd	r23, Y+8	; 0x08
    48de:	89 85       	ldd	r24, Y+9	; 0x09
    48e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e2:	20 e0       	ldi	r18, 0x00	; 0
    48e4:	3f ef       	ldi	r19, 0xFF	; 255
    48e6:	4f e7       	ldi	r20, 0x7F	; 127
    48e8:	57 e4       	ldi	r21, 0x47	; 71
    48ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    48ee:	18 16       	cp	r1, r24
    48f0:	4c f5       	brge	.+82     	; 0x4944 <Minutes+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    48f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    48f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    48f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    48fa:	20 e0       	ldi	r18, 0x00	; 0
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	40 e2       	ldi	r20, 0x20	; 32
    4900:	51 e4       	ldi	r21, 0x41	; 65
    4902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4906:	dc 01       	movw	r26, r24
    4908:	cb 01       	movw	r24, r22
    490a:	bc 01       	movw	r22, r24
    490c:	cd 01       	movw	r24, r26
    490e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4912:	dc 01       	movw	r26, r24
    4914:	cb 01       	movw	r24, r22
    4916:	9e 83       	std	Y+6, r25	; 0x06
    4918:	8d 83       	std	Y+5, r24	; 0x05
    491a:	0f c0       	rjmp	.+30     	; 0x493a <Minutes+0x1ca>
    491c:	88 ec       	ldi	r24, 0xC8	; 200
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	9c 83       	std	Y+4, r25	; 0x04
    4922:	8b 83       	std	Y+3, r24	; 0x03
    4924:	8b 81       	ldd	r24, Y+3	; 0x03
    4926:	9c 81       	ldd	r25, Y+4	; 0x04
    4928:	01 97       	sbiw	r24, 0x01	; 1
    492a:	f1 f7       	brne	.-4      	; 0x4928 <Minutes+0x1b8>
    492c:	9c 83       	std	Y+4, r25	; 0x04
    492e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4930:	8d 81       	ldd	r24, Y+5	; 0x05
    4932:	9e 81       	ldd	r25, Y+6	; 0x06
    4934:	01 97       	sbiw	r24, 0x01	; 1
    4936:	9e 83       	std	Y+6, r25	; 0x06
    4938:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    493a:	8d 81       	ldd	r24, Y+5	; 0x05
    493c:	9e 81       	ldd	r25, Y+6	; 0x06
    493e:	00 97       	sbiw	r24, 0x00	; 0
    4940:	69 f7       	brne	.-38     	; 0x491c <Minutes+0x1ac>
    4942:	14 c0       	rjmp	.+40     	; 0x496c <Minutes+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4944:	6f 81       	ldd	r22, Y+7	; 0x07
    4946:	78 85       	ldd	r23, Y+8	; 0x08
    4948:	89 85       	ldd	r24, Y+9	; 0x09
    494a:	9a 85       	ldd	r25, Y+10	; 0x0a
    494c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4950:	dc 01       	movw	r26, r24
    4952:	cb 01       	movw	r24, r22
    4954:	9e 83       	std	Y+6, r25	; 0x06
    4956:	8d 83       	std	Y+5, r24	; 0x05
    4958:	8d 81       	ldd	r24, Y+5	; 0x05
    495a:	9e 81       	ldd	r25, Y+6	; 0x06
    495c:	9a 83       	std	Y+2, r25	; 0x02
    495e:	89 83       	std	Y+1, r24	; 0x01
    4960:	89 81       	ldd	r24, Y+1	; 0x01
    4962:	9a 81       	ldd	r25, Y+2	; 0x02
    4964:	01 97       	sbiw	r24, 0x01	; 1
    4966:	f1 f7       	brne	.-4      	; 0x4964 <Minutes+0x1f4>
    4968:	9a 83       	std	Y+2, r25	; 0x02
    496a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				LCD_voidClrScr(0);
    496c:	80 e0       	ldi	r24, 0x00	; 0
    496e:	0e 94 3a 20 	call	0x4074	; 0x4074 <LCD_voidClrScr>
				LCD_voidSendString(0,"minutes=--");
    4972:	27 e7       	ldi	r18, 0x77	; 119
    4974:	30 e0       	ldi	r19, 0x00	; 0
    4976:	80 e0       	ldi	r24, 0x00	; 0
    4978:	b9 01       	movw	r22, r18
    497a:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
				LCD_voidMoveCourser(0,1,9);
    497e:	80 e0       	ldi	r24, 0x00	; 0
    4980:	61 e0       	ldi	r22, 0x01	; 1
    4982:	49 e0       	ldi	r20, 0x09	; 9
    4984:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_voidMoveCourser>
				flag=0;
    4988:	1f 86       	std	Y+15, r1	; 0x0f
    498a:	0b cf       	rjmp	.-490    	; 0x47a2 <Minutes+0x32>

0000498c <Seconds>:
	}
	Seconds();
}

void Seconds(void)
{
    498c:	df 93       	push	r29
    498e:	cf 93       	push	r28
    4990:	cd b7       	in	r28, 0x3d	; 61
    4992:	de b7       	in	r29, 0x3e	; 62
    4994:	2f 97       	sbiw	r28, 0x0f	; 15
    4996:	0f b6       	in	r0, 0x3f	; 63
    4998:	f8 94       	cli
    499a:	de bf       	out	0x3e, r29	; 62
    499c:	0f be       	out	0x3f, r0	; 63
    499e:	cd bf       	out	0x3d, r28	; 61
	uint8 flag=0;
    49a0:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_voidClrScr(0);
    49a2:	80 e0       	ldi	r24, 0x00	; 0
    49a4:	0e 94 3a 20 	call	0x4074	; 0x4074 <LCD_voidClrScr>
	LCD_voidSendString(0,"seconds=--");
    49a8:	22 e9       	ldi	r18, 0x92	; 146
    49aa:	30 e0       	ldi	r19, 0x00	; 0
    49ac:	80 e0       	ldi	r24, 0x00	; 0
    49ae:	b9 01       	movw	r22, r18
    49b0:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
	LCD_voidMoveCourser(0,1,9);
    49b4:	80 e0       	ldi	r24, 0x00	; 0
    49b6:	61 e0       	ldi	r22, 0x01	; 1
    49b8:	49 e0       	ldi	r20, 0x09	; 9
    49ba:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_voidMoveCourser>
	while(1)
	{
		u8Key = KPD_u8GetPressedKey();
    49be:	0e 94 48 21 	call	0x4290	; 0x4290 <KPD_u8GetPressedKey>
    49c2:	80 93 40 01 	sts	0x0140, r24
		if(u8Key != 0xff)
    49c6:	80 91 40 01 	lds	r24, 0x0140
    49ca:	8f 3f       	cpi	r24, 0xFF	; 255
    49cc:	c1 f3       	breq	.-16     	; 0x49be <Seconds+0x32>
		{
			if(u8Key <= '5' && flag == 0 && (u8Key != '/' && u8Key != '*' && u8Key != '+' && u8Key != '-'))
    49ce:	80 91 40 01 	lds	r24, 0x0140
    49d2:	86 33       	cpi	r24, 0x36	; 54
    49d4:	08 f5       	brcc	.+66     	; 0x4a18 <Seconds+0x8c>
    49d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    49d8:	88 23       	and	r24, r24
    49da:	f1 f4       	brne	.+60     	; 0x4a18 <Seconds+0x8c>
    49dc:	80 91 40 01 	lds	r24, 0x0140
    49e0:	8f 32       	cpi	r24, 0x2F	; 47
    49e2:	d1 f0       	breq	.+52     	; 0x4a18 <Seconds+0x8c>
    49e4:	80 91 40 01 	lds	r24, 0x0140
    49e8:	8a 32       	cpi	r24, 0x2A	; 42
    49ea:	b1 f0       	breq	.+44     	; 0x4a18 <Seconds+0x8c>
    49ec:	80 91 40 01 	lds	r24, 0x0140
    49f0:	8b 32       	cpi	r24, 0x2B	; 43
    49f2:	91 f0       	breq	.+36     	; 0x4a18 <Seconds+0x8c>
    49f4:	80 91 40 01 	lds	r24, 0x0140
    49f8:	8d 32       	cpi	r24, 0x2D	; 45
    49fa:	71 f0       	breq	.+28     	; 0x4a18 <Seconds+0x8c>
			{
				seconds = (u8Key-'0');
    49fc:	80 91 40 01 	lds	r24, 0x0140
    4a00:	80 53       	subi	r24, 0x30	; 48
    4a02:	80 93 53 01 	sts	0x0153, r24
				LCD_voidSendChar(0,u8Key);
    4a06:	90 91 40 01 	lds	r25, 0x0140
    4a0a:	80 e0       	ldi	r24, 0x00	; 0
    4a0c:	69 2f       	mov	r22, r25
    4a0e:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <LCD_voidSendChar>
				flag=1;
    4a12:	81 e0       	ldi	r24, 0x01	; 1
    4a14:	8f 87       	std	Y+15, r24	; 0x0f
    4a16:	d3 cf       	rjmp	.-90     	; 0x49be <Seconds+0x32>
			}
			else if(u8Key <= '9' && flag == 1 && (u8Key != '/' && u8Key != '*' && u8Key != '+' && u8Key != '-'))
    4a18:	80 91 40 01 	lds	r24, 0x0140
    4a1c:	8a 33       	cpi	r24, 0x3A	; 58
    4a1e:	08 f0       	brcs	.+2      	; 0x4a22 <Seconds+0x96>
    4a20:	4e c0       	rjmp	.+156    	; 0x4abe <Seconds+0x132>
    4a22:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a24:	81 30       	cpi	r24, 0x01	; 1
    4a26:	09 f0       	breq	.+2      	; 0x4a2a <Seconds+0x9e>
    4a28:	4a c0       	rjmp	.+148    	; 0x4abe <Seconds+0x132>
    4a2a:	80 91 40 01 	lds	r24, 0x0140
    4a2e:	8f 32       	cpi	r24, 0x2F	; 47
    4a30:	09 f4       	brne	.+2      	; 0x4a34 <Seconds+0xa8>
    4a32:	45 c0       	rjmp	.+138    	; 0x4abe <Seconds+0x132>
    4a34:	80 91 40 01 	lds	r24, 0x0140
    4a38:	8a 32       	cpi	r24, 0x2A	; 42
    4a3a:	09 f4       	brne	.+2      	; 0x4a3e <Seconds+0xb2>
    4a3c:	40 c0       	rjmp	.+128    	; 0x4abe <Seconds+0x132>
    4a3e:	80 91 40 01 	lds	r24, 0x0140
    4a42:	8b 32       	cpi	r24, 0x2B	; 43
    4a44:	e1 f1       	breq	.+120    	; 0x4abe <Seconds+0x132>
    4a46:	80 91 40 01 	lds	r24, 0x0140
    4a4a:	8d 32       	cpi	r24, 0x2D	; 45
    4a4c:	c1 f1       	breq	.+112    	; 0x4abe <Seconds+0x132>
			{
				LCD_voidSendChar(0,u8Key);
    4a4e:	90 91 40 01 	lds	r25, 0x0140
    4a52:	80 e0       	ldi	r24, 0x00	; 0
    4a54:	69 2f       	mov	r22, r25
    4a56:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <LCD_voidSendChar>
				seconds = (seconds*10) + (u8Key - '0');
    4a5a:	80 91 53 01 	lds	r24, 0x0153
    4a5e:	88 2f       	mov	r24, r24
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	9c 01       	movw	r18, r24
    4a64:	22 0f       	add	r18, r18
    4a66:	33 1f       	adc	r19, r19
    4a68:	c9 01       	movw	r24, r18
    4a6a:	88 0f       	add	r24, r24
    4a6c:	99 1f       	adc	r25, r25
    4a6e:	88 0f       	add	r24, r24
    4a70:	99 1f       	adc	r25, r25
    4a72:	82 0f       	add	r24, r18
    4a74:	93 1f       	adc	r25, r19
    4a76:	98 2f       	mov	r25, r24
    4a78:	80 91 40 01 	lds	r24, 0x0140
    4a7c:	89 0f       	add	r24, r25
    4a7e:	80 53       	subi	r24, 0x30	; 48
    4a80:	80 93 53 01 	sts	0x0153, r24
		else
		{
			/* Nothing */
		}
	}
	SEV_enuDisable(0);
    4a84:	80 e0       	ldi	r24, 0x00	; 0
    4a86:	0e 94 64 12 	call	0x24c8	; 0x24c8 <SEV_enuDisable>
	SEV_enuDisable(1);
    4a8a:	81 e0       	ldi	r24, 0x01	; 1
    4a8c:	0e 94 64 12 	call	0x24c8	; 0x24c8 <SEV_enuDisable>
	SEV_enuDisable(2);
    4a90:	82 e0       	ldi	r24, 0x02	; 2
    4a92:	0e 94 64 12 	call	0x24c8	; 0x24c8 <SEV_enuDisable>
	SEV_enuDisable(3);
    4a96:	83 e0       	ldi	r24, 0x03	; 3
    4a98:	0e 94 64 12 	call	0x24c8	; 0x24c8 <SEV_enuDisable>
	SEV_enuDisable(4);
    4a9c:	84 e0       	ldi	r24, 0x04	; 4
    4a9e:	0e 94 64 12 	call	0x24c8	; 0x24c8 <SEV_enuDisable>
	SEV_enuDisable(5);
    4aa2:	85 e0       	ldi	r24, 0x05	; 5
    4aa4:	0e 94 64 12 	call	0x24c8	; 0x24c8 <SEV_enuDisable>

	display();
    4aa8:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <display>
}
    4aac:	2f 96       	adiw	r28, 0x0f	; 15
    4aae:	0f b6       	in	r0, 0x3f	; 63
    4ab0:	f8 94       	cli
    4ab2:	de bf       	out	0x3e, r29	; 62
    4ab4:	0f be       	out	0x3f, r0	; 63
    4ab6:	cd bf       	out	0x3d, r28	; 61
    4ab8:	cf 91       	pop	r28
    4aba:	df 91       	pop	r29
    4abc:	08 95       	ret
				seconds = (seconds*10) + (u8Key - '0');
				break;
			}
			else
			{
				LCD_voidClrScr(0);
    4abe:	80 e0       	ldi	r24, 0x00	; 0
    4ac0:	0e 94 3a 20 	call	0x4074	; 0x4074 <LCD_voidClrScr>
				LCD_voidSendString(0,"No seconds > 60");
    4ac4:	2d e9       	ldi	r18, 0x9D	; 157
    4ac6:	30 e0       	ldi	r19, 0x00	; 0
    4ac8:	80 e0       	ldi	r24, 0x00	; 0
    4aca:	b9 01       	movw	r22, r18
    4acc:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
    4ad0:	80 e0       	ldi	r24, 0x00	; 0
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	aa ef       	ldi	r26, 0xFA	; 250
    4ad6:	b3 e4       	ldi	r27, 0x43	; 67
    4ad8:	8b 87       	std	Y+11, r24	; 0x0b
    4ada:	9c 87       	std	Y+12, r25	; 0x0c
    4adc:	ad 87       	std	Y+13, r26	; 0x0d
    4ade:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ae8:	20 e0       	ldi	r18, 0x00	; 0
    4aea:	30 e0       	ldi	r19, 0x00	; 0
    4aec:	4a ef       	ldi	r20, 0xFA	; 250
    4aee:	54 e4       	ldi	r21, 0x44	; 68
    4af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4af4:	dc 01       	movw	r26, r24
    4af6:	cb 01       	movw	r24, r22
    4af8:	8f 83       	std	Y+7, r24	; 0x07
    4afa:	98 87       	std	Y+8, r25	; 0x08
    4afc:	a9 87       	std	Y+9, r26	; 0x09
    4afe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b00:	6f 81       	ldd	r22, Y+7	; 0x07
    4b02:	78 85       	ldd	r23, Y+8	; 0x08
    4b04:	89 85       	ldd	r24, Y+9	; 0x09
    4b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b08:	20 e0       	ldi	r18, 0x00	; 0
    4b0a:	30 e0       	ldi	r19, 0x00	; 0
    4b0c:	40 e8       	ldi	r20, 0x80	; 128
    4b0e:	5f e3       	ldi	r21, 0x3F	; 63
    4b10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b14:	88 23       	and	r24, r24
    4b16:	2c f4       	brge	.+10     	; 0x4b22 <Seconds+0x196>
		__ticks = 1;
    4b18:	81 e0       	ldi	r24, 0x01	; 1
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	9e 83       	std	Y+6, r25	; 0x06
    4b1e:	8d 83       	std	Y+5, r24	; 0x05
    4b20:	3f c0       	rjmp	.+126    	; 0x4ba0 <Seconds+0x214>
	else if (__tmp > 65535)
    4b22:	6f 81       	ldd	r22, Y+7	; 0x07
    4b24:	78 85       	ldd	r23, Y+8	; 0x08
    4b26:	89 85       	ldd	r24, Y+9	; 0x09
    4b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b2a:	20 e0       	ldi	r18, 0x00	; 0
    4b2c:	3f ef       	ldi	r19, 0xFF	; 255
    4b2e:	4f e7       	ldi	r20, 0x7F	; 127
    4b30:	57 e4       	ldi	r21, 0x47	; 71
    4b32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b36:	18 16       	cp	r1, r24
    4b38:	4c f5       	brge	.+82     	; 0x4b8c <Seconds+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b42:	20 e0       	ldi	r18, 0x00	; 0
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	40 e2       	ldi	r20, 0x20	; 32
    4b48:	51 e4       	ldi	r21, 0x41	; 65
    4b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b4e:	dc 01       	movw	r26, r24
    4b50:	cb 01       	movw	r24, r22
    4b52:	bc 01       	movw	r22, r24
    4b54:	cd 01       	movw	r24, r26
    4b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b5a:	dc 01       	movw	r26, r24
    4b5c:	cb 01       	movw	r24, r22
    4b5e:	9e 83       	std	Y+6, r25	; 0x06
    4b60:	8d 83       	std	Y+5, r24	; 0x05
    4b62:	0f c0       	rjmp	.+30     	; 0x4b82 <Seconds+0x1f6>
    4b64:	88 ec       	ldi	r24, 0xC8	; 200
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	9c 83       	std	Y+4, r25	; 0x04
    4b6a:	8b 83       	std	Y+3, r24	; 0x03
    4b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b70:	01 97       	sbiw	r24, 0x01	; 1
    4b72:	f1 f7       	brne	.-4      	; 0x4b70 <Seconds+0x1e4>
    4b74:	9c 83       	std	Y+4, r25	; 0x04
    4b76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b78:	8d 81       	ldd	r24, Y+5	; 0x05
    4b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b7c:	01 97       	sbiw	r24, 0x01	; 1
    4b7e:	9e 83       	std	Y+6, r25	; 0x06
    4b80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b82:	8d 81       	ldd	r24, Y+5	; 0x05
    4b84:	9e 81       	ldd	r25, Y+6	; 0x06
    4b86:	00 97       	sbiw	r24, 0x00	; 0
    4b88:	69 f7       	brne	.-38     	; 0x4b64 <Seconds+0x1d8>
    4b8a:	14 c0       	rjmp	.+40     	; 0x4bb4 <Seconds+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b8e:	78 85       	ldd	r23, Y+8	; 0x08
    4b90:	89 85       	ldd	r24, Y+9	; 0x09
    4b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b98:	dc 01       	movw	r26, r24
    4b9a:	cb 01       	movw	r24, r22
    4b9c:	9e 83       	std	Y+6, r25	; 0x06
    4b9e:	8d 83       	std	Y+5, r24	; 0x05
    4ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ba4:	9a 83       	std	Y+2, r25	; 0x02
    4ba6:	89 83       	std	Y+1, r24	; 0x01
    4ba8:	89 81       	ldd	r24, Y+1	; 0x01
    4baa:	9a 81       	ldd	r25, Y+2	; 0x02
    4bac:	01 97       	sbiw	r24, 0x01	; 1
    4bae:	f1 f7       	brne	.-4      	; 0x4bac <Seconds+0x220>
    4bb0:	9a 83       	std	Y+2, r25	; 0x02
    4bb2:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				LCD_voidClrScr(0);
    4bb4:	80 e0       	ldi	r24, 0x00	; 0
    4bb6:	0e 94 3a 20 	call	0x4074	; 0x4074 <LCD_voidClrScr>
				LCD_voidSendString(0,"seconds=--");
    4bba:	22 e9       	ldi	r18, 0x92	; 146
    4bbc:	30 e0       	ldi	r19, 0x00	; 0
    4bbe:	80 e0       	ldi	r24, 0x00	; 0
    4bc0:	b9 01       	movw	r22, r18
    4bc2:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
				LCD_voidMoveCourser(0,1,9);
    4bc6:	80 e0       	ldi	r24, 0x00	; 0
    4bc8:	61 e0       	ldi	r22, 0x01	; 1
    4bca:	49 e0       	ldi	r20, 0x09	; 9
    4bcc:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_voidMoveCourser>
				flag=0;
    4bd0:	1f 86       	std	Y+15, r1	; 0x0f
    4bd2:	f5 ce       	rjmp	.-534    	; 0x49be <Seconds+0x32>

00004bd4 <ISR>:

	display();
}

void ISR(void)
{
    4bd4:	df 93       	push	r29
    4bd6:	cf 93       	push	r28
    4bd8:	cd b7       	in	r28, 0x3d	; 61
    4bda:	de b7       	in	r29, 0x3e	; 62
	if(seconds<59)
    4bdc:	80 91 53 01 	lds	r24, 0x0153
    4be0:	8b 33       	cpi	r24, 0x3B	; 59
    4be2:	30 f4       	brcc	.+12     	; 0x4bf0 <ISR+0x1c>
	{
		seconds++;
    4be4:	80 91 53 01 	lds	r24, 0x0153
    4be8:	8f 5f       	subi	r24, 0xFF	; 255
    4bea:	80 93 53 01 	sts	0x0153, r24
    4bee:	20 c0       	rjmp	.+64     	; 0x4c30 <ISR+0x5c>
	}
	else
	{
		if(minutes<59)
    4bf0:	80 91 52 01 	lds	r24, 0x0152
    4bf4:	8b 33       	cpi	r24, 0x3B	; 59
    4bf6:	40 f4       	brcc	.+16     	; 0x4c08 <ISR+0x34>
		{
			minutes++;
    4bf8:	80 91 52 01 	lds	r24, 0x0152
    4bfc:	8f 5f       	subi	r24, 0xFF	; 255
    4bfe:	80 93 52 01 	sts	0x0152, r24
			seconds=0;
    4c02:	10 92 53 01 	sts	0x0153, r1
    4c06:	14 c0       	rjmp	.+40     	; 0x4c30 <ISR+0x5c>
		}
		else
		{
			if(hours<23)
    4c08:	80 91 51 01 	lds	r24, 0x0151
    4c0c:	87 31       	cpi	r24, 0x17	; 23
    4c0e:	50 f4       	brcc	.+20     	; 0x4c24 <ISR+0x50>
			{
				hours++;
    4c10:	80 91 51 01 	lds	r24, 0x0151
    4c14:	8f 5f       	subi	r24, 0xFF	; 255
    4c16:	80 93 51 01 	sts	0x0151, r24
				minutes=0;
    4c1a:	10 92 52 01 	sts	0x0152, r1
				seconds=0;
    4c1e:	10 92 53 01 	sts	0x0153, r1
    4c22:	06 c0       	rjmp	.+12     	; 0x4c30 <ISR+0x5c>
			}
			else
			{
				hours=0;
    4c24:	10 92 51 01 	sts	0x0151, r1
				minutes=0;
    4c28:	10 92 52 01 	sts	0x0152, r1
				seconds=0;
    4c2c:	10 92 53 01 	sts	0x0153, r1
			}
		}
	}
}
    4c30:	cf 91       	pop	r28
    4c32:	df 91       	pop	r29
    4c34:	08 95       	ret

00004c36 <display>:

void display(void)
{
    4c36:	0f 93       	push	r16
    4c38:	1f 93       	push	r17
    4c3a:	df 93       	push	r29
    4c3c:	cf 93       	push	r28
    4c3e:	cd b7       	in	r28, 0x3d	; 61
    4c40:	de b7       	in	r29, 0x3e	; 62
    4c42:	c4 55       	subi	r28, 0x54	; 84
    4c44:	d0 40       	sbci	r29, 0x00	; 0
    4c46:	0f b6       	in	r0, 0x3f	; 63
    4c48:	f8 94       	cli
    4c4a:	de bf       	out	0x3e, r29	; 62
    4c4c:	0f be       	out	0x3f, r0	; 63
    4c4e:	cd bf       	out	0x3d, r28	; 61
	TIM2_voidInit();
    4c50:	0e 94 d1 06 	call	0xda2	; 0xda2 <TIM2_voidInit>
	TIM2_voidEnableOutputClk();
    4c54:	0e 94 a9 07 	call	0xf52	; 0xf52 <TIM2_voidEnableOutputClk>
	TIM2_voidEnable(5);
    4c58:	85 e0       	ldi	r24, 0x05	; 5
    4c5a:	0e 94 f4 06 	call	0xde8	; 0xde8 <TIM2_voidEnable>
	TIM2_voidEnableOvfInt();
    4c5e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <TIM2_voidEnableOvfInt>
	LCD_voidClrScr(0);
    4c62:	80 e0       	ldi	r24, 0x00	; 0
    4c64:	0e 94 3a 20 	call	0x4074	; 0x4074 <LCD_voidClrScr>
	LCD_voidSendString(0,"RTC Started...");
    4c68:	2d ea       	ldi	r18, 0xAD	; 173
    4c6a:	30 e0       	ldi	r19, 0x00	; 0
    4c6c:	80 e0       	ldi	r24, 0x00	; 0
    4c6e:	b9 01       	movw	r22, r18
    4c70:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
	TIM2_voidSetCallBackOvfInt(ISR);
    4c74:	8a ee       	ldi	r24, 0xEA	; 234
    4c76:	95 e2       	ldi	r25, 0x25	; 37
    4c78:	0e 94 55 07 	call	0xeaa	; 0xeaa <TIM2_voidSetCallBackOvfInt>
	while(1)
	{
		SEV_enuDisplay(0,(hours/10));
    4c7c:	80 91 51 01 	lds	r24, 0x0151
    4c80:	9a e0       	ldi	r25, 0x0A	; 10
    4c82:	69 2f       	mov	r22, r25
    4c84:	0e 94 6d 2a 	call	0x54da	; 0x54da <__udivmodqi4>
    4c88:	98 2f       	mov	r25, r24
    4c8a:	80 e0       	ldi	r24, 0x00	; 0
    4c8c:	69 2f       	mov	r22, r25
    4c8e:	0e 94 36 11 	call	0x226c	; 0x226c <SEV_enuDisplay>
		SEV_enuEnable(0);
    4c92:	80 e0       	ldi	r24, 0x00	; 0
    4c94:	0e 94 02 12 	call	0x2404	; 0x2404 <SEV_enuEnable>
    4c98:	fe 01       	movw	r30, r28
    4c9a:	ef 5a       	subi	r30, 0xAF	; 175
    4c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9e:	80 e0       	ldi	r24, 0x00	; 0
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	a0 e4       	ldi	r26, 0x40	; 64
    4ca4:	b0 e4       	ldi	r27, 0x40	; 64
    4ca6:	80 83       	st	Z, r24
    4ca8:	91 83       	std	Z+1, r25	; 0x01
    4caa:	a2 83       	std	Z+2, r26	; 0x02
    4cac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cae:	8e 01       	movw	r16, r28
    4cb0:	03 5b       	subi	r16, 0xB3	; 179
    4cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    4cb4:	fe 01       	movw	r30, r28
    4cb6:	ef 5a       	subi	r30, 0xAF	; 175
    4cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cba:	60 81       	ld	r22, Z
    4cbc:	71 81       	ldd	r23, Z+1	; 0x01
    4cbe:	82 81       	ldd	r24, Z+2	; 0x02
    4cc0:	93 81       	ldd	r25, Z+3	; 0x03
    4cc2:	20 e0       	ldi	r18, 0x00	; 0
    4cc4:	30 e0       	ldi	r19, 0x00	; 0
    4cc6:	4a ef       	ldi	r20, 0xFA	; 250
    4cc8:	54 e4       	ldi	r21, 0x44	; 68
    4cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cce:	dc 01       	movw	r26, r24
    4cd0:	cb 01       	movw	r24, r22
    4cd2:	f8 01       	movw	r30, r16
    4cd4:	80 83       	st	Z, r24
    4cd6:	91 83       	std	Z+1, r25	; 0x01
    4cd8:	a2 83       	std	Z+2, r26	; 0x02
    4cda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cdc:	fe 01       	movw	r30, r28
    4cde:	e3 5b       	subi	r30, 0xB3	; 179
    4ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce2:	60 81       	ld	r22, Z
    4ce4:	71 81       	ldd	r23, Z+1	; 0x01
    4ce6:	82 81       	ldd	r24, Z+2	; 0x02
    4ce8:	93 81       	ldd	r25, Z+3	; 0x03
    4cea:	20 e0       	ldi	r18, 0x00	; 0
    4cec:	30 e0       	ldi	r19, 0x00	; 0
    4cee:	40 e8       	ldi	r20, 0x80	; 128
    4cf0:	5f e3       	ldi	r21, 0x3F	; 63
    4cf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4cf6:	88 23       	and	r24, r24
    4cf8:	44 f4       	brge	.+16     	; 0x4d0a <display+0xd4>
		__ticks = 1;
    4cfa:	fe 01       	movw	r30, r28
    4cfc:	e5 5b       	subi	r30, 0xB5	; 181
    4cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4d00:	81 e0       	ldi	r24, 0x01	; 1
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	91 83       	std	Z+1, r25	; 0x01
    4d06:	80 83       	st	Z, r24
    4d08:	64 c0       	rjmp	.+200    	; 0x4dd2 <display+0x19c>
	else if (__tmp > 65535)
    4d0a:	fe 01       	movw	r30, r28
    4d0c:	e3 5b       	subi	r30, 0xB3	; 179
    4d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d10:	60 81       	ld	r22, Z
    4d12:	71 81       	ldd	r23, Z+1	; 0x01
    4d14:	82 81       	ldd	r24, Z+2	; 0x02
    4d16:	93 81       	ldd	r25, Z+3	; 0x03
    4d18:	20 e0       	ldi	r18, 0x00	; 0
    4d1a:	3f ef       	ldi	r19, 0xFF	; 255
    4d1c:	4f e7       	ldi	r20, 0x7F	; 127
    4d1e:	57 e4       	ldi	r21, 0x47	; 71
    4d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d24:	18 16       	cp	r1, r24
    4d26:	0c f0       	brlt	.+2      	; 0x4d2a <display+0xf4>
    4d28:	43 c0       	rjmp	.+134    	; 0x4db0 <display+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d2a:	fe 01       	movw	r30, r28
    4d2c:	ef 5a       	subi	r30, 0xAF	; 175
    4d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d30:	60 81       	ld	r22, Z
    4d32:	71 81       	ldd	r23, Z+1	; 0x01
    4d34:	82 81       	ldd	r24, Z+2	; 0x02
    4d36:	93 81       	ldd	r25, Z+3	; 0x03
    4d38:	20 e0       	ldi	r18, 0x00	; 0
    4d3a:	30 e0       	ldi	r19, 0x00	; 0
    4d3c:	40 e2       	ldi	r20, 0x20	; 32
    4d3e:	51 e4       	ldi	r21, 0x41	; 65
    4d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d44:	dc 01       	movw	r26, r24
    4d46:	cb 01       	movw	r24, r22
    4d48:	8e 01       	movw	r16, r28
    4d4a:	05 5b       	subi	r16, 0xB5	; 181
    4d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d4e:	bc 01       	movw	r22, r24
    4d50:	cd 01       	movw	r24, r26
    4d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d56:	dc 01       	movw	r26, r24
    4d58:	cb 01       	movw	r24, r22
    4d5a:	f8 01       	movw	r30, r16
    4d5c:	91 83       	std	Z+1, r25	; 0x01
    4d5e:	80 83       	st	Z, r24
    4d60:	1f c0       	rjmp	.+62     	; 0x4da0 <display+0x16a>
    4d62:	fe 01       	movw	r30, r28
    4d64:	e7 5b       	subi	r30, 0xB7	; 183
    4d66:	ff 4f       	sbci	r31, 0xFF	; 255
    4d68:	88 ec       	ldi	r24, 0xC8	; 200
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	91 83       	std	Z+1, r25	; 0x01
    4d6e:	80 83       	st	Z, r24
    4d70:	fe 01       	movw	r30, r28
    4d72:	e7 5b       	subi	r30, 0xB7	; 183
    4d74:	ff 4f       	sbci	r31, 0xFF	; 255
    4d76:	80 81       	ld	r24, Z
    4d78:	91 81       	ldd	r25, Z+1	; 0x01
    4d7a:	01 97       	sbiw	r24, 0x01	; 1
    4d7c:	f1 f7       	brne	.-4      	; 0x4d7a <display+0x144>
    4d7e:	fe 01       	movw	r30, r28
    4d80:	e7 5b       	subi	r30, 0xB7	; 183
    4d82:	ff 4f       	sbci	r31, 0xFF	; 255
    4d84:	91 83       	std	Z+1, r25	; 0x01
    4d86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d88:	de 01       	movw	r26, r28
    4d8a:	a5 5b       	subi	r26, 0xB5	; 181
    4d8c:	bf 4f       	sbci	r27, 0xFF	; 255
    4d8e:	fe 01       	movw	r30, r28
    4d90:	e5 5b       	subi	r30, 0xB5	; 181
    4d92:	ff 4f       	sbci	r31, 0xFF	; 255
    4d94:	80 81       	ld	r24, Z
    4d96:	91 81       	ldd	r25, Z+1	; 0x01
    4d98:	01 97       	sbiw	r24, 0x01	; 1
    4d9a:	11 96       	adiw	r26, 0x01	; 1
    4d9c:	9c 93       	st	X, r25
    4d9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4da0:	fe 01       	movw	r30, r28
    4da2:	e5 5b       	subi	r30, 0xB5	; 181
    4da4:	ff 4f       	sbci	r31, 0xFF	; 255
    4da6:	80 81       	ld	r24, Z
    4da8:	91 81       	ldd	r25, Z+1	; 0x01
    4daa:	00 97       	sbiw	r24, 0x00	; 0
    4dac:	d1 f6       	brne	.-76     	; 0x4d62 <display+0x12c>
    4dae:	27 c0       	rjmp	.+78     	; 0x4dfe <display+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4db0:	8e 01       	movw	r16, r28
    4db2:	05 5b       	subi	r16, 0xB5	; 181
    4db4:	1f 4f       	sbci	r17, 0xFF	; 255
    4db6:	fe 01       	movw	r30, r28
    4db8:	e3 5b       	subi	r30, 0xB3	; 179
    4dba:	ff 4f       	sbci	r31, 0xFF	; 255
    4dbc:	60 81       	ld	r22, Z
    4dbe:	71 81       	ldd	r23, Z+1	; 0x01
    4dc0:	82 81       	ldd	r24, Z+2	; 0x02
    4dc2:	93 81       	ldd	r25, Z+3	; 0x03
    4dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dc8:	dc 01       	movw	r26, r24
    4dca:	cb 01       	movw	r24, r22
    4dcc:	f8 01       	movw	r30, r16
    4dce:	91 83       	std	Z+1, r25	; 0x01
    4dd0:	80 83       	st	Z, r24
    4dd2:	de 01       	movw	r26, r28
    4dd4:	a9 5b       	subi	r26, 0xB9	; 185
    4dd6:	bf 4f       	sbci	r27, 0xFF	; 255
    4dd8:	fe 01       	movw	r30, r28
    4dda:	e5 5b       	subi	r30, 0xB5	; 181
    4ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dde:	80 81       	ld	r24, Z
    4de0:	91 81       	ldd	r25, Z+1	; 0x01
    4de2:	8d 93       	st	X+, r24
    4de4:	9c 93       	st	X, r25
    4de6:	fe 01       	movw	r30, r28
    4de8:	e9 5b       	subi	r30, 0xB9	; 185
    4dea:	ff 4f       	sbci	r31, 0xFF	; 255
    4dec:	80 81       	ld	r24, Z
    4dee:	91 81       	ldd	r25, Z+1	; 0x01
    4df0:	01 97       	sbiw	r24, 0x01	; 1
    4df2:	f1 f7       	brne	.-4      	; 0x4df0 <display+0x1ba>
    4df4:	fe 01       	movw	r30, r28
    4df6:	e9 5b       	subi	r30, 0xB9	; 185
    4df8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfa:	91 83       	std	Z+1, r25	; 0x01
    4dfc:	80 83       	st	Z, r24
		_delay_ms(3);
		SEV_enuDisable(0);
    4dfe:	80 e0       	ldi	r24, 0x00	; 0
    4e00:	0e 94 64 12 	call	0x24c8	; 0x24c8 <SEV_enuDisable>
		SEV_enuDisplay(1,(hours%10));
    4e04:	80 91 51 01 	lds	r24, 0x0151
    4e08:	9a e0       	ldi	r25, 0x0A	; 10
    4e0a:	69 2f       	mov	r22, r25
    4e0c:	0e 94 6d 2a 	call	0x54da	; 0x54da <__udivmodqi4>
    4e10:	89 2f       	mov	r24, r25
    4e12:	98 2f       	mov	r25, r24
    4e14:	81 e0       	ldi	r24, 0x01	; 1
    4e16:	69 2f       	mov	r22, r25
    4e18:	0e 94 36 11 	call	0x226c	; 0x226c <SEV_enuDisplay>
		SEV_enuEnable(1);
    4e1c:	81 e0       	ldi	r24, 0x01	; 1
    4e1e:	0e 94 02 12 	call	0x2404	; 0x2404 <SEV_enuEnable>
    4e22:	fe 01       	movw	r30, r28
    4e24:	ed 5b       	subi	r30, 0xBD	; 189
    4e26:	ff 4f       	sbci	r31, 0xFF	; 255
    4e28:	80 e0       	ldi	r24, 0x00	; 0
    4e2a:	90 e0       	ldi	r25, 0x00	; 0
    4e2c:	a0 e4       	ldi	r26, 0x40	; 64
    4e2e:	b0 e4       	ldi	r27, 0x40	; 64
    4e30:	80 83       	st	Z, r24
    4e32:	91 83       	std	Z+1, r25	; 0x01
    4e34:	a2 83       	std	Z+2, r26	; 0x02
    4e36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e38:	8e 01       	movw	r16, r28
    4e3a:	01 5c       	subi	r16, 0xC1	; 193
    4e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e3e:	fe 01       	movw	r30, r28
    4e40:	ed 5b       	subi	r30, 0xBD	; 189
    4e42:	ff 4f       	sbci	r31, 0xFF	; 255
    4e44:	60 81       	ld	r22, Z
    4e46:	71 81       	ldd	r23, Z+1	; 0x01
    4e48:	82 81       	ldd	r24, Z+2	; 0x02
    4e4a:	93 81       	ldd	r25, Z+3	; 0x03
    4e4c:	20 e0       	ldi	r18, 0x00	; 0
    4e4e:	30 e0       	ldi	r19, 0x00	; 0
    4e50:	4a ef       	ldi	r20, 0xFA	; 250
    4e52:	54 e4       	ldi	r21, 0x44	; 68
    4e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e58:	dc 01       	movw	r26, r24
    4e5a:	cb 01       	movw	r24, r22
    4e5c:	f8 01       	movw	r30, r16
    4e5e:	80 83       	st	Z, r24
    4e60:	91 83       	std	Z+1, r25	; 0x01
    4e62:	a2 83       	std	Z+2, r26	; 0x02
    4e64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e66:	fe 01       	movw	r30, r28
    4e68:	ff 96       	adiw	r30, 0x3f	; 63
    4e6a:	60 81       	ld	r22, Z
    4e6c:	71 81       	ldd	r23, Z+1	; 0x01
    4e6e:	82 81       	ldd	r24, Z+2	; 0x02
    4e70:	93 81       	ldd	r25, Z+3	; 0x03
    4e72:	20 e0       	ldi	r18, 0x00	; 0
    4e74:	30 e0       	ldi	r19, 0x00	; 0
    4e76:	40 e8       	ldi	r20, 0x80	; 128
    4e78:	5f e3       	ldi	r21, 0x3F	; 63
    4e7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e7e:	88 23       	and	r24, r24
    4e80:	2c f4       	brge	.+10     	; 0x4e8c <display+0x256>
		__ticks = 1;
    4e82:	81 e0       	ldi	r24, 0x01	; 1
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	9e af       	std	Y+62, r25	; 0x3e
    4e88:	8d af       	std	Y+61, r24	; 0x3d
    4e8a:	46 c0       	rjmp	.+140    	; 0x4f18 <display+0x2e2>
	else if (__tmp > 65535)
    4e8c:	fe 01       	movw	r30, r28
    4e8e:	ff 96       	adiw	r30, 0x3f	; 63
    4e90:	60 81       	ld	r22, Z
    4e92:	71 81       	ldd	r23, Z+1	; 0x01
    4e94:	82 81       	ldd	r24, Z+2	; 0x02
    4e96:	93 81       	ldd	r25, Z+3	; 0x03
    4e98:	20 e0       	ldi	r18, 0x00	; 0
    4e9a:	3f ef       	ldi	r19, 0xFF	; 255
    4e9c:	4f e7       	ldi	r20, 0x7F	; 127
    4e9e:	57 e4       	ldi	r21, 0x47	; 71
    4ea0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ea4:	18 16       	cp	r1, r24
    4ea6:	64 f5       	brge	.+88     	; 0x4f00 <display+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ea8:	fe 01       	movw	r30, r28
    4eaa:	ed 5b       	subi	r30, 0xBD	; 189
    4eac:	ff 4f       	sbci	r31, 0xFF	; 255
    4eae:	60 81       	ld	r22, Z
    4eb0:	71 81       	ldd	r23, Z+1	; 0x01
    4eb2:	82 81       	ldd	r24, Z+2	; 0x02
    4eb4:	93 81       	ldd	r25, Z+3	; 0x03
    4eb6:	20 e0       	ldi	r18, 0x00	; 0
    4eb8:	30 e0       	ldi	r19, 0x00	; 0
    4eba:	40 e2       	ldi	r20, 0x20	; 32
    4ebc:	51 e4       	ldi	r21, 0x41	; 65
    4ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	bc 01       	movw	r22, r24
    4ec8:	cd 01       	movw	r24, r26
    4eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ece:	dc 01       	movw	r26, r24
    4ed0:	cb 01       	movw	r24, r22
    4ed2:	9e af       	std	Y+62, r25	; 0x3e
    4ed4:	8d af       	std	Y+61, r24	; 0x3d
    4ed6:	0f c0       	rjmp	.+30     	; 0x4ef6 <display+0x2c0>
    4ed8:	88 ec       	ldi	r24, 0xC8	; 200
    4eda:	90 e0       	ldi	r25, 0x00	; 0
    4edc:	9c af       	std	Y+60, r25	; 0x3c
    4ede:	8b af       	std	Y+59, r24	; 0x3b
    4ee0:	8b ad       	ldd	r24, Y+59	; 0x3b
    4ee2:	9c ad       	ldd	r25, Y+60	; 0x3c
    4ee4:	01 97       	sbiw	r24, 0x01	; 1
    4ee6:	f1 f7       	brne	.-4      	; 0x4ee4 <display+0x2ae>
    4ee8:	9c af       	std	Y+60, r25	; 0x3c
    4eea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eec:	8d ad       	ldd	r24, Y+61	; 0x3d
    4eee:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ef0:	01 97       	sbiw	r24, 0x01	; 1
    4ef2:	9e af       	std	Y+62, r25	; 0x3e
    4ef4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ef6:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ef8:	9e ad       	ldd	r25, Y+62	; 0x3e
    4efa:	00 97       	sbiw	r24, 0x00	; 0
    4efc:	69 f7       	brne	.-38     	; 0x4ed8 <display+0x2a2>
    4efe:	16 c0       	rjmp	.+44     	; 0x4f2c <display+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f00:	fe 01       	movw	r30, r28
    4f02:	ff 96       	adiw	r30, 0x3f	; 63
    4f04:	60 81       	ld	r22, Z
    4f06:	71 81       	ldd	r23, Z+1	; 0x01
    4f08:	82 81       	ldd	r24, Z+2	; 0x02
    4f0a:	93 81       	ldd	r25, Z+3	; 0x03
    4f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f10:	dc 01       	movw	r26, r24
    4f12:	cb 01       	movw	r24, r22
    4f14:	9e af       	std	Y+62, r25	; 0x3e
    4f16:	8d af       	std	Y+61, r24	; 0x3d
    4f18:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f1c:	9a af       	std	Y+58, r25	; 0x3a
    4f1e:	89 af       	std	Y+57, r24	; 0x39
    4f20:	89 ad       	ldd	r24, Y+57	; 0x39
    4f22:	9a ad       	ldd	r25, Y+58	; 0x3a
    4f24:	01 97       	sbiw	r24, 0x01	; 1
    4f26:	f1 f7       	brne	.-4      	; 0x4f24 <display+0x2ee>
    4f28:	9a af       	std	Y+58, r25	; 0x3a
    4f2a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(3);
		SEV_enuDisable(1);
    4f2c:	81 e0       	ldi	r24, 0x01	; 1
    4f2e:	0e 94 64 12 	call	0x24c8	; 0x24c8 <SEV_enuDisable>
		SEV_enuDisplay(2,(minutes/10));
    4f32:	80 91 52 01 	lds	r24, 0x0152
    4f36:	9a e0       	ldi	r25, 0x0A	; 10
    4f38:	69 2f       	mov	r22, r25
    4f3a:	0e 94 6d 2a 	call	0x54da	; 0x54da <__udivmodqi4>
    4f3e:	98 2f       	mov	r25, r24
    4f40:	82 e0       	ldi	r24, 0x02	; 2
    4f42:	69 2f       	mov	r22, r25
    4f44:	0e 94 36 11 	call	0x226c	; 0x226c <SEV_enuDisplay>
		SEV_enuEnable(2);
    4f48:	82 e0       	ldi	r24, 0x02	; 2
    4f4a:	0e 94 02 12 	call	0x2404	; 0x2404 <SEV_enuEnable>
    4f4e:	80 e0       	ldi	r24, 0x00	; 0
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	a0 e4       	ldi	r26, 0x40	; 64
    4f54:	b0 e4       	ldi	r27, 0x40	; 64
    4f56:	8d ab       	std	Y+53, r24	; 0x35
    4f58:	9e ab       	std	Y+54, r25	; 0x36
    4f5a:	af ab       	std	Y+55, r26	; 0x37
    4f5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f5e:	6d a9       	ldd	r22, Y+53	; 0x35
    4f60:	7e a9       	ldd	r23, Y+54	; 0x36
    4f62:	8f a9       	ldd	r24, Y+55	; 0x37
    4f64:	98 ad       	ldd	r25, Y+56	; 0x38
    4f66:	20 e0       	ldi	r18, 0x00	; 0
    4f68:	30 e0       	ldi	r19, 0x00	; 0
    4f6a:	4a ef       	ldi	r20, 0xFA	; 250
    4f6c:	54 e4       	ldi	r21, 0x44	; 68
    4f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f72:	dc 01       	movw	r26, r24
    4f74:	cb 01       	movw	r24, r22
    4f76:	89 ab       	std	Y+49, r24	; 0x31
    4f78:	9a ab       	std	Y+50, r25	; 0x32
    4f7a:	ab ab       	std	Y+51, r26	; 0x33
    4f7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4f7e:	69 a9       	ldd	r22, Y+49	; 0x31
    4f80:	7a a9       	ldd	r23, Y+50	; 0x32
    4f82:	8b a9       	ldd	r24, Y+51	; 0x33
    4f84:	9c a9       	ldd	r25, Y+52	; 0x34
    4f86:	20 e0       	ldi	r18, 0x00	; 0
    4f88:	30 e0       	ldi	r19, 0x00	; 0
    4f8a:	40 e8       	ldi	r20, 0x80	; 128
    4f8c:	5f e3       	ldi	r21, 0x3F	; 63
    4f8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f92:	88 23       	and	r24, r24
    4f94:	2c f4       	brge	.+10     	; 0x4fa0 <display+0x36a>
		__ticks = 1;
    4f96:	81 e0       	ldi	r24, 0x01	; 1
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	98 ab       	std	Y+48, r25	; 0x30
    4f9c:	8f a7       	std	Y+47, r24	; 0x2f
    4f9e:	3f c0       	rjmp	.+126    	; 0x501e <display+0x3e8>
	else if (__tmp > 65535)
    4fa0:	69 a9       	ldd	r22, Y+49	; 0x31
    4fa2:	7a a9       	ldd	r23, Y+50	; 0x32
    4fa4:	8b a9       	ldd	r24, Y+51	; 0x33
    4fa6:	9c a9       	ldd	r25, Y+52	; 0x34
    4fa8:	20 e0       	ldi	r18, 0x00	; 0
    4faa:	3f ef       	ldi	r19, 0xFF	; 255
    4fac:	4f e7       	ldi	r20, 0x7F	; 127
    4fae:	57 e4       	ldi	r21, 0x47	; 71
    4fb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4fb4:	18 16       	cp	r1, r24
    4fb6:	4c f5       	brge	.+82     	; 0x500a <display+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fb8:	6d a9       	ldd	r22, Y+53	; 0x35
    4fba:	7e a9       	ldd	r23, Y+54	; 0x36
    4fbc:	8f a9       	ldd	r24, Y+55	; 0x37
    4fbe:	98 ad       	ldd	r25, Y+56	; 0x38
    4fc0:	20 e0       	ldi	r18, 0x00	; 0
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	40 e2       	ldi	r20, 0x20	; 32
    4fc6:	51 e4       	ldi	r21, 0x41	; 65
    4fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fcc:	dc 01       	movw	r26, r24
    4fce:	cb 01       	movw	r24, r22
    4fd0:	bc 01       	movw	r22, r24
    4fd2:	cd 01       	movw	r24, r26
    4fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fd8:	dc 01       	movw	r26, r24
    4fda:	cb 01       	movw	r24, r22
    4fdc:	98 ab       	std	Y+48, r25	; 0x30
    4fde:	8f a7       	std	Y+47, r24	; 0x2f
    4fe0:	0f c0       	rjmp	.+30     	; 0x5000 <display+0x3ca>
    4fe2:	88 ec       	ldi	r24, 0xC8	; 200
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	9e a7       	std	Y+46, r25	; 0x2e
    4fe8:	8d a7       	std	Y+45, r24	; 0x2d
    4fea:	8d a5       	ldd	r24, Y+45	; 0x2d
    4fec:	9e a5       	ldd	r25, Y+46	; 0x2e
    4fee:	01 97       	sbiw	r24, 0x01	; 1
    4ff0:	f1 f7       	brne	.-4      	; 0x4fee <display+0x3b8>
    4ff2:	9e a7       	std	Y+46, r25	; 0x2e
    4ff4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ff6:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ff8:	98 a9       	ldd	r25, Y+48	; 0x30
    4ffa:	01 97       	sbiw	r24, 0x01	; 1
    4ffc:	98 ab       	std	Y+48, r25	; 0x30
    4ffe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5000:	8f a5       	ldd	r24, Y+47	; 0x2f
    5002:	98 a9       	ldd	r25, Y+48	; 0x30
    5004:	00 97       	sbiw	r24, 0x00	; 0
    5006:	69 f7       	brne	.-38     	; 0x4fe2 <display+0x3ac>
    5008:	14 c0       	rjmp	.+40     	; 0x5032 <display+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    500a:	69 a9       	ldd	r22, Y+49	; 0x31
    500c:	7a a9       	ldd	r23, Y+50	; 0x32
    500e:	8b a9       	ldd	r24, Y+51	; 0x33
    5010:	9c a9       	ldd	r25, Y+52	; 0x34
    5012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5016:	dc 01       	movw	r26, r24
    5018:	cb 01       	movw	r24, r22
    501a:	98 ab       	std	Y+48, r25	; 0x30
    501c:	8f a7       	std	Y+47, r24	; 0x2f
    501e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5020:	98 a9       	ldd	r25, Y+48	; 0x30
    5022:	9c a7       	std	Y+44, r25	; 0x2c
    5024:	8b a7       	std	Y+43, r24	; 0x2b
    5026:	8b a5       	ldd	r24, Y+43	; 0x2b
    5028:	9c a5       	ldd	r25, Y+44	; 0x2c
    502a:	01 97       	sbiw	r24, 0x01	; 1
    502c:	f1 f7       	brne	.-4      	; 0x502a <display+0x3f4>
    502e:	9c a7       	std	Y+44, r25	; 0x2c
    5030:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(3);
		SEV_enuDisable(2);
    5032:	82 e0       	ldi	r24, 0x02	; 2
    5034:	0e 94 64 12 	call	0x24c8	; 0x24c8 <SEV_enuDisable>
		SEV_enuDisplay(3,(minutes%10));
    5038:	80 91 52 01 	lds	r24, 0x0152
    503c:	9a e0       	ldi	r25, 0x0A	; 10
    503e:	69 2f       	mov	r22, r25
    5040:	0e 94 6d 2a 	call	0x54da	; 0x54da <__udivmodqi4>
    5044:	89 2f       	mov	r24, r25
    5046:	98 2f       	mov	r25, r24
    5048:	83 e0       	ldi	r24, 0x03	; 3
    504a:	69 2f       	mov	r22, r25
    504c:	0e 94 36 11 	call	0x226c	; 0x226c <SEV_enuDisplay>
		SEV_enuEnable(3);
    5050:	83 e0       	ldi	r24, 0x03	; 3
    5052:	0e 94 02 12 	call	0x2404	; 0x2404 <SEV_enuEnable>
    5056:	80 e0       	ldi	r24, 0x00	; 0
    5058:	90 e0       	ldi	r25, 0x00	; 0
    505a:	a0 e4       	ldi	r26, 0x40	; 64
    505c:	b0 e4       	ldi	r27, 0x40	; 64
    505e:	8f a3       	std	Y+39, r24	; 0x27
    5060:	98 a7       	std	Y+40, r25	; 0x28
    5062:	a9 a7       	std	Y+41, r26	; 0x29
    5064:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5066:	6f a1       	ldd	r22, Y+39	; 0x27
    5068:	78 a5       	ldd	r23, Y+40	; 0x28
    506a:	89 a5       	ldd	r24, Y+41	; 0x29
    506c:	9a a5       	ldd	r25, Y+42	; 0x2a
    506e:	20 e0       	ldi	r18, 0x00	; 0
    5070:	30 e0       	ldi	r19, 0x00	; 0
    5072:	4a ef       	ldi	r20, 0xFA	; 250
    5074:	54 e4       	ldi	r21, 0x44	; 68
    5076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    507a:	dc 01       	movw	r26, r24
    507c:	cb 01       	movw	r24, r22
    507e:	8b a3       	std	Y+35, r24	; 0x23
    5080:	9c a3       	std	Y+36, r25	; 0x24
    5082:	ad a3       	std	Y+37, r26	; 0x25
    5084:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5086:	6b a1       	ldd	r22, Y+35	; 0x23
    5088:	7c a1       	ldd	r23, Y+36	; 0x24
    508a:	8d a1       	ldd	r24, Y+37	; 0x25
    508c:	9e a1       	ldd	r25, Y+38	; 0x26
    508e:	20 e0       	ldi	r18, 0x00	; 0
    5090:	30 e0       	ldi	r19, 0x00	; 0
    5092:	40 e8       	ldi	r20, 0x80	; 128
    5094:	5f e3       	ldi	r21, 0x3F	; 63
    5096:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    509a:	88 23       	and	r24, r24
    509c:	2c f4       	brge	.+10     	; 0x50a8 <display+0x472>
		__ticks = 1;
    509e:	81 e0       	ldi	r24, 0x01	; 1
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	9a a3       	std	Y+34, r25	; 0x22
    50a4:	89 a3       	std	Y+33, r24	; 0x21
    50a6:	3f c0       	rjmp	.+126    	; 0x5126 <display+0x4f0>
	else if (__tmp > 65535)
    50a8:	6b a1       	ldd	r22, Y+35	; 0x23
    50aa:	7c a1       	ldd	r23, Y+36	; 0x24
    50ac:	8d a1       	ldd	r24, Y+37	; 0x25
    50ae:	9e a1       	ldd	r25, Y+38	; 0x26
    50b0:	20 e0       	ldi	r18, 0x00	; 0
    50b2:	3f ef       	ldi	r19, 0xFF	; 255
    50b4:	4f e7       	ldi	r20, 0x7F	; 127
    50b6:	57 e4       	ldi	r21, 0x47	; 71
    50b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    50bc:	18 16       	cp	r1, r24
    50be:	4c f5       	brge	.+82     	; 0x5112 <display+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50c0:	6f a1       	ldd	r22, Y+39	; 0x27
    50c2:	78 a5       	ldd	r23, Y+40	; 0x28
    50c4:	89 a5       	ldd	r24, Y+41	; 0x29
    50c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    50c8:	20 e0       	ldi	r18, 0x00	; 0
    50ca:	30 e0       	ldi	r19, 0x00	; 0
    50cc:	40 e2       	ldi	r20, 0x20	; 32
    50ce:	51 e4       	ldi	r21, 0x41	; 65
    50d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50d4:	dc 01       	movw	r26, r24
    50d6:	cb 01       	movw	r24, r22
    50d8:	bc 01       	movw	r22, r24
    50da:	cd 01       	movw	r24, r26
    50dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e0:	dc 01       	movw	r26, r24
    50e2:	cb 01       	movw	r24, r22
    50e4:	9a a3       	std	Y+34, r25	; 0x22
    50e6:	89 a3       	std	Y+33, r24	; 0x21
    50e8:	0f c0       	rjmp	.+30     	; 0x5108 <display+0x4d2>
    50ea:	88 ec       	ldi	r24, 0xC8	; 200
    50ec:	90 e0       	ldi	r25, 0x00	; 0
    50ee:	98 a3       	std	Y+32, r25	; 0x20
    50f0:	8f 8f       	std	Y+31, r24	; 0x1f
    50f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50f4:	98 a1       	ldd	r25, Y+32	; 0x20
    50f6:	01 97       	sbiw	r24, 0x01	; 1
    50f8:	f1 f7       	brne	.-4      	; 0x50f6 <display+0x4c0>
    50fa:	98 a3       	std	Y+32, r25	; 0x20
    50fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50fe:	89 a1       	ldd	r24, Y+33	; 0x21
    5100:	9a a1       	ldd	r25, Y+34	; 0x22
    5102:	01 97       	sbiw	r24, 0x01	; 1
    5104:	9a a3       	std	Y+34, r25	; 0x22
    5106:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5108:	89 a1       	ldd	r24, Y+33	; 0x21
    510a:	9a a1       	ldd	r25, Y+34	; 0x22
    510c:	00 97       	sbiw	r24, 0x00	; 0
    510e:	69 f7       	brne	.-38     	; 0x50ea <display+0x4b4>
    5110:	14 c0       	rjmp	.+40     	; 0x513a <display+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5112:	6b a1       	ldd	r22, Y+35	; 0x23
    5114:	7c a1       	ldd	r23, Y+36	; 0x24
    5116:	8d a1       	ldd	r24, Y+37	; 0x25
    5118:	9e a1       	ldd	r25, Y+38	; 0x26
    511a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    511e:	dc 01       	movw	r26, r24
    5120:	cb 01       	movw	r24, r22
    5122:	9a a3       	std	Y+34, r25	; 0x22
    5124:	89 a3       	std	Y+33, r24	; 0x21
    5126:	89 a1       	ldd	r24, Y+33	; 0x21
    5128:	9a a1       	ldd	r25, Y+34	; 0x22
    512a:	9e 8f       	std	Y+30, r25	; 0x1e
    512c:	8d 8f       	std	Y+29, r24	; 0x1d
    512e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5130:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5132:	01 97       	sbiw	r24, 0x01	; 1
    5134:	f1 f7       	brne	.-4      	; 0x5132 <display+0x4fc>
    5136:	9e 8f       	std	Y+30, r25	; 0x1e
    5138:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(3);
		SEV_enuDisable(3);
    513a:	83 e0       	ldi	r24, 0x03	; 3
    513c:	0e 94 64 12 	call	0x24c8	; 0x24c8 <SEV_enuDisable>
		SEV_enuDisplay(4,(seconds/10));
    5140:	80 91 53 01 	lds	r24, 0x0153
    5144:	9a e0       	ldi	r25, 0x0A	; 10
    5146:	69 2f       	mov	r22, r25
    5148:	0e 94 6d 2a 	call	0x54da	; 0x54da <__udivmodqi4>
    514c:	98 2f       	mov	r25, r24
    514e:	84 e0       	ldi	r24, 0x04	; 4
    5150:	69 2f       	mov	r22, r25
    5152:	0e 94 36 11 	call	0x226c	; 0x226c <SEV_enuDisplay>
		SEV_enuEnable(4);
    5156:	84 e0       	ldi	r24, 0x04	; 4
    5158:	0e 94 02 12 	call	0x2404	; 0x2404 <SEV_enuEnable>
    515c:	80 e0       	ldi	r24, 0x00	; 0
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	a0 e4       	ldi	r26, 0x40	; 64
    5162:	b0 e4       	ldi	r27, 0x40	; 64
    5164:	89 8f       	std	Y+25, r24	; 0x19
    5166:	9a 8f       	std	Y+26, r25	; 0x1a
    5168:	ab 8f       	std	Y+27, r26	; 0x1b
    516a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    516c:	69 8d       	ldd	r22, Y+25	; 0x19
    516e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5170:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5172:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5174:	20 e0       	ldi	r18, 0x00	; 0
    5176:	30 e0       	ldi	r19, 0x00	; 0
    5178:	4a ef       	ldi	r20, 0xFA	; 250
    517a:	54 e4       	ldi	r21, 0x44	; 68
    517c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5180:	dc 01       	movw	r26, r24
    5182:	cb 01       	movw	r24, r22
    5184:	8d 8b       	std	Y+21, r24	; 0x15
    5186:	9e 8b       	std	Y+22, r25	; 0x16
    5188:	af 8b       	std	Y+23, r26	; 0x17
    518a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    518c:	6d 89       	ldd	r22, Y+21	; 0x15
    518e:	7e 89       	ldd	r23, Y+22	; 0x16
    5190:	8f 89       	ldd	r24, Y+23	; 0x17
    5192:	98 8d       	ldd	r25, Y+24	; 0x18
    5194:	20 e0       	ldi	r18, 0x00	; 0
    5196:	30 e0       	ldi	r19, 0x00	; 0
    5198:	40 e8       	ldi	r20, 0x80	; 128
    519a:	5f e3       	ldi	r21, 0x3F	; 63
    519c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    51a0:	88 23       	and	r24, r24
    51a2:	2c f4       	brge	.+10     	; 0x51ae <display+0x578>
		__ticks = 1;
    51a4:	81 e0       	ldi	r24, 0x01	; 1
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	9c 8b       	std	Y+20, r25	; 0x14
    51aa:	8b 8b       	std	Y+19, r24	; 0x13
    51ac:	3f c0       	rjmp	.+126    	; 0x522c <display+0x5f6>
	else if (__tmp > 65535)
    51ae:	6d 89       	ldd	r22, Y+21	; 0x15
    51b0:	7e 89       	ldd	r23, Y+22	; 0x16
    51b2:	8f 89       	ldd	r24, Y+23	; 0x17
    51b4:	98 8d       	ldd	r25, Y+24	; 0x18
    51b6:	20 e0       	ldi	r18, 0x00	; 0
    51b8:	3f ef       	ldi	r19, 0xFF	; 255
    51ba:	4f e7       	ldi	r20, 0x7F	; 127
    51bc:	57 e4       	ldi	r21, 0x47	; 71
    51be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    51c2:	18 16       	cp	r1, r24
    51c4:	4c f5       	brge	.+82     	; 0x5218 <display+0x5e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51c6:	69 8d       	ldd	r22, Y+25	; 0x19
    51c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51ce:	20 e0       	ldi	r18, 0x00	; 0
    51d0:	30 e0       	ldi	r19, 0x00	; 0
    51d2:	40 e2       	ldi	r20, 0x20	; 32
    51d4:	51 e4       	ldi	r21, 0x41	; 65
    51d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51da:	dc 01       	movw	r26, r24
    51dc:	cb 01       	movw	r24, r22
    51de:	bc 01       	movw	r22, r24
    51e0:	cd 01       	movw	r24, r26
    51e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51e6:	dc 01       	movw	r26, r24
    51e8:	cb 01       	movw	r24, r22
    51ea:	9c 8b       	std	Y+20, r25	; 0x14
    51ec:	8b 8b       	std	Y+19, r24	; 0x13
    51ee:	0f c0       	rjmp	.+30     	; 0x520e <display+0x5d8>
    51f0:	88 ec       	ldi	r24, 0xC8	; 200
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	9a 8b       	std	Y+18, r25	; 0x12
    51f6:	89 8b       	std	Y+17, r24	; 0x11
    51f8:	89 89       	ldd	r24, Y+17	; 0x11
    51fa:	9a 89       	ldd	r25, Y+18	; 0x12
    51fc:	01 97       	sbiw	r24, 0x01	; 1
    51fe:	f1 f7       	brne	.-4      	; 0x51fc <display+0x5c6>
    5200:	9a 8b       	std	Y+18, r25	; 0x12
    5202:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5204:	8b 89       	ldd	r24, Y+19	; 0x13
    5206:	9c 89       	ldd	r25, Y+20	; 0x14
    5208:	01 97       	sbiw	r24, 0x01	; 1
    520a:	9c 8b       	std	Y+20, r25	; 0x14
    520c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    520e:	8b 89       	ldd	r24, Y+19	; 0x13
    5210:	9c 89       	ldd	r25, Y+20	; 0x14
    5212:	00 97       	sbiw	r24, 0x00	; 0
    5214:	69 f7       	brne	.-38     	; 0x51f0 <display+0x5ba>
    5216:	14 c0       	rjmp	.+40     	; 0x5240 <display+0x60a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5218:	6d 89       	ldd	r22, Y+21	; 0x15
    521a:	7e 89       	ldd	r23, Y+22	; 0x16
    521c:	8f 89       	ldd	r24, Y+23	; 0x17
    521e:	98 8d       	ldd	r25, Y+24	; 0x18
    5220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5224:	dc 01       	movw	r26, r24
    5226:	cb 01       	movw	r24, r22
    5228:	9c 8b       	std	Y+20, r25	; 0x14
    522a:	8b 8b       	std	Y+19, r24	; 0x13
    522c:	8b 89       	ldd	r24, Y+19	; 0x13
    522e:	9c 89       	ldd	r25, Y+20	; 0x14
    5230:	98 8b       	std	Y+16, r25	; 0x10
    5232:	8f 87       	std	Y+15, r24	; 0x0f
    5234:	8f 85       	ldd	r24, Y+15	; 0x0f
    5236:	98 89       	ldd	r25, Y+16	; 0x10
    5238:	01 97       	sbiw	r24, 0x01	; 1
    523a:	f1 f7       	brne	.-4      	; 0x5238 <display+0x602>
    523c:	98 8b       	std	Y+16, r25	; 0x10
    523e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3);
		SEV_enuDisable(4);
    5240:	84 e0       	ldi	r24, 0x04	; 4
    5242:	0e 94 64 12 	call	0x24c8	; 0x24c8 <SEV_enuDisable>
		SEV_enuDisplay(5,(seconds%10));
    5246:	80 91 53 01 	lds	r24, 0x0153
    524a:	9a e0       	ldi	r25, 0x0A	; 10
    524c:	69 2f       	mov	r22, r25
    524e:	0e 94 6d 2a 	call	0x54da	; 0x54da <__udivmodqi4>
    5252:	89 2f       	mov	r24, r25
    5254:	98 2f       	mov	r25, r24
    5256:	85 e0       	ldi	r24, 0x05	; 5
    5258:	69 2f       	mov	r22, r25
    525a:	0e 94 36 11 	call	0x226c	; 0x226c <SEV_enuDisplay>
		SEV_enuEnable(5);
    525e:	85 e0       	ldi	r24, 0x05	; 5
    5260:	0e 94 02 12 	call	0x2404	; 0x2404 <SEV_enuEnable>
    5264:	80 e0       	ldi	r24, 0x00	; 0
    5266:	90 e0       	ldi	r25, 0x00	; 0
    5268:	a0 e4       	ldi	r26, 0x40	; 64
    526a:	b0 e4       	ldi	r27, 0x40	; 64
    526c:	8b 87       	std	Y+11, r24	; 0x0b
    526e:	9c 87       	std	Y+12, r25	; 0x0c
    5270:	ad 87       	std	Y+13, r26	; 0x0d
    5272:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5274:	6b 85       	ldd	r22, Y+11	; 0x0b
    5276:	7c 85       	ldd	r23, Y+12	; 0x0c
    5278:	8d 85       	ldd	r24, Y+13	; 0x0d
    527a:	9e 85       	ldd	r25, Y+14	; 0x0e
    527c:	20 e0       	ldi	r18, 0x00	; 0
    527e:	30 e0       	ldi	r19, 0x00	; 0
    5280:	4a ef       	ldi	r20, 0xFA	; 250
    5282:	54 e4       	ldi	r21, 0x44	; 68
    5284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5288:	dc 01       	movw	r26, r24
    528a:	cb 01       	movw	r24, r22
    528c:	8f 83       	std	Y+7, r24	; 0x07
    528e:	98 87       	std	Y+8, r25	; 0x08
    5290:	a9 87       	std	Y+9, r26	; 0x09
    5292:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5294:	6f 81       	ldd	r22, Y+7	; 0x07
    5296:	78 85       	ldd	r23, Y+8	; 0x08
    5298:	89 85       	ldd	r24, Y+9	; 0x09
    529a:	9a 85       	ldd	r25, Y+10	; 0x0a
    529c:	20 e0       	ldi	r18, 0x00	; 0
    529e:	30 e0       	ldi	r19, 0x00	; 0
    52a0:	40 e8       	ldi	r20, 0x80	; 128
    52a2:	5f e3       	ldi	r21, 0x3F	; 63
    52a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    52a8:	88 23       	and	r24, r24
    52aa:	2c f4       	brge	.+10     	; 0x52b6 <display+0x680>
		__ticks = 1;
    52ac:	81 e0       	ldi	r24, 0x01	; 1
    52ae:	90 e0       	ldi	r25, 0x00	; 0
    52b0:	9e 83       	std	Y+6, r25	; 0x06
    52b2:	8d 83       	std	Y+5, r24	; 0x05
    52b4:	3f c0       	rjmp	.+126    	; 0x5334 <display+0x6fe>
	else if (__tmp > 65535)
    52b6:	6f 81       	ldd	r22, Y+7	; 0x07
    52b8:	78 85       	ldd	r23, Y+8	; 0x08
    52ba:	89 85       	ldd	r24, Y+9	; 0x09
    52bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    52be:	20 e0       	ldi	r18, 0x00	; 0
    52c0:	3f ef       	ldi	r19, 0xFF	; 255
    52c2:	4f e7       	ldi	r20, 0x7F	; 127
    52c4:	57 e4       	ldi	r21, 0x47	; 71
    52c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    52ca:	18 16       	cp	r1, r24
    52cc:	4c f5       	brge	.+82     	; 0x5320 <display+0x6ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    52d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    52d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    52d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    52d6:	20 e0       	ldi	r18, 0x00	; 0
    52d8:	30 e0       	ldi	r19, 0x00	; 0
    52da:	40 e2       	ldi	r20, 0x20	; 32
    52dc:	51 e4       	ldi	r21, 0x41	; 65
    52de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52e2:	dc 01       	movw	r26, r24
    52e4:	cb 01       	movw	r24, r22
    52e6:	bc 01       	movw	r22, r24
    52e8:	cd 01       	movw	r24, r26
    52ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52ee:	dc 01       	movw	r26, r24
    52f0:	cb 01       	movw	r24, r22
    52f2:	9e 83       	std	Y+6, r25	; 0x06
    52f4:	8d 83       	std	Y+5, r24	; 0x05
    52f6:	0f c0       	rjmp	.+30     	; 0x5316 <display+0x6e0>
    52f8:	88 ec       	ldi	r24, 0xC8	; 200
    52fa:	90 e0       	ldi	r25, 0x00	; 0
    52fc:	9c 83       	std	Y+4, r25	; 0x04
    52fe:	8b 83       	std	Y+3, r24	; 0x03
    5300:	8b 81       	ldd	r24, Y+3	; 0x03
    5302:	9c 81       	ldd	r25, Y+4	; 0x04
    5304:	01 97       	sbiw	r24, 0x01	; 1
    5306:	f1 f7       	brne	.-4      	; 0x5304 <display+0x6ce>
    5308:	9c 83       	std	Y+4, r25	; 0x04
    530a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    530c:	8d 81       	ldd	r24, Y+5	; 0x05
    530e:	9e 81       	ldd	r25, Y+6	; 0x06
    5310:	01 97       	sbiw	r24, 0x01	; 1
    5312:	9e 83       	std	Y+6, r25	; 0x06
    5314:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5316:	8d 81       	ldd	r24, Y+5	; 0x05
    5318:	9e 81       	ldd	r25, Y+6	; 0x06
    531a:	00 97       	sbiw	r24, 0x00	; 0
    531c:	69 f7       	brne	.-38     	; 0x52f8 <display+0x6c2>
    531e:	14 c0       	rjmp	.+40     	; 0x5348 <display+0x712>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5320:	6f 81       	ldd	r22, Y+7	; 0x07
    5322:	78 85       	ldd	r23, Y+8	; 0x08
    5324:	89 85       	ldd	r24, Y+9	; 0x09
    5326:	9a 85       	ldd	r25, Y+10	; 0x0a
    5328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    532c:	dc 01       	movw	r26, r24
    532e:	cb 01       	movw	r24, r22
    5330:	9e 83       	std	Y+6, r25	; 0x06
    5332:	8d 83       	std	Y+5, r24	; 0x05
    5334:	8d 81       	ldd	r24, Y+5	; 0x05
    5336:	9e 81       	ldd	r25, Y+6	; 0x06
    5338:	9a 83       	std	Y+2, r25	; 0x02
    533a:	89 83       	std	Y+1, r24	; 0x01
    533c:	89 81       	ldd	r24, Y+1	; 0x01
    533e:	9a 81       	ldd	r25, Y+2	; 0x02
    5340:	01 97       	sbiw	r24, 0x01	; 1
    5342:	f1 f7       	brne	.-4      	; 0x5340 <display+0x70a>
    5344:	9a 83       	std	Y+2, r25	; 0x02
    5346:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3);
		SEV_enuDisable(5);
    5348:	85 e0       	ldi	r24, 0x05	; 5
    534a:	0e 94 64 12 	call	0x24c8	; 0x24c8 <SEV_enuDisable>
    534e:	96 cc       	rjmp	.-1748   	; 0x4c7c <display+0x46>

00005350 <main>:
	}
}

int main (void)
{
    5350:	df 93       	push	r29
    5352:	cf 93       	push	r28
    5354:	cd b7       	in	r28, 0x3d	; 61
    5356:	de b7       	in	r29, 0x3e	; 62
    5358:	2e 97       	sbiw	r28, 0x0e	; 14
    535a:	0f b6       	in	r0, 0x3f	; 63
    535c:	f8 94       	cli
    535e:	de bf       	out	0x3e, r29	; 62
    5360:	0f be       	out	0x3f, r0	; 63
    5362:	cd bf       	out	0x3d, r28	; 61

	DIO_voidInit();
    5364:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_voidInit>
	LCD_voidInit();
    5368:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_voidInit>
	KPD_voidInit();
    536c:	0e 94 21 21 	call	0x4242	; 0x4242 <KPD_voidInit>
	GIE_voidEnable();
    5370:	0e 94 b2 0c 	call	0x1964	; 0x1964 <GIE_voidEnable>
	LCD_voidClrScr(0);
    5374:	80 e0       	ldi	r24, 0x00	; 0
    5376:	0e 94 3a 20 	call	0x4074	; 0x4074 <LCD_voidClrScr>
	LCD_voidSendString(0,"Press 1 to");
    537a:	2c eb       	ldi	r18, 0xBC	; 188
    537c:	30 e0       	ldi	r19, 0x00	; 0
    537e:	80 e0       	ldi	r24, 0x00	; 0
    5380:	b9 01       	movw	r22, r18
    5382:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
	LCD_voidMoveCourser(0,2,1);
    5386:	80 e0       	ldi	r24, 0x00	; 0
    5388:	62 e0       	ldi	r22, 0x02	; 2
    538a:	41 e0       	ldi	r20, 0x01	; 1
    538c:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_voidMoveCourser>
	LCD_voidSendString(0,"set clock");
    5390:	27 ec       	ldi	r18, 0xC7	; 199
    5392:	30 e0       	ldi	r19, 0x00	; 0
    5394:	80 e0       	ldi	r24, 0x00	; 0
    5396:	b9 01       	movw	r22, r18
    5398:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
	while(1)
	{
		u8Key = KPD_u8GetPressedKey();
    539c:	0e 94 48 21 	call	0x4290	; 0x4290 <KPD_u8GetPressedKey>
    53a0:	80 93 40 01 	sts	0x0140, r24
		if(u8Key != 0xff)
    53a4:	80 91 40 01 	lds	r24, 0x0140
    53a8:	8f 3f       	cpi	r24, 0xFF	; 255
    53aa:	c1 f3       	breq	.-16     	; 0x539c <main+0x4c>
		{
			if(u8Key == '1')
    53ac:	80 91 40 01 	lds	r24, 0x0140
    53b0:	81 33       	cpi	r24, 0x31	; 49
    53b2:	19 f4       	brne	.+6      	; 0x53ba <main+0x6a>
			{
				Hours();
    53b4:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Hours>
    53b8:	f1 cf       	rjmp	.-30     	; 0x539c <main+0x4c>
			}
			else
			{
				LCD_voidClrScr(0);
    53ba:	80 e0       	ldi	r24, 0x00	; 0
    53bc:	0e 94 3a 20 	call	0x4074	; 0x4074 <LCD_voidClrScr>
				LCD_voidSendString(0,"Wrong choice");
    53c0:	21 ed       	ldi	r18, 0xD1	; 209
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	80 e0       	ldi	r24, 0x00	; 0
    53c6:	b9 01       	movw	r22, r18
    53c8:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
    53cc:	80 e0       	ldi	r24, 0x00	; 0
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	aa ef       	ldi	r26, 0xFA	; 250
    53d2:	b3 e4       	ldi	r27, 0x43	; 67
    53d4:	8b 87       	std	Y+11, r24	; 0x0b
    53d6:	9c 87       	std	Y+12, r25	; 0x0c
    53d8:	ad 87       	std	Y+13, r26	; 0x0d
    53da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    53de:	7c 85       	ldd	r23, Y+12	; 0x0c
    53e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    53e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    53e4:	20 e0       	ldi	r18, 0x00	; 0
    53e6:	30 e0       	ldi	r19, 0x00	; 0
    53e8:	4a ef       	ldi	r20, 0xFA	; 250
    53ea:	54 e4       	ldi	r21, 0x44	; 68
    53ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53f0:	dc 01       	movw	r26, r24
    53f2:	cb 01       	movw	r24, r22
    53f4:	8f 83       	std	Y+7, r24	; 0x07
    53f6:	98 87       	std	Y+8, r25	; 0x08
    53f8:	a9 87       	std	Y+9, r26	; 0x09
    53fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53fc:	6f 81       	ldd	r22, Y+7	; 0x07
    53fe:	78 85       	ldd	r23, Y+8	; 0x08
    5400:	89 85       	ldd	r24, Y+9	; 0x09
    5402:	9a 85       	ldd	r25, Y+10	; 0x0a
    5404:	20 e0       	ldi	r18, 0x00	; 0
    5406:	30 e0       	ldi	r19, 0x00	; 0
    5408:	40 e8       	ldi	r20, 0x80	; 128
    540a:	5f e3       	ldi	r21, 0x3F	; 63
    540c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5410:	88 23       	and	r24, r24
    5412:	2c f4       	brge	.+10     	; 0x541e <main+0xce>
		__ticks = 1;
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	90 e0       	ldi	r25, 0x00	; 0
    5418:	9e 83       	std	Y+6, r25	; 0x06
    541a:	8d 83       	std	Y+5, r24	; 0x05
    541c:	3f c0       	rjmp	.+126    	; 0x549c <main+0x14c>
	else if (__tmp > 65535)
    541e:	6f 81       	ldd	r22, Y+7	; 0x07
    5420:	78 85       	ldd	r23, Y+8	; 0x08
    5422:	89 85       	ldd	r24, Y+9	; 0x09
    5424:	9a 85       	ldd	r25, Y+10	; 0x0a
    5426:	20 e0       	ldi	r18, 0x00	; 0
    5428:	3f ef       	ldi	r19, 0xFF	; 255
    542a:	4f e7       	ldi	r20, 0x7F	; 127
    542c:	57 e4       	ldi	r21, 0x47	; 71
    542e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5432:	18 16       	cp	r1, r24
    5434:	4c f5       	brge	.+82     	; 0x5488 <main+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5436:	6b 85       	ldd	r22, Y+11	; 0x0b
    5438:	7c 85       	ldd	r23, Y+12	; 0x0c
    543a:	8d 85       	ldd	r24, Y+13	; 0x0d
    543c:	9e 85       	ldd	r25, Y+14	; 0x0e
    543e:	20 e0       	ldi	r18, 0x00	; 0
    5440:	30 e0       	ldi	r19, 0x00	; 0
    5442:	40 e2       	ldi	r20, 0x20	; 32
    5444:	51 e4       	ldi	r21, 0x41	; 65
    5446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    544a:	dc 01       	movw	r26, r24
    544c:	cb 01       	movw	r24, r22
    544e:	bc 01       	movw	r22, r24
    5450:	cd 01       	movw	r24, r26
    5452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5456:	dc 01       	movw	r26, r24
    5458:	cb 01       	movw	r24, r22
    545a:	9e 83       	std	Y+6, r25	; 0x06
    545c:	8d 83       	std	Y+5, r24	; 0x05
    545e:	0f c0       	rjmp	.+30     	; 0x547e <main+0x12e>
    5460:	88 ec       	ldi	r24, 0xC8	; 200
    5462:	90 e0       	ldi	r25, 0x00	; 0
    5464:	9c 83       	std	Y+4, r25	; 0x04
    5466:	8b 83       	std	Y+3, r24	; 0x03
    5468:	8b 81       	ldd	r24, Y+3	; 0x03
    546a:	9c 81       	ldd	r25, Y+4	; 0x04
    546c:	01 97       	sbiw	r24, 0x01	; 1
    546e:	f1 f7       	brne	.-4      	; 0x546c <main+0x11c>
    5470:	9c 83       	std	Y+4, r25	; 0x04
    5472:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5474:	8d 81       	ldd	r24, Y+5	; 0x05
    5476:	9e 81       	ldd	r25, Y+6	; 0x06
    5478:	01 97       	sbiw	r24, 0x01	; 1
    547a:	9e 83       	std	Y+6, r25	; 0x06
    547c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    547e:	8d 81       	ldd	r24, Y+5	; 0x05
    5480:	9e 81       	ldd	r25, Y+6	; 0x06
    5482:	00 97       	sbiw	r24, 0x00	; 0
    5484:	69 f7       	brne	.-38     	; 0x5460 <main+0x110>
    5486:	14 c0       	rjmp	.+40     	; 0x54b0 <main+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5488:	6f 81       	ldd	r22, Y+7	; 0x07
    548a:	78 85       	ldd	r23, Y+8	; 0x08
    548c:	89 85       	ldd	r24, Y+9	; 0x09
    548e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5494:	dc 01       	movw	r26, r24
    5496:	cb 01       	movw	r24, r22
    5498:	9e 83       	std	Y+6, r25	; 0x06
    549a:	8d 83       	std	Y+5, r24	; 0x05
    549c:	8d 81       	ldd	r24, Y+5	; 0x05
    549e:	9e 81       	ldd	r25, Y+6	; 0x06
    54a0:	9a 83       	std	Y+2, r25	; 0x02
    54a2:	89 83       	std	Y+1, r24	; 0x01
    54a4:	89 81       	ldd	r24, Y+1	; 0x01
    54a6:	9a 81       	ldd	r25, Y+2	; 0x02
    54a8:	01 97       	sbiw	r24, 0x01	; 1
    54aa:	f1 f7       	brne	.-4      	; 0x54a8 <main+0x158>
    54ac:	9a 83       	std	Y+2, r25	; 0x02
    54ae:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				LCD_voidClrScr(0);
    54b0:	80 e0       	ldi	r24, 0x00	; 0
    54b2:	0e 94 3a 20 	call	0x4074	; 0x4074 <LCD_voidClrScr>
				LCD_voidSendString(0,"Press 1 to");
    54b6:	2c eb       	ldi	r18, 0xBC	; 188
    54b8:	30 e0       	ldi	r19, 0x00	; 0
    54ba:	80 e0       	ldi	r24, 0x00	; 0
    54bc:	b9 01       	movw	r22, r18
    54be:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
				LCD_voidMoveCourser(0,2,1);
    54c2:	80 e0       	ldi	r24, 0x00	; 0
    54c4:	62 e0       	ldi	r22, 0x02	; 2
    54c6:	41 e0       	ldi	r20, 0x01	; 1
    54c8:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_voidMoveCourser>
				LCD_voidSendString(0,"set clock");
    54cc:	27 ec       	ldi	r18, 0xC7	; 199
    54ce:	30 e0       	ldi	r19, 0x00	; 0
    54d0:	80 e0       	ldi	r24, 0x00	; 0
    54d2:	b9 01       	movw	r22, r18
    54d4:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_voidSendString>
    54d8:	61 cf       	rjmp	.-318    	; 0x539c <main+0x4c>

000054da <__udivmodqi4>:
    54da:	99 1b       	sub	r25, r25
    54dc:	79 e0       	ldi	r23, 0x09	; 9
    54de:	04 c0       	rjmp	.+8      	; 0x54e8 <__udivmodqi4_ep>

000054e0 <__udivmodqi4_loop>:
    54e0:	99 1f       	adc	r25, r25
    54e2:	96 17       	cp	r25, r22
    54e4:	08 f0       	brcs	.+2      	; 0x54e8 <__udivmodqi4_ep>
    54e6:	96 1b       	sub	r25, r22

000054e8 <__udivmodqi4_ep>:
    54e8:	88 1f       	adc	r24, r24
    54ea:	7a 95       	dec	r23
    54ec:	c9 f7       	brne	.-14     	; 0x54e0 <__udivmodqi4_loop>
    54ee:	80 95       	com	r24
    54f0:	08 95       	ret

000054f2 <__udivmodsi4>:
    54f2:	a1 e2       	ldi	r26, 0x21	; 33
    54f4:	1a 2e       	mov	r1, r26
    54f6:	aa 1b       	sub	r26, r26
    54f8:	bb 1b       	sub	r27, r27
    54fa:	fd 01       	movw	r30, r26
    54fc:	0d c0       	rjmp	.+26     	; 0x5518 <__udivmodsi4_ep>

000054fe <__udivmodsi4_loop>:
    54fe:	aa 1f       	adc	r26, r26
    5500:	bb 1f       	adc	r27, r27
    5502:	ee 1f       	adc	r30, r30
    5504:	ff 1f       	adc	r31, r31
    5506:	a2 17       	cp	r26, r18
    5508:	b3 07       	cpc	r27, r19
    550a:	e4 07       	cpc	r30, r20
    550c:	f5 07       	cpc	r31, r21
    550e:	20 f0       	brcs	.+8      	; 0x5518 <__udivmodsi4_ep>
    5510:	a2 1b       	sub	r26, r18
    5512:	b3 0b       	sbc	r27, r19
    5514:	e4 0b       	sbc	r30, r20
    5516:	f5 0b       	sbc	r31, r21

00005518 <__udivmodsi4_ep>:
    5518:	66 1f       	adc	r22, r22
    551a:	77 1f       	adc	r23, r23
    551c:	88 1f       	adc	r24, r24
    551e:	99 1f       	adc	r25, r25
    5520:	1a 94       	dec	r1
    5522:	69 f7       	brne	.-38     	; 0x54fe <__udivmodsi4_loop>
    5524:	60 95       	com	r22
    5526:	70 95       	com	r23
    5528:	80 95       	com	r24
    552a:	90 95       	com	r25
    552c:	9b 01       	movw	r18, r22
    552e:	ac 01       	movw	r20, r24
    5530:	bd 01       	movw	r22, r26
    5532:	cf 01       	movw	r24, r30
    5534:	08 95       	ret

00005536 <__prologue_saves__>:
    5536:	2f 92       	push	r2
    5538:	3f 92       	push	r3
    553a:	4f 92       	push	r4
    553c:	5f 92       	push	r5
    553e:	6f 92       	push	r6
    5540:	7f 92       	push	r7
    5542:	8f 92       	push	r8
    5544:	9f 92       	push	r9
    5546:	af 92       	push	r10
    5548:	bf 92       	push	r11
    554a:	cf 92       	push	r12
    554c:	df 92       	push	r13
    554e:	ef 92       	push	r14
    5550:	ff 92       	push	r15
    5552:	0f 93       	push	r16
    5554:	1f 93       	push	r17
    5556:	cf 93       	push	r28
    5558:	df 93       	push	r29
    555a:	cd b7       	in	r28, 0x3d	; 61
    555c:	de b7       	in	r29, 0x3e	; 62
    555e:	ca 1b       	sub	r28, r26
    5560:	db 0b       	sbc	r29, r27
    5562:	0f b6       	in	r0, 0x3f	; 63
    5564:	f8 94       	cli
    5566:	de bf       	out	0x3e, r29	; 62
    5568:	0f be       	out	0x3f, r0	; 63
    556a:	cd bf       	out	0x3d, r28	; 61
    556c:	09 94       	ijmp

0000556e <__epilogue_restores__>:
    556e:	2a 88       	ldd	r2, Y+18	; 0x12
    5570:	39 88       	ldd	r3, Y+17	; 0x11
    5572:	48 88       	ldd	r4, Y+16	; 0x10
    5574:	5f 84       	ldd	r5, Y+15	; 0x0f
    5576:	6e 84       	ldd	r6, Y+14	; 0x0e
    5578:	7d 84       	ldd	r7, Y+13	; 0x0d
    557a:	8c 84       	ldd	r8, Y+12	; 0x0c
    557c:	9b 84       	ldd	r9, Y+11	; 0x0b
    557e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5580:	b9 84       	ldd	r11, Y+9	; 0x09
    5582:	c8 84       	ldd	r12, Y+8	; 0x08
    5584:	df 80       	ldd	r13, Y+7	; 0x07
    5586:	ee 80       	ldd	r14, Y+6	; 0x06
    5588:	fd 80       	ldd	r15, Y+5	; 0x05
    558a:	0c 81       	ldd	r16, Y+4	; 0x04
    558c:	1b 81       	ldd	r17, Y+3	; 0x03
    558e:	aa 81       	ldd	r26, Y+2	; 0x02
    5590:	b9 81       	ldd	r27, Y+1	; 0x01
    5592:	ce 0f       	add	r28, r30
    5594:	d1 1d       	adc	r29, r1
    5596:	0f b6       	in	r0, 0x3f	; 63
    5598:	f8 94       	cli
    559a:	de bf       	out	0x3e, r29	; 62
    559c:	0f be       	out	0x3f, r0	; 63
    559e:	cd bf       	out	0x3d, r28	; 61
    55a0:	ed 01       	movw	r28, r26
    55a2:	08 95       	ret

000055a4 <_exit>:
    55a4:	f8 94       	cli

000055a6 <__stop_program>:
    55a6:	ff cf       	rjmp	.-2      	; 0x55a6 <__stop_program>
